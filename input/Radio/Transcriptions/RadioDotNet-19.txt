0.00 5.32 "Анатолий Кулаков" Добрый день, дорогие друзья!
5.32 8.44 "Анатолий Кулаков" С вами Radio.net, выпуск номер 19.
8.44 12.20 "Анатолий Кулаков" И сегодня здесь с вами Анатолий Кулаков и я, Игорь Лабутин.
12.20 20.08 "Анатолий Кулаков" За то время, пока мы с вами не виделись, команда .NET не порадовала нас ничем интересным и, наверное, все сотрудники Microsoft ушли в активный отпуск.
20.08 22.36 "Анатолий Кулаков" Поэтому начинать будем с ReSharper.
22.36 31.72 "Анатолий Кулаков" Вышли ReSharper и Rider 2020.3 и основной упор в этом релизе, который тоже сделан на поддержку нового .NET, нового C#.
31.72 36.80 "Анатолий Кулаков" Например, у нас теперь отлично поддерживаются рекорды со всеми их атрибутиками и свойствами.
36.80 41.80 "Анатолий Кулаков" Поддерживается куча всяких фиксов новых, которые теперь появились в связи с этим.
41.80 47.04 "Анатолий Кулаков" Например, у рекордов можно взять их конструкторские свойства и превратить в обычные.
47.04 52.96 "Анатолий Кулаков" Ну, это нужно, например, если вы вдруг захотите проставить там какие-нибудь сеттеры или написать дополнительную логику к рекордам.
52.96 54.92 "Анатолий Кулаков" Довольно-таки удобно, весьма интересно.
54.92 59.84 "Анатолий Кулаков" Также ReSharper научился понимать тот факт, что у рекордов есть деконструктор.
59.84 68.24 "Анатолий Кулаков" Поэтому в тех интересных местах, где вам нужно просто-напросто разложить рекорд на составляющие, вы можете делать это с помощью удобного QuickFix.
68.24 70.80 "Анатолий Кулаков" Появились атрибуты на локальных функциях.
70.80 76.20 "Анатолий Кулаков" И ReSharper теперь может развешивать наши любимые null и not null даже на локальных функциях.
76.20 84.20 "Анатолий Кулаков" Теперь мы все знаем о Top-Level Programs, поэтому можно вашу программку сократить буквально до пару строчек, чтобы написать Hello World.
84.20 93.56 "Анатолий Кулаков" Ну и одна из темных лошадок в сочетании с ReSharper, очень мне интересно, что из нее получится, это Target Type New Expressions.
93.56 97.92 "Анатолий Кулаков" То есть можно убрать типы там, где их может вывести компилятор.
97.92 100.72 "Анатолий Кулаков" Куча кода просто должна отойти, умереть.
100.72 111.68 "Анатолий Кулаков" И очень интересно узнать, что получится, потому что это будет довольно-таки непривычный синтаксис для многих, кто привык видеть очевидный код, кто привык видеть глазками типы.
111.68 120.48 "Анатолий Кулаков" ReSharper наверняка попросит поудалять кучу инициализаций, тайки словарей, массивов, кучу инициализаций класса, где он сам может выводить типы.
120.48 125.00 "Анатолий Кулаков" И здесь, по-моему, начнется самая большая неоднозначность со времен VAR.
125.00 134.36 "Анатолий Кулаков" То есть люди начнут вводить конвеншены в командах и спорить, что же там ставить все-таки, оставлять настоящие типы или давать компилятору это выводить.
134.36 139.96 "Анатолий Кулаков" Очень интересно посмотреть, в какие статьи, в какие батлы, в какие мнения это все выльется.
139.96 144.72 "Анатолий Кулаков" Поддержана самая эпическая фича этого релиза, по моему мнению, это сорс-генераторы.
144.72 156.32 "Анатолий Кулаков" То есть вы получаете полноценный код комплишн, вы можете снавигироваться в сгенерированный код и посмотреть, что же эти магические генераторы все-таки там прогенерировали.
156.32 157.32 None Это очень удобно.
157.32 160.52 "Анатолий Кулаков" Еще, Игорь, обновление специально для тебя.
160.52 161.52 "Анатолий Кулаков" Inlain Hints.
161.52 166.96 "Анатолий Кулаков" Помнишь, ты когда-то жаловался, что хинты для тебя были слишком шумными и ты их полностью выключил.
166.96 171.80 "Анатолий Кулаков" Так вот, появился новый режим, который называется Push to Hints Visibility Mode.
171.80 173.36 "Анатолий Кулаков" Включается он в настройках.
173.36 174.60 "Анатолий Кулаков" Заключается он в следующем.
174.60 177.60 "Анатолий Кулаков" Просто так Inlain Hints вы не видите.
177.60 180.08 "Анатолий Кулаков" Но если зажмете Ctrl, то они появляются.
180.08 182.04 "Анатолий Кулаков" Ctrl отпускаете, они исчезают.
182.04 185.40 "Анатолий Кулаков" Второй способ - это два раза нажать Ctrl и тогда они будут держаться.
185.40 187.28 "Анатолий Кулаков" Еще раз нажмете Ctrl, они исчезнут.
187.28 189.20 "Анатолий Кулаков" По-моему, идеальный вариант.
189.20 200.16 "Игорь Лабутин" Было бы еще лучше, если бы они были сделаны очень умными, настолько, чтобы они себя вели так же, как ведет себя, например, подсказки про VAR, когда можно сказать, что использовать VAR только если не очевидно.
200.16 203.32 "Игорь Лабутин" И чтобы хинты тоже появлялись только там, где они не очевидны.
203.32 208.12 "Анатолий Кулаков" Мне кажется, здесь все на очень много сложнее, чем постоять дела в VAR-ах.
208.12 214.12 "Анатолий Кулаков" Но я вижу, что с каждым релизом эта функция все улучшается, улучшается.
214.12 218.52 "Анатолий Кулаков" Хинты становятся все более полезные и удаляются все более раздражительные и ненужные.
218.52 223.68 "Анатолий Кулаков" Поэтому, мне кажется, они недалеки от того идеала, который ты у себя в голове построил.
223.68 225.64 "Игорь Лабутин" Значит, мне надо будет попробовать.
225.64 238.36 "Игорь Лабутин" Я как раз несколько дней назад обновился на 2020.3 и постараюсь найти в настройках, где я все это выключил, настолько, что они теперь совсем не видны, чтобы включить обратно и посмотреть, как теперь это себя ведет.
238.36 246.44 "Анатолий Кулаков" Еще одна маленькая, но интересная штука - это введен специальный значочек, который отображается там, где у вас происходит неявное преобразование типов.
246.44 253.32 "Анатолий Кулаков" Например, есть многие типы, которые требуют в себе там в конструктор или в методы double, но вы туда передаете какой-нибудь int.
253.32 255.56 "Анатолий Кулаков" И под капотом происходит неявное преобразование.
255.56 261.92 "Анатолий Кулаков" Это кажется мелочью, но во многих местах очень может быть даже значительной штукой.
261.92 263.44 "Анатолий Кулаков" Посмотрим, как это приживется.
263.44 268.28 "Анатолий Кулаков" Еще одна огромная новость этого релиза - это поддержка Аволонии.
268.28 272.00 "Анатолий Кулаков" Вообще, мне кажется, что этот год он для Аволонии какой-то мега популярный.
272.00 277.72 "Анатолий Кулаков" То Microsoft ее использует в своих поделках, то она встречается в каких-то экспериментах крупных фирм.
277.72 281.64 "Анатолий Кулаков" Теперь вот даже JetBrains в райдере решили ее поддержать.
281.64 283.04 "Анатолий Кулаков" Что-то странное творится.
283.04 287.92 "Анатолий Кулаков" Буквально год назад я готов поклясться, что никто, кроме меня и Никиты Цыканова, не знает об этом проекте.
287.92 290.88 "Анатолий Кулаков" Но сейчас я вижу, что я очень сильно ошибался.
290.88 297.96 "Анатолий Кулаков" Там растет комьюнити, растет какие-то инфоповоды вокруг нее и растут очень много разговоров про Аволонию.
297.96 301.76 "Анатолий Кулаков" Она уже чаще начала мелькать и в англоязычном интернете.
301.76 303.48 "Анатолий Кулаков" В общем, что-то происходит.
303.48 306.88 "Анатолий Кулаков" Как я уже сказал, RedSharper поддержал полноценную интеграцию.
306.88 313.36 "Анатолий Кулаков" Поддерживаются code inspection, code completion, навигации, факторинги.
313.36 318.68 "Анатолий Кулаков" Поддерживаются специфика Аволонии, такие как code behind файлы, oxaml файлы ее специальные.
318.68 322.16 "Анатолий Кулаков" Ну, то есть все, как мы привыкли видеть и как мы хотели.
322.16 328.72 "Анатолий Кулаков" Игорь, а тебя не удивляет такое появление Аволонии в последнее время, такое ее распространение?
328.72 329.72 "Игорь Лабутин" Немножко удивляет.
329.72 334.40 "Игорь Лабутин" Я бы сказал, что меня удивляет, что от Microsoft почти ничего не слышно про MyUI.
334.40 341.68 "Игорь Лабутин" У них был тут недавно выпуск, то, что они называют комьюнити стендапом с каким-то обсуждением небольшим планов по MyUI.
341.68 345.04 "Игорь Лабутин" Но я так понимаю, что там все достаточно не спеша двигается.
345.04 348.52 "Игорь Лабутин" Они активно над этим работают, но пока в паблике видно не очень много.
348.52 353.72 "Игорь Лабутин" Поэтому со стороны Microsoft, соответственно, кроссплатформенного UI как-то пока ждем.
353.72 359.80 "Игорь Лабутин" И Аволония, да, Аволония стала действительно гораздо больше видна в этом году.
359.80 363.40 "Игорь Лабутин" У меня даже была идея на нее посмотреть, что-нибудь на ней попробовать написать.
363.40 364.40 "Игорь Лабутин" Ни разу не пробовал.
364.40 366.52 "Анатолий Кулаков" Да, да, и я тебя понимаю.
366.52 375.72 "Анатолий Кулаков" Ну и у нас сейчас есть возможность немножко разобраться в этом тайном процессе, потому что у нас в студии разработчик из команды ReSharper'а Денис Мухаметьянов.
375.72 378.84 "Анатолий Кулаков" Именно он делал поддержку Аволонии в ReSharper'е.
378.84 383.16 "Анатолий Кулаков" Денис, расскажи прежде всего, почему команда ReSharper'а решила поддержать Аволонию?
383.16 384.16 "Анатолий Кулаков" С чего вдруг?
384.16 385.16 "Анатолий Кулаков" Почему сейчас?
385.16 386.16 "Денис Мухаметьянов" Привет.
386.16 388.44 "Денис Мухаметьянов" Конкретно со мной получилась примерно такая история.
388.44 394.88 "Денис Мухаметьянов" Я своей первой задачей в ReSharper'е занимался поддержкой X-Bind для VVP.
394.88 398.96 "Денис Мухаметьянов" Это вот как раз был релиз 202-й.
398.96 407.20 "Денис Мухаметьянов" И мне просто подсунули, мол, посмотри, вот еще есть значит, аволонские биндинги, мы их почему-то не распознаем.
407.20 412.84 "Денис Мухаметьянов" Я посмотрел, думаю, и правда не распознаем, но я вроде как в этом месте сейчас как раз нахожусь, почему бы и не пофиксить.
412.84 422.84 "Денис Мухаметьянов" Ну и в общем-то пока фиксил, я просто понял, что одна поддержка синтаксиса биндинга, всего этого сахара, она особо сильное положение не спасает.
422.84 427.64 "Денис Мухаметьянов" И в общем-то решил просто избавиться от всего красного кода, который видел.
427.64 431.24 "Денис Мухаметьянов" Это первая причина.
431.24 444.04 "Денис Мухаметьянов" Вторая причина, ну, собственно, почему вообще все это дело стоило вязаться, это то, что тикет на поддержку Аволонии в райдере, он прям очень сильно завоучен у нас в U-треке.
444.04 448.60 "Денис Мухаметьянов" Сейчас там больше 600 голосов за этот тикет.
448.60 454.76 "Денис Мухаметьянов" И, кажется, каждую неделю кто-нибудь приходит и голосует за все это.
454.76 458.72 "Анатолий Кулаков" То есть ты имеешь в виду, что Аволонии все-таки кто-то пользуется из живых людей?
458.72 463.48 "Денис Мухаметьянов" Да, Аволонии пользуются, и более того, эту поддержку люди действительно хотят.
463.48 471.76 "Анатолий Кулаков" Отлично, а можешь рассказать какие-нибудь особые сложности были с интеграцией, или что-то особо много времени заняло, то есть какие-нибудь пакости вам эта Аволония подсунула?
471.76 474.40 "Денис Мухаметьянов" Пакости, которые подсунула Аволония?
474.40 483.24 "Денис Мухаметьянов" У Аволонии довольно много всего сделано просто по-другому, или в DPF, или в EVP.
483.24 506.00 "Денис Мухаметьянов" Во-первых, там есть всякий, на мой взгляд, прикольный синтексический сахар, как для компактного описания grid definitions, то есть там colon definition, colon definition, их можно просто строчкой описывать вместо очень такого многословного, кучетегного, WPF-ного описания.
506.00 517.60 "Денис Мухаметьянов" Там довольно приятный синтексис для биндингов, но что мне периодически стреляло в ногу, это отсутствие документации на некоторые конкретные куски.
517.60 528.08 "Денис Мухаметьянов" То есть, например, в 10-й Аволонии появляются compiled bindings, и в документации по этому поводу написано практически ничего.
528.08 534.00 "Денис Мухаметьянов" По крайней мере, вот на тот момент, когда я занимался собственно поддержкой синтексиса compiled bindings.
534.00 544.88 "Денис Мухаметьянов" Ну, соответственно, всё сводилось к тому, что я садился и прям по-честному игрался, смотрел в pull request, очень внимательно его читал.
544.88 557.92 "Денис Мухаметьянов" Ну, и это, на самом деле, касается не только compiled bindings, а всяких других штук, которых ты просто открываешь в solution, и он на тебя почему-то сыплет ошибкой.
557.92 558.92 "Денис Мухаметьянов" Ты думаешь, почему?
558.92 563.40 "Денис Мухаметьянов" Смотришь на код, а он какой-то очень странный, ты думаешь, что и так тоже можно, что ли?
563.40 567.72 "Денис Мухаметьянов" Ну, ведёшь свой playground, проверяешь, да, действительно так можно, и...
567.72 568.72 "Денис Мухаметьянов" О, вау!
568.72 569.72 "Денис Мухаметьянов" Фига себе.
569.72 571.20 "Денис Мухаметьянов" И после этого садишься и поддерживаешь.
571.20 576.52 "Анатолий Кулаков" После всего увиденного ты бы стал бы этим фреймворком пользоваться или стал бы рекомендовать людям его?
576.52 577.52 "Денис Мухаметьянов" Наверное, да.
577.52 589.28 "Денис Мухаметьянов" Наверное, да, потому что по части кроссплатформенных, гуёвых фреймворков, каких-то более вменяемых альтернатив пока что вроде как не подвезли.
590.00 599.72 "Денис Мухаметьянов" Я ещё смотрел на Uno Platform, возможно, в какой-то момент посмотрю, а со всем остальным вроде как всё достаточно грустно.
599.72 602.88 "Денис Мухаметьянов" Если говорить конкретно про XAML-бейс фреймворки.
602.88 603.88 "Денис Мухаметьянов" Вот.
603.88 615.68 "Денис Мухаметьянов" О, я оговорюсь, у меня никакого прям суперобширного опыта по части разработки доступных приложений нет и не было.
615.68 623.56 "Анатолий Кулаков" Ну, тем более интересно увидеть мнение человека, который как-то не сильно в этом погружён и которому вот чисто для души накидать парочку кнопочек.
623.56 637.20 "Денис Мухаметьянов" Да, мы, к слову, играли в, по-моему, это было летом, контест ACF PC и, может быть, слышали про него.
637.20 660.44 "Денис Мухаметьянов" Там нам в какой-то момент понадобился визуализатор для задачи и мы его с ещё одним коллегой, именем N1ce, мы накидали этот гуи на Avalon'е, потому что у нас команда была довольно разносортная по части стека и, соответственно, по части софта, на котором люди играли.
660.44 669.72 "Денис Мухаметьянов" То есть были люди и с Mac'ом, и с Nix'ами, и я просто с Windows, и у всех всё это дело работало одинаково, и это, правда, возьми, очень круто.
669.72 670.72 "Анатолий Кулаков" Да, отлично, согласен.
670.72 680.96 "Анатолий Кулаков" Слушай, ну расскажи тогда напоследок, какие планы про Avalon'ю, то есть собираетесь ли вы её регулярно поддерживать, нововведения все, или просто сделали один раз и забили,
680.96 702.20 "Денис Мухаметьянов" пусть работает? Мы определённо вернёмся к поддержке в тот момент, когда выйдет мажорный релиз Avalon'и, будет какая-то гарантия того, что послезавтра какой-то кусок API не отвалится или переформатируется, и не рефинкнется.
702.20 715.76 "Денис Мухаметьянов" И ещё, наверное, в ближайшее время постараемся доделать всякие маленькие штуковины, например, подхватывание данных из скомпильных Avalon'ских ресурсов.
715.76 724.68 "Денис Мухаметьянов" Сейчас мы всё это дело не умеем, но мы, я думаю, что с Никитой Цукановым договоримся до того, как это можно сделать, и сделаем.
724.68 725.68 "Анатолий Кулаков" Спасибо большое.
725.68 729.40 "Анатолий Кулаков" Я напоминаю, что с нами был Денис Мухаметьянов из компании JetBrains.
729.40 735.24 "Анатолий Кулаков" Ну что же, с Avalon'е немножко разобрались, пойдём посмотрим, что у нас ещё здесь осталось по новому релизу.
735.24 737.64 "Анатолий Кулаков" Улучшен AutoDetect Code Format Rules.
737.64 743.36 "Игорь Лабутин" Но подожди, мне казалось, что AutoDetect Code Format Rules был, и он был уже довольно неплох.
743.36 751.08 "Анатолий Кулаков" Да, ты прав, здесь снова улучшение, снова расширение, то есть поддерживается больше флажочков, больше ситуаций, больше настроек.
751.08 754.92 "Анатолий Кулаков" А я напомню для тех, кто не в курсе, что это такое.
754.92 757.00 "Анатолий Кулаков" Это очень интересная штука ReSharper'а.
757.00 768.84 "Анатолий Кулаков" Вы можете выделить какой-то кусочек кода, нажать на нём "Проанализировать формат", и ReSharper сам выведет те форматы, те флажки, которые у вас здесь применяются.
768.84 776.64 "Анатолий Кулаков" То есть он сам выяснит, как вы предпочитаете расставлять пробелы, как вы предпочитаете расставлять скобочки, и сделает вам полный файл настроек.
776.64 777.64 "Анатолий Кулаков" Почему это прекрасно?
777.64 788.24 "Анатолий Кулаков" Потому что в ранние годы, когда я ставил ReSharper на разных компьютерах, мне приходилось тратить по несколько часов для того, чтобы выставить все мои любимые настройки, чтобы в новом коде это всё было так, как я привык.
788.24 795.32 "Анатолий Кулаков" Копировать настройки ReSharper'а в те времена было совсем тяжко и намного легче было пройтись, ещё раз проставить все галочки.
795.32 796.96 "Анатолий Кулаков" Сейчас же это можно сделать намного проще.
796.96 812.68 "Анатолий Кулаков" Просто-напросто берёте существующий кусок кода, который по вашему мнению правильно и идеально выглядит, нажимаете "Создать правило", и ReSharper уже на основании этого куска делает так, чтобы все ваши настройки соответствовали тем ожиданиям, которые вы от него хотите.
812.68 813.68 "Анатолий Кулаков" Прекрасная вещь.
813.68 818.08 "Анатолий Кулаков" Ещё одно её хорошее применение, это например в Legacy коде.
818.08 827.12 "Анатолий Кулаков" Допустим, у вас есть Legacy проект, в котором стиль форматирования полностью отличается от того, к чему вы пришли сейчас, к тому, чему вы привыкли уже сейчас каждый день делать.
827.12 840.56 "Анатолий Кулаков" Вы просто можете прийти в ваш Legacy проект, сказать ReSharper'у "Забудь о моих текущих преференсах, о моих текущих настройках, давай-ка мне сделай так, чтобы мой код, который я сейчас буду писать, выглядел точно так же, как в этом Legacy проекте".
840.56 841.92 "Анатолий Кулаков" И он всё вам сделает.
841.92 852.12 "Игорь Лабутин" А чтобы каждый разработчик не тратил несколько часов на настройку этого дела в команде, всё это можно сохранить в итоге в Editor Config, закинуть в репозиторий, и всё это будет автоматом подхвачено всей команды?
852.12 855.96 "Анатолий Кулаков" Да, с файлом Edit Config это всё становится просто чудом.
855.96 858.44 "Анатолий Кулаков" Ещё обновились Command Line Tools.
858.44 860.12 "Анатолий Кулаков" Например, Cleanup Code.
860.12 868.92 "Анатолий Кулаков" Cleanup Code - это специальная консольная утилитка, которая позволяет вам, например, отформатировать ваши файлы кода по определённым конвенциям.
868.92 874.52 "Анатолий Кулаков" Раньше для того, чтобы сделать форматирование, вам нужно было загрузить в неё весь Solution.
874.52 877.12 "Анатолий Кулаков" Solution долго анализировался, долго загружался.
877.12 878.12 "Анатолий Кулаков" В общем, это абсолютно бессмысленно.
878.12 889.90 "Анатолий Кулаков" Если вы делаете, например, какой-нибудь небольшой коммитик, в нём всего парочку файлов, то теперь этой команде можно указать всего лишь на всё эти файлы, и она отформатирует только эти файлы без загрузки всего большого Solution.
889.90 895.28 "Анатолий Кулаков" Это очень удобно, если вы, например, используете этот инструмент в вашем CI.
895.28 903.24 "Анатолий Кулаков" То есть она приведёт вам все файлы, которые коммитятся в ваш Solution к одному виду, что очень удобно для всей команды.
903.24 912.96 "Анатолий Кулаков" Ещё код ClioNAP и InSpecCode вернули себе возможность загружать плагины из репозитория для того, чтобы применить их к своей работе, к своим анализам.
912.96 920.56 "Анатолий Кулаков" Для этого достаточно указать идентификатор плагина, и всё загрузится непосредственно на ваш CI-сервер и будет участвовать в анализе.
920.56 923.00 "Анатолий Кулаков" Пока эта функция доступна только для Windows.
923.00 929.36 "Игорь Лабутин" Ну и надо сказать, что помимо основных решателей RIDER обновились множество других тулов от JetBrains.
929.36 939.36 "Игорь Лабутин" То есть обновился .pk декомпайлер, который теперь знает про C# 9 и всякие новые фишки C# и как их транслировать из ELCODE.
939.36 943.44 "Игорь Лабутин" Обновились .trace, вероятно .memory, скорее всего.
943.44 949.60 "Игорь Лабутин" Так что берите, смотрите все новые тулы, особенно если вы пользуетесь .NET 5.
949.60 952.60 "Игорь Лабутин" А даже если и не пользуетесь, всё равно там много чего полезного.
952.60 956.20 "Анатолий Кулаков" Наткнулся на ещё один интересный проект, называется InferSharp.
956.20 961.40 "Анатолий Кулаков" Microsoft выложила в публичный доступ первую версию своего нового репозитория.
961.40 963.40 "Анатолий Кулаков" Это статический анализ.
963.40 968.04 "Анатолий Кулаков" Статический анализ, который основан на проекте Facebook Infer.
968.04 973.88 "Анатолий Кулаков" Благодаря статическому анализу вы можете проверить свою программу на корректность и при этом не исполняя её код.
973.88 976.32 "Анатолий Кулаков" То есть просто обследовать сходные коды.
976.32 981.16 "Анатолий Кулаков" Ну мы все давно привыкли, что этим у нас успешно занимаются Rosslyn и ReSharper.
981.16 987.92 "Анатолий Кулаков" Сам Facebook Infer это довольно-таки большой, зрелый проект с кучей всяких научных статей, выкладок, вкладок и закладок.
987.92 993.48 "Анатолий Кулаков" Он поддерживает такие языки уже как Java, C, C++, Objective-C.
993.48 995.16 "Анатолий Кулаков" Это официальные поддерживаемые языки.
995.16 1004.64 "Анатолий Кулаков" И Microsoft выложил проект, который по сути делает бандинги, делает поддержку .NET всех языков, которые входят в этот фреймворк.
1004.64 1013.36 "Анатолий Кулаков" Чтобы понять, чем новый инструмент отличается от уже существующих, давайте немножко более подробно разберёмся, что же он делает и как он это делает.
1013.36 1017.08 "Анатолий Кулаков" Прежде всего, Infer это кросс-процедурный анализ кода.
1017.08 1031.76 "Анатолий Кулаков" То есть он может не просто посмотреть, что у вас творится в этом методе, он может проанализировать все публичные методы класса, может быть заглянуть в другие классы, может быть посмотреть, кто каким образом потоки взаимодействует с вашим классом.
1031.76 1039.44 "Анатолий Кулаков" Ну то есть может строить вот такие вот очень сложные взаимодействия между различными потоками, классами, структурой данных.
1039.44 1044.56 "Анатолий Кулаков" Может строить эту карту и выводить какие-то полезные вам подсказки, какие-то полезные ворнинги.
1044.56 1050.08 "Анатолий Кулаков" Прежде всего у нас есть в первой версии, в первом превью есть два анализа.
1050.08 1067.68 "Анатолий Кулаков" Во-первых, это null resolving, то есть если какой-то метод вдруг вам возвращают null, при этом вы это значение берёте и используете непосредственно без всяких проверок или передаёте в другой метод, который не ожидают увидеть null, то Infer способен задетектировать эту ситуацию и сообщить вам о ней.
1067.68 1071.44 "Анатолий Кулаков" Второй детект, который у него есть, это resource leak.
1071.44 1089.12 "Анатолий Кулаков" Допустим, если вы создали какой-нибудь стрим в одном методе, отдали его наружу и принявший код успешно забыл вам задиспоузить ваш стрим, вот Infer тоже способен это обнаружить, он способен отслеживать ресурсы, он способен отслеживать их выделение, диспоуз и предупредить естественно вас об этом.
1089.12 1095.88 "Анатолий Кулаков" В следующих версиях разработчики прежде всего обещают сконцентрироваться на такой фиче как Threat Safety Violations.
1095.88 1107.80 "Анатолий Кулаков" Допустим, если у вас есть какая-то переменная, доступ которой должен быть синхронизирован с помощью лока и вы в трёх методах обернули эту переменную в лок, а в четвёртом публичном методе забыли это сделать, то Infer вас об этом предупредит.
1107.80 1114.72 "Анатолий Кулаков" То есть вам нужно во всех методах, через которые можно доступиться к этой переменной, везде её обернуть в лок.
1114.72 1119.72 "Анатолий Кулаков" Вот такие базовые анализы, вот такой базовый принцип у Infer сейчас на данный момент есть.
1119.72 1139.44 "Анатолий Кулаков" Слушая всё это, бывалый разработчик конечно же найдёт прямые аналогии с ReSharper, с Rostlin анализаторами, с какими-то студийными другими анализами, потому что предсказывание всех этих нулей, предсказывание ресурс-ликов, предсказывание локов - это всё уже давно у нас есть и это мы уже всё давно успешно используем.
1139.44 1150.44 "Анатолий Кулаков" Основной акцент в статье заключается в том, что в отличие от ReSharper или обычных статических анализаторов, Infer способен делать более глубокие анализы, более умные выводы.
1150.44 1167.32 "Анатолий Кулаков" Например, если взять обработку на NULL, проверку переменных на NULL, то выяснится, что ReSharper для того, чтобы сделать какие-то выводы из того, что метод может возвращать на NULL или не может возвращать на NULL, ему необходимо расставить атрибуты.
1167.32 1176.28 "Анатолий Кулаков" То есть специальные атрибуты NotNull или CanBeNull - вот эти атрибуты можно расставить непосредственно в коде или же их можно расставить с помощью XML файла.
1176.28 1184.36 "Анатолий Кулаков" Infer способен делать те же самые выводы, способен делать те же самые анализы без всяких атрибутов, без всякого вмешательства человечества.
1184.36 1190.80 "Анатолий Кулаков" То есть он сможет глубоко проанализировать этот граф и сделать соответствующие выводы.
1190.80 1203.88 "Анатолий Кулаков" Здесь справедливости ради нужно уточнить, что у ReSharper есть специальная функция, которая позволяет вам проанализировать точно так же очень глубоко этот код и автоматически проставить вот эти атрибуты, которые должны там стоять.
1203.88 1212.92 "Анатолий Кулаков" Эта функция включается в режиме разработчика, вы можете ее натравить на какую-то там стороннюю библиотеку даже, уже скомпилированную, или может быть ваш исходный код.
1212.92 1218.08 "Анатолий Кулаков" Но все-таки основной режим его работы - это уже анализ существующих атрибутов.
1218.08 1219.88 "Анатолий Кулаков" Вот у Infer это не так.
1219.88 1236.68 "Анатолий Кулаков" Я думаю, если Infer будет развиваться и будут выходить какие-то новые версии, то для более детального разбора мы пригласим специалистов уже из компании JetBrains, потому что здесь, естественно, я не могу знать всех тонкостей о том, как устроена внутренняя кухня этих анализаторов и насколько их вообще корректно сравнивать.
1236.68 1240.68 "Анатолий Кулаков" Но давайте немножко углубимся все-таки в то, как работает Infer.
1240.68 1242.80 "Анатолий Кулаков" Прежде всего Infer работает с CIL.
1242.80 1248.12 "Анатолий Кулаков" Именно это позволяет ему поддерживать все возможные языки, которые компилируются в .NET.
1248.12 1250.56 "Анатолий Кулаков" Это и Visual Basic, и F#.
1250.56 1256.88 "Анатолий Кулаков" Дальше CIL перевращается в специальный Smallfoot Intermediate Language, который передается Infer-анализу.
1256.88 1262.32 "Анатолий Кулаков" Далее Infer-анализ анализирует эти структуры данных и выдает вам какой-то баг-репорт.
1262.32 1283.76 "Анатолий Кулаков" В отличие от обычных статических анализов, в которых задача как можно быстрее выдать вам результат в реальном времени, прямо в момент напечатывания, Infer устроен так, что он нацелен на то, чтобы проанализировать большие production кодовые базы, и он точно так же умеет инкрементально улучшать свой анализ, когда приходят какие-то чинджи.
1283.76 1289.24 "Анатолий Кулаков" И Infer еще знает о манипуляциях с компьютерной памятью, что бы это ни значило.
1289.24 1293.56 "Анатолий Кулаков" То есть он умеет учитывать потоки, он умеет учитывать конкуренцию, локи.
1293.56 1296.24 "Анатолий Кулаков" Это все заложено уже в его базе.
1296.24 1302.20 "Анатолий Кулаков" Таким образом, Infer способен подтверждать memory safety каких-то алгоритмов или каких-то структур.
1302.20 1314.12 "Анатолий Кулаков" Сам инструмент написан на Acamli, и здесь интересный момент заключается в том, что он требует для всех языков, которые он должен анализировать, описать специальные структуры в Acamli.
1314.12 1322.84 "Анатолий Кулаков" То есть выразить структуру языка и workflow языка, то, как с ним взаимодействуют потоки с этими структурами, выразить в специальной нотации Acamli.
1322.84 1331.08 "Анатолий Кулаков" И другие официальные языки, такие как Java, C, C++, Objective-C, они пошли именно этим путем.
1331.08 1335.24 "Анатолий Кулаков" Они для каждого этого языка написали некую Acaml-базу.
1335.24 1338.56 "Анатолий Кулаков" Компания Microsoft, наверное, собрались более ленивые люди.
1338.56 1347.72 "Анатолий Кулаков" Они решили, что под каждый язык писать свою Acaml-модель, потом непонятно, кто эту модель будет поддерживать, ибо специалистов на Acamli не так уж и много, и кто с этим совсем будет разбираться.
1347.72 1349.84 "Анатолий Кулаков" В общем, они пошли другим путем.
1349.84 1355.88 "Анатолий Кулаков" Они для CILA, дот.нетовского, сгенерировали специальный Small Food Intermediate Language.
1355.88 1359.08 "Анатолий Кулаков" Это специальный JSON, который описывает все то же самое.
1359.08 1360.92 "Анатолий Кулаков" Описывает структуры, описывает потоки.
1360.92 1372.20 "Анатолий Кулаков" И потом из этого JSON уже непосредственно один раз специальный интерпретатор переводит его в Acaml-овские структуры, те структуры, которые ожидает увидеть непосредственно сам Infer.
1372.20 1384.16 "Анатолий Кулаков" Таким образом они перегоняют весь CILA сначала в Small Food IL, потом отдают его Infer, тот, вычитав Acaml-структуры, уже анализирует их и выдаёт уже баги.
1384.16 1392.28 "Анатолий Кулаков" Если вы сейчас посмотрите в репозитории GitHub на InferSharp, то увидите, что репозиторий состоит на 67% из Acaml-кода.
1392.28 1396.92 "Анатолий Кулаков" Не пугайтесь, это всего лишь на все референс на настоящие дроны, на настоящий Infer.
1396.92 1401.48 "Игорь Лабутин" Еще, я так понимаю, важным различием является то, что Sharper работает на уровне исходного кода.
1401.48 1406.88 "Игорь Лабутин" И он может, он знает, конечно, про аналабилити и зависимых библиотек, если они размечены.
1406.88 1409.32 "Игорь Лабутин" Но в целом он смотрит на ваш исходный код.
1409.32 1411.68 "Игорь Лабутин" А Infer, он смотрит на собранный код.
1411.68 1416.16 "Игорь Лабутин" То есть он смотрит на DLL и берет ровно то, что будет у вас запускаться.
1416.16 1420.56 "Анатолий Кулаков" Я вот не уверен в явном преимуществе того или иного подхода.
1420.56 1428.80 "Анатолий Кулаков" Потому что хоть из исходного кода, хоть из компилированной DLL, по сути, вот если мы берем аналабилити, ты можешь извлечь одну и ту же информацию.
1428.80 1434.60 "Анатолий Кулаков" Поэтому, наверное, явных преимуществ здесь ни у какого подхода пока я не вижу.
1434.60 1435.60 "Анатолий Кулаков" Пока, наверное, нет.
1435.60 1441.04 "Игорь Лабутин" Да, но, возможно, это как-то повлияет на то, как вы будете использовать.
1441.04 1448.00 "Игорь Лабутин" То есть, я так понимаю, что предполагается, что вы туда отдаете вообще полное ваше приложение со всеми всеми всеми зависимостями.
1448.00 1449.12 "Игорь Лабутин" А интересный такой вопрос.
1449.12 1453.64 "Игорь Лабутин" Он же наверняка уже поддерживает не только C#, но и другие языки.
1453.64 1460.32 "Игорь Лабутин" Он может понимать какой-нибудь там Interop или еще что-нибудь, когда мы там из C# дернули C++ и там все упало в памяти?
1460.32 1462.80 "Анатолий Кулаков" Сам Infer - это Language Agnostic система.
1462.80 1471.06 "Анатолий Кулаков" То есть она оперирует только с тем форматом, с теми блоками, с тем Small Foot Intermediate Language, который ему передала внешняя система.
1471.06 1485.40 "Анатолий Кулаков" То есть если все ваши языки, с которыми вас происходит Interop, можно перевести в этот Small Foot ILL, соответственно, вы можете отдать Infer те полученные структуры, которые у вас есть, и он без проблем сделает между ними какой-то анализ.
1485.40 1493.00 "Анатолий Кулаков" И главное в этом ILL это описать структуры, описать их гарантии, описать то, каким образом с ними взаимодействуют потоки.
1493.00 1494.80 "Анатолий Кулаков" Но это делается один раз для языка.
1494.80 1500.96 "Анатолий Кулаков" И все, и после этого для Infer никакой разницы, разные это языки или это одни языки, нет.
1500.96 1507.08 "Анатолий Кулаков" Потому что для него это будут всегда одни и те же структуры, с которыми он работает и которые он анализирует.
1507.08 1509.52 "Игорь Лабутин" Понятно, потому что это был бы интересный кейс как раз-таки.
1509.52 1515.12 "Игорь Лабутин" Такого рода тулы очень были популярны в то время, когда я давно-давно программировал на C++.
1515.12 1526.12 "Игорь Лабутин" И там, понятное дело, любой null или любая утечка памяти приводила к тому, что программа не то что подлостная на reference exception, а могла спокойно продолжать работать дальше, при этом очень забавно работать.
1526.12 1536.12 "Игорь Лабутин" И там такие статические анализаторы были, или иногда они были динамическими во время работы, были крайне полезны, чтобы находить такие проблемы с памятью, ресурсами и так далее.
1536.12 1542.20 "Игорь Лабутин" Было бы здорово как-то совместить два этих мира, .NET и Native для тех, кто еще пользуется такой связкой.
1542.20 1549.28 "Анатолий Кулаков" Да, да, я думаю, благодаря вот этой концепции, где он абстрагируется от какого-то конкретного языка, все это будет вполне возможно.
1549.28 1554.32 "Анатолий Кулаков" Как я уже упомянул ранее, Facebook Infer - это довольно-таки большой популярный проект.
1554.32 1563.40 "Анатолий Кулаков" Из знаменитых компаний его используют непосредственно Facebook, Amazon, Mozilla, Spotify, Uber, WhatsApp и много-много других компаний.
1563.40 1571.80 "Анатолий Кулаков" Чтобы попробовать Infer, достаточно установить Docker образ, передать ему ваш проект и он вам на выходе выдаст уже непосредственно анализ.
1571.80 1579.48 "Анатолий Кулаков" Интересно заметить, что несмотря на ранний релиз этого продукта, этого репозитория, уже был сделан GitHub Action.
1579.48 1589.28 "Анатолий Кулаков" То есть, если вы пользуетесь GitHub Action, вы вполне можете прицепить этот Action к вашему репозиторию и он уже будет анализировать ваш рабочий код на GitHub.
1589.28 1593.44 "Анатолий Кулаков" Сам Infer Sharp выложен на GitHub под лицензией MIT.
1593.44 1602.44 "Игорь Лабутин" Да, и не только Infer Sharp выложен под MIT лицензией, сам Infer тоже выложен под MIT, поэтому не только шарповую версию можно забирать, а и вообще все целиком.
1602.44 1603.44 "Игорь Лабутин" Изучайте Caml.
1603.44 1606.04 "Игорь Лабутин" Я сейчас посмотрел на исходнички, пока мы разговариваем.
1606.04 1609.48 "Игорь Лабутин" Так прикольно вспомнил студенчество, когда я на нем писал.
1609.48 1610.48 "Игорь Лабутин" Прямо отмечательно.
1610.48 1611.48 "Игорь Лабутин" Поехали дальше.
1611.48 1615.88 "Игорь Лабутин" Уютный мир дотнета из этих страшных чисто функциональных языков.
1615.88 1619.12 "Игорь Лабутин" И мы пойдем теперь в компанию Amazon.
1619.12 1631.00 "Игорь Лабутин" Мы в этом подкасте очень редко говорим о Амазоне, просто потому что дотнет как-то с ним не то что не популярен, но Amazon не так много всего делает и каких-то дают информационных поводов поговорить о нем.
1631.00 1640.60 "Игорь Лабутин" Да, вы можете писать на дотнете лямбды, но вы можете просто запихнуть ваше дотнеткор приложение на любое Linux там или в Kubernetes и оно будет прекрасно работать.
1640.60 1652.60 "Игорь Лабутин" Но Amazon в этом году выпустил тул под названием Porting Assistant for .NET и этот тул предназначен для того, чтобы понять насколько ваше приложение готово к работе под Linux на дотнеткоре.
1652.60 1657.80 "Игорь Лабутин" Для того, чтобы быть переведенным точнее под .NET Core, чтобы работать под Linux конкретно в Амазоне.
1657.80 1669.08 "Игорь Лабутин" В принципе у Microsoft есть дотнетпортабилити аналайзер, есть очень давно и он может вам подсказать какие длельки в вашем приложении, использовать те или иные API, которые больше не доступны в новых платформах.
1669.08 1687.76 "Игорь Лабутин" У Амазона подход немножко другой, он требует солюшена и исходничков, он требует ваших CSS-проч файлов и он посмотрит на зависимости с точки зрения, какие Nuget пакеты вы используете и фишка этого аналайзера в том, что он предложит на что ваши пакеты заменить, если эти пакеты не доступны под .NET Core.
1687.76 1698.12 "Игорь Лабутин" То есть вы используете какой-нибудь Windows-only пакет, а вы хотите делать при этом что-то кроссплатформенное, он мало того что скажет, что этот пакет больше нельзя использовать, он предложит какую-то замену, если она у него есть в его базе.
1698.12 1711.84 "Игорь Лабутин" Они утверждают, что у них там прям собрана огромная база порядка 200 тысяч пакетов, так что, наверное, для почти всех более или менее популярных пакетов у него будут подсказки на тему того, на что заменить.
1711.84 1713.72 "Игорь Лабутин" Да, полезный инструментик.
1713.72 1725.88 "Игорь Лабутин" Единственный минус инструмента в том, что, ну для меня минус, я не пользуюсь Амазоном, у меня нет амазоновского аккаунта, но для того, чтобы посмотреть, что и как он работает, ему требует амазоновский аккаунт.
1725.88 1742.48 "Игорь Лабутин" Скорее всего, он просто смотрит на ваш амазоновский аккаунт, ему нужен API-ключик, чтобы понять, какие инстансы у вас есть, что у вас развернуто, и пытается подобрать варианты анализов, те, которые будут нужны для того, чтобы точно подогнать приложение под то, куда вы его собираетесь затолкать.
1742.48 1746.96 "Анатолий Кулаков" Ну, тут, мне кажется, они перемудрили, могли бы остаться и без амазоновского аккаунта.
1746.96 1762.04 "Игорь Лабутин" Ну, вот да, возможно, я все-таки это как-нибудь попробую, амазон аккаунт сделать несложно, и посмотрим, что дают, потому что анализ на уровне длелек и опишек это, конечно, удобно, но анализ на уровне нукет-пакетов, когда все скажут, что поменять, это, в принципе, и звучит более-менее интересно.
1762.04 1766.48 "Анатолий Кулаков" Да, отлично, давай подальше от этих облачков, от амазонов, а то, не дай бог, затянет.
1766.48 1772.48 "Анатолий Кулаков" У меня здесь интересная статейка про рослин, вот можно с ней продолжить.
1772.48 1780.44 "Анатолий Кулаков" Я бы хотел рассказать о Dynamic Class Generation в C#, и при этом сохраняя строгость типов с помощью рослина.
1780.44 1784.04 "Анатолий Кулаков" Что же такие мудреные названия все обозначают?
1784.04 1785.88 "Анатолий Кулаков" Давай разберемся получше.
1785.88 1801.20 "Анатолий Кулаков" Вообще, существует такой класс языков, явно ты знаешь, который называется динамические языки программирования, а это такие вещи, как Python, Ruby, JavaScript, и их любят за некоторые фишки, в которых они сильны.
1801.20 1818.60 "Анатолий Кулаков" Например, в этих языках ты можешь в рантайме менять саму структуру программы, можешь объявлять классы в рантайме, можешь добавлять каким-то классам пали, добавлять какие-то методы, и это все создает некую гибкость, которую очень часто, по крайней мере в том мире, где эти языки распространены, очень часто считают за плюсы и очень часто применяют.
1818.60 1828.52 "Анатолий Кулаков" Но в этих языках есть огромный минус, ну то есть не в языках, а в этом подходе, в этом подходе с динамическим созданием объектов есть большой-большой минус.
1828.52 1829.76 "Анатолий Кулаков" Это проверка типов.
1829.76 1846.72 "Анатолий Кулаков" Проверка типов происходит в рантайме, то есть вы, конечно же, можете без проблем присвоить туда переменной типа float какую-нибудь строку, плюсованную с int, и если вы JavaScript, безусловно, у вас это все сработает, но в нормальном языке у вас выбросится какое-нибудь исключение, и узнайте вы это только в рантайме.
1846.72 1853.36 "Анатолий Кулаков" А вполне могли бы узнать и в компайл тайме, как, например, делаем мы в наших строго типизированных языках.
1853.36 1855.64 "Анатолий Кулаков" Нас компилятор поправляет и обо всем об этом ругает.
1855.64 1856.64 "Анатолий Кулаков" Вот.
1856.64 1864.28 "Анатолий Кулаков" И автор задался вопросом, а каким образом бы совместить гибкость динамических языков и все-таки строгость компилятора, строгость типов у компилятора.
1864.28 1868.76 "Анатолий Кулаков" Вообще в C# тоже есть способ, каким образом мы создаем объекты на лету.
1868.76 1872.48 "Анатолий Кулаков" Первое, что приходит в голову, это, конечно же, emit.
1872.48 1882.84 "Анатолий Кулаков" Мы все умеем имитить ill-код и создавать какие-то новые объекты, новые прокси, новые какие-то transparent-прокси, но у этого подхода большое количество минусов.
1882.84 1888.68 "Анатолий Кулаков" То есть это довольно-таки сложный процесс, очень сложно не ошибиться, нужно хорошо владеть низкоуровневым кодом.
1888.68 1899.00 "Анатолий Кулаков" Безусловно, существует уже много библиотек, которые помогают вам более строго типизированно имитить код, и много хелперов есть и так далее, но все-таки это довольно низкоуровневый процесс.
1899.00 1903.36 "Анатолий Кулаков" Еще один популярный способ - это Dynamic Language Runtime, это DLR.
1903.36 1909.60 "Анатолий Кулаков" Типичным представителем DLR, если мы говорим про создание объекта в рантайме, является Expanded Object.
1909.60 1917.84 "Анатолий Кулаков" Expanded Object - это класс, наследованный от SystemDynamics, соответственно вы можете писать с ним все, что угодно, и он имплементирован интерфейс iDictionary.
1917.84 1919.68 "Анатолий Кулаков" То есть, что это значит?
1919.68 1921.96 "Анатолий Кулаков" Допустим, вам нужно в рантайме создать какой-то класс.
1921.96 1926.16 "Анатолий Кулаков" Вы просто-напросто делаете Expanded Object, а у этого класса вы хотите добавить свойства.
1926.16 1927.92 "Анатолий Кулаков" То есть точка name = John.
1927.92 1931.40 "Анатолий Кулаков" У, теперь у этого Expanded Object будет свойство name.
1931.40 1932.40 "Анатолий Кулаков" Хотите добавить метод?
1932.40 1933.40 "Анатолий Кулаков" Без проблем.
1933.40 1940.20 "Анатолий Кулаков" Пишите, например, getAge, делаете лямбду, или какое-нибудь замыкание, или какую-нибудь функцию, и присваиваете этому свойство.
1940.20 1944.92 "Анатолий Кулаков" Expanded Object такой умный, что он все поймет, что если там лямбда, вы значит создаете метод.
1944.92 1949.36 "Анатолий Кулаков" И можете этот метод теперь дергать без проблем, как будто он есть у этого класса.
1949.36 1956.32 "Анатолий Кулаков" Довольно удобная штука, не сказать, что часто ей пользуется, но в каких-то местах, когда она нужна, это очень помогает.
1956.32 1961.44 "Анатолий Кулаков" Но у нее такие же точно проблемы, как и у любого динамического языка.
1961.44 1964.72 "Анатолий Кулаков" Типы чекаются только в runtime, и, соответственно, она может свалиться.
1964.72 1974.28 "Анатолий Кулаков" Ну и в отличие от настоящих скриптовых динамических языков, которые, например, могут исполнить строку, вы просто даете строку с кодом, они их исполняют.
1974.28 1975.88 "Анатолий Кулаков" Наш динамик Object так не умеет.
1975.88 1979.72 "Анатолий Кулаков" То есть ему нужны настоящие лямбды, ему нужны настоящие строки, инты и так далее.
1979.72 1981.76 "Анатолий Кулаков" То есть строки он сам парсить не может.
1981.76 1983.88 "Анатолий Кулаков" Вы должны это разложить на какие-нибудь expressions.
1983.88 1993.76 "Анатолий Кулаков" И у этого подхода еще один не то чтобы минус, но нестандартный кейс для нашего человека, это в том, что это prototype by base по подходу.
1993.76 2010.20 "Анатолий Кулаков" То есть если вы насобирали одного человека с именем и с возрастом, и захотите создать instance еще такого же человека, у которого есть поле, имя и возраст, вам придется его собирать или с нуля, или скопировать из предыдущего, то есть скопировать из прототипа.
2010.20 2018.04 "Анатолий Кулаков" Мы больше привыкли к структурам и инстанцам настоящих типов, настоящих классов.
2018.04 2025.36 "Анатолий Кулаков" То есть у нас есть какой-то класс с описанием имен и возраста, и мы этот класс можем несколько раз создавать и получать одну и ту же структуру.
2025.36 2031.56 "Анатолий Кулаков" И вот частично убрать эти недостатки, частично их обойти помогает рослин.
2031.56 2035.76 "Анатолий Кулаков" С помощью рослин тоже можно создавать динамический код.
2035.76 2044.28 "Анатолий Кулаков" Самый банальный пример, который может вам прийти в голову, это записать в текстовый файлик C# настоящий, вызвать рослин-компилятор и скомпилировать его.
2044.28 2050.68 "Анатолий Кулаков" Вот вы получите динамическую библиотечку, из которой можете зарезолвить классы, зарезолвить типы и пользоваться ей как своей.
2050.68 2055.72 "Анатолий Кулаков" В принципе, у меня сейчас это наиболее рабочий вариант, наиболее рабочий подход.
2055.72 2070.44 "Анатолий Кулаков" Я часто использую кодогенерацию в своих проектах, и позагонявшись со всякими или митерами, expression tree построителями и прочими глупостями, на практике ничего, кроме текста и рослин-компилятора не работает.
2070.44 2078.52 "Анатолий Кулаков" Если, более-менее, ваш проект разрастается в плане генерации в какой-нибудь большой-большой solution, то все остальное просто меркнет и тонет в куче багов.
2078.52 2080.48 "Анатолий Кулаков" Но не будем отвлекаться.
2080.48 2084.40 "Анатолий Кулаков" Каким образом же с помощью рослина это сделать, кроме того, что скомпилировать настоящим компилятором?
2084.40 2092.00 "Анатолий Кулаков" Существует такой интересный пакет, который давно существует, самых, практически, первых версий рослина, но о нем мало кто знает.
2092.00 2095.20 "Анатолий Кулаков" Называется он Microsoft Code Analysis C# Scripting.
2095.20 2107.44 "Анатолий Кулаков" Любой может установить его из Nuget, и с помощью этого пакета вы можете создавать классы, имплементировать интерфейсы, добавлять к классам свойства, добавлять новые методы и так далее.
2107.44 2111.88 "Анатолий Кулаков" Практически так же, как вы делаете это в динамических языках, но только со строгой типизацией.
2111.88 2119.48 "Анатолий Кулаков" То есть все эти структуры, которые вы настроите здесь, после этого компилируются настоящим рослинным компилятором.
2119.48 2124.48 "Анатолий Кулаков" И соответственно, вы все ошибки, все несоответствия типов уже увидите на момент компиляции.
2124.48 2130.04 "Анатолий Кулаков" Вам не нужно будет исполнять, вам не нужно будет фронтами ловить кучу ошибок, отдавать невалидные типы и так далее.
2130.04 2132.80 "Анатолий Кулаков" То есть компилятор за вас все проверит.
2132.80 2137.36 "Анатолий Кулаков" По статейке, которую мы укажем в шоу-ноутах, есть хороший интересный пример, как это сделать.
2137.36 2143.80 "Анатолий Кулаков" Создать тип, добавить туда свойства, добавить методов, и разрезовывать этот тип с помощью строго типизированного интерфейса.
2143.80 2148.52 "Анатолий Кулаков" И общаться уже с интерфейсом, не зная, что он по правде был там где-то скомпилен.
2148.52 2158.44 "Анатолий Кулаков" Можно указывать глобальные перемены, передавать референсы, задавать импорты, смотреть настоящие ошибки компиляции, такие, как они были бы при настоящей компиляции.
2158.44 2160.24 "Анатолий Кулаков" И автор еще померил скорость.
2160.24 2162.84 "Анатолий Кулаков" В частности, двух самых популярных подходов.
2162.84 2167.32 "Анатолий Кулаков" Динамик, потому что он самый легкий, самый обычный, самый привычный, самый высокоуровневый.
2167.32 2173.28 "Анатолий Кулаков" И скриптинг, потому что это его более-менее конкурент, потому что он тоже работает на довольно высоком уровне, на понятном.
2173.28 2175.96 "Анатолий Кулаков" Но плюс еще к динамику он дает строгую типизацию.
2175.96 2179.16 "Анатолий Кулаков" То есть, он дает нормальные типы, к которым мы уже все давно привыкли.
2179.16 2183.36 "Анатолий Кулаков" И оказывается, что строго типизированная версия работает на 15% быстрее.
2183.36 2192.32 "Анатолий Кулаков" То есть, автор начал вызывать по миллиону методов у каждого из объектов, из Expand Object'a или из Rostlin Scripting Object'a.
2192.32 2198.52 "Анатолий Кулаков" И Rostlin на всех тестах показал 15% прирост производительности относительно DLR.
2198.52 2203.44 "Анатолий Кулаков" Нужно сказать, что DLR это не самая медленная конструкция, как бы вам ни казалось.
2203.44 2205.36 "Анатолий Кулаков" Там под капотом довольно хорошие оптимизации лежат.
2205.36 2206.64 "Анатолий Кулаков" А он довольно быстр.
2206.64 2211.80 "Анатолий Кулаков" Но ничего не сравнится с нативными скомпилированными типами.
2211.80 2214.32 "Анатолий Кулаков" Даже Expression Trees им проигрывает.
2214.32 2221.76 "Анатолий Кулаков" Так что теперь мы можем создавать нативные строго типизированные типы прямо с помощью C# скриптинга.
2221.76 2223.56 "Анатолий Кулаков" Вот такой интересный инструмент.
2223.56 2225.12 "Игорь Лабутин" Давайте пойдем дальше.
2225.12 2229.96 "Игорь Лабутин" И у нас сегодня прям выпуск по довольно-таки нестандартным темам.
2229.96 2233.20 "Игорь Лабутин" Мы практически не говорим про Microsoft, мы уже поговорили про Amazon.
2233.20 2235.12 "Игорь Лабутин" А давайте теперь поговорим про Apple.
2235.12 2240.60 "Игорь Лабутин" Вот уж Apple - это компания, которую мы, по-моему, хорошо если хоть раз упоминали в этом подкасте до этого.
2240.60 2247.28 "Анатолий Кулаков" Да, мне кажется, что каждый подкаст рано или поздно скатывается в обсуждение iPhone'чиков, MacBook'ов и Apple'а.
2247.28 2254.48 "Анатолий Кулаков" Но я надеялся, что мы придем где-то к выпуску трехсотому к этой позиции, но никак не в девятнадцатом.
2254.48 2255.48 "Игорь Лабутин" Ну, пришли и пришли.
2255.48 2258.80 "Игорь Лабутин" И пришли на самом деле не просто так, а все-таки ради .NET'а.
2258.80 2259.88 "Анатолий Кулаков" Ради .NET'а на Apple'е.
2259.88 2260.88 "Анатолий Кулаков" Звучит неплохо.
2260.88 2265.36 "Анатолий Кулаков" А новость связана с тем, что Apple выпустила свой новый процессор M1.
2265.36 2270.24 "Анатолий Кулаков" И я думаю, если вы живете не в танке, то из каждого утюга уже услышали эту новость.
2270.24 2275.36 "Анатолий Кулаков" Apple M1 запустился первого ноября 2020 года.
2275.36 2293.80 "Анатолий Кулаков" Он в три с половиной раза быстрее всяких интеловских поделок, в шесть раз быстрее на всяких GPU задачах, в пятнадцать раз быстрее на нем работает Machine Learning, в два раза он дольше живет от батарейки и прочие-прочие какие-то фантастические вещи нам про него рассказывают.
2293.80 2300.12 "Анатолий Кулаков" И люди, которые его тестировали уже, говорят, что это в принципе похоже на правду.
2300.12 2301.12 "Игорь Лабутин" Итак, M1.
2301.12 2304.16 "Игорь Лабутин" Да, но с ним есть некоторая проблема.
2304.16 2307.40 "Игорь Лабутин" M1 это не x86 больше, это ARM.
2307.40 2310.24 "Игорь Лабутин" И это подразумевает, что на нем ничего не будет работать.
2310.24 2312.12 "Анатолий Кулаков" Это принципиально другая архитектура.
2312.12 2320.40 "Анатолий Кулаков" И для того, чтобы на ней запускались привычные бинари, которые уже скомпилированы были для Apple как x86, существует два способа.
2320.40 2322.40 "Анатолий Кулаков" Первый способ это Rosetta.
2322.40 2323.40 "Анатолий Кулаков" Rosetta 2.
2323.40 2331.12 "Анатолий Кулаков" Это так называемый специальный инструмент для транскомпиляции старого кода, то есть кода x86 в инструкции ARM.
2331.12 2341.36 "Анатолий Кулаков" И второй способ это все-таки нативная поддержка ARM, для которой вам необходимо перекомпилировать ваши программы, перекомпилировать ваши фреймворки и так далее.
2341.36 2343.28 "Анатолий Кулаков" Давай поближе рассмотрим каждый из них.
2343.28 2348.60 "Анатолий Кулаков" С точки зрения .NET разработчика вокруг нас уже существует большая экосистема.
2348.60 2356.44 "Анатолий Кулаков" У нас есть редакторы, у нас есть SDK, у нас есть дебаггеры и все это теоретически как бы должно не работать на новой архитектуре.
2356.44 2366.28 "Анатолий Кулаков" Но благодаря Rosetta, благодаря ее эмуляции, все основные инструменты запускаются без каких-либо новых релизов, без каких-либо новых перекомпиляций.
2366.28 2374.28 "Анатолий Кулаков" То есть вы без проблем можете поставить .NET SDK на новом процессоре, запустить ISP.NET, воспользоваться JetBrains Rider со всеми его плагинами.
2374.28 2378.40 "Анатолий Кулаков" Естественно работают консольные тулзы .NET, Xamarin SDK.
2378.40 2379.76 "Анатолий Кулаков" Все это работает.
2379.76 2381.32 "Анатолий Кулаков" Прямо из коробки без проблем.
2381.32 2384.64 "Анатолий Кулаков" Есть небольшие минусы, то есть небольшие баги.
2384.64 2388.60 "Анатолий Кулаков" Например, не работает Android эмулятор, он не может загрузить сейчас имидж.
2388.60 2394.88 "Анатолий Кулаков" Не работают все дебаггеры и это сейчас одна из самых больших проблем .NET мира на Mac'ах.
2394.88 2402.32 "Анатолий Кулаков" И все основные редакторы сейчас не могут подключиться к .NET 5 процессам, выдается специальная ошибка.
2402.32 2420.60 "Анатолий Кулаков" Нужно сказать, что это все очень быстро чинится и может быть даже когда вы слушаете этот подкаст уже все заработает и все взлетит, потому что в твитах там практически каждый час приходят какие-то обновления по этой теме и команда .NET работает над решением всех существующих проблем очень усердно.
2420.60 2423.44 "Анатолий Кулаков" Интересная вещь происходит с Mono.
2423.44 2432.16 "Анатолий Кулаков" Mono был задизайнен так, чтобы C# на iOS, Android и на таких ARM девайсах исполнялся нативно.
2432.16 2435.48 "Анатолий Кулаков" Поэтому в Mono практически никаких проблем нет.
2435.48 2437.68 "Анатолий Кулаков" Mono SDK запускается без проблем.
2437.68 2440.36 "Анатолий Кулаков" Xamarin, который на Mono тоже запускается без проблем.
2440.36 2443.76 "Анатолий Кулаков" В Unity Game тоже не должно быть никаких проблем.
2443.76 2445.76 "Анатолий Кулаков" Но все же это эмуляция.
2445.76 2447.24 "Анатолий Кулаков" Это эмуляция с помощью розетты.
2447.24 2467.36 "Анатолий Кулаков" Интересно узнать, каким же образом и когда появится нативная поддержка .NET, то есть когда наши программы смогут с помощью простой перекомпиляции уже быть совместимы с M1 процессором и взять из него максимальное количество пользы, без всяких промежуточных транскомпиляций, эмуляций и прочего.
2467.36 2472.60 "Игорь Лабутин" Логично предположить, что Microsoft сделает это в ближайшем стабильном релизе .NET 6.
2472.60 2477.04 "Игорь Лабутин" Потому что если этого не будет сделано в .NET 6, то придется это делать вне LTS нам в .NET 7.
2477.04 2478.92 "Игорь Лабутин" И это будет не очень здорово.
2478.92 2483.68 "Анатолий Кулаков" Да, и очень много наработок с этой стороны уже делается.
2483.68 2492.72 "Анатолий Кулаков" А еще интересно отметить про Mono, что Apple сам пришел в официальный депозиторе Mono и добавил поддержку его процессора.
2492.72 2502.92 "Анатолий Кулаков" Поэтому на момент релиза этой новой железки у Mono уже была поддержка нового EEPLA, благодаря разработчикам самой же компании.
2502.92 2503.92 "Анатолий Кулаков" Тоже очень интересно.
2503.92 2509.84 "Анатолий Кулаков" Также у нас нет нативной поддержки у наших всех EDE.
2509.84 2515.44 "Анатолий Кулаков" Visual Studio Code пока не поддерживает нативно, но есть Insider Preview для Mac OS.
2515.44 2518.76 "Анатолий Кулаков" Rider также работает над переносом JetBrains Runtime.
2518.76 2522.88 "Анатолий Кулаков" Но самое все-таки важное - это нативная поддержка в .NET.
2522.88 2527.88 "Анатолий Кулаков" Что же нужно все-таки сделать, чтобы наш .NET нативно запускался на новом сверхмощном M1 процессоре?
2527.88 2532.40 "Анатолий Кулаков" И у нас в студии Егор Богатов, разработчик из компании Microsoft.
2532.40 2536.72 "Анатолий Кулаков" Он работал над такими проектами, как Mono, .NET 5, Core, CLR, CoreFX.
2536.72 2538.92 "Анатолий Кулаков" Кажется легче перечислить, где он не работал.
2538.92 2549.60 "Анатолий Кулаков" И кажется, что никто, кроме Егора, не сможет нам более объемно и более мнятно объяснить текущую ситуацию с M1, с .NET, и что там сейчас творится в Microsoft.
2549.60 2554.48 "Анатолий Кулаков" Егор, расскажи, в чем заключается сейчас работа по переносу .NET под M1.
2554.48 2555.48 "Егор Богатов" Всем привет.
2555.48 2556.48 "Егор Богатов" Да, хороший вопрос.
2556.48 2565.28 "Егор Богатов" Я думаю, что я не лучший человек, который может это рассказать, потому что сейчас активно занимаются как минимум два человека от JIT в команде по поддержке M1.
2565.28 2567.48 "Егор Богатов" Кстати, один из них русскоязычный.
2567.48 2568.76 "Егор Богатов" Я думаю, даже он лучше бы смог рассказать.
2568.76 2571.92 "Егор Богатов" Но в принципе, я тоже в теме, я думаю, смогу тоже порассказать.
2571.92 2578.64 "Егор Богатов" И как я думаю, все знают, что там есть два режима эмуляции, так называемые розетты и нативная поддержка.
2578.64 2581.32 "Егор Богатов" Я так подозреваю, у тебя есть не нативная поддержка,
2581.32 2583.32 "Анатолий Кулаков" правильно? Да, да.
2583.32 2584.32 "Анатолий Кулаков" Про эмуляцию мы, в принципе, все знаем.
2584.32 2586.64 "Анатолий Кулаков" Но мы не знаем, когда будет нативная поддержка.
2586.64 2598.56 "Егор Богатов" Единственное, про эмуляцию хотел бы упомянуть, что сегодня, ну она уже несколько, там, наверное, неделю или две назад вышла macOS 11.2 бета, ну, вторая бетка.
2598.56 2603.04 "Егор Богатов" И она поправила очень много вещей, на которые эмуляция .NET натыкалась.
2603.04 2606.76 "Егор Богатов" И вот сегодня она вроде бы должна зарелизиться, вот этот апдейт.
2606.76 2617.56 "Егор Богатов" Так что рекомендую всем, у кого есть M1, я, кстати, свой купил на прошлой неделе, обновить Big Sur вот на этот 11.2 апдейт, он должен пофиксить большинство проблем, которые были с эмуляцией.
2617.56 2618.56 "Егор Богатов" Хорошие новости.
2618.56 2625.00 "Егор Богатов" Да, а что касается нативной поддержки, на ней тоже, в принципе, все хорошо.
2625.00 2633.00 "Егор Богатов" Единственное, пока нет таких хороших daily build'ов из DK, которые можно скачать.
2633.00 2642.12 "Егор Богатов" Вот, например, все на macOS и на Linux, вы всегда можете, вот в случае macOS скачать .dmg файл из известного там сайта, да, вот просто в Google вводите там.
2642.12 2648.16 "Егор Богатов" Nightly.net builds и находите ссылку, и с нее скачиваете Nightly SDK.
2648.16 2650.20 "Егор Богатов" И они ставятся, все окей, все работает обычно.
2650.20 2665.04 "Егор Богатов" Вот в случае M1 пока не работают, потому что там небольшое issue, как только его поправят, то сможем туда выкладывать более свежие SDK, их можно будет ставить и работать прям, ну, экспериментировать.
2665.04 2668.40 "Егор Богатов" Пока, к сожалению, нет возможности SDK поставить Nightly.
2668.40 2674.56 "Анатолий Кулаков" Ты имеешь в виду, что уже все перенесли, все переделали, осталось только SDK шить это все.
2674.56 2676.12 "Егор Богатов" Ну, в каком-то виде, да.
2676.12 2681.64 "Егор Богатов" Есть все равно какие-то существующие проблемы, такие мелкие, которые не позволяют назвать это все production-ready.
2681.64 2721.40 "Егор Богатов" Например, вот недавно, вот там, в .net поменяли thread pool реализацию с нативной на полностью manager, которая призвана какие-то проблемы решить, но вот почему-то она там оголила проблемы на M1, в какие-то объекты, ну, короче, куча начала немного корруптиться для ГЦ, и вот неприятная проблема, очень из неожиданного места вылезла, вот ее сейчас решают, то есть, конечно, я думаю, быстро, надеюсь, найдет и пофиксят, но в целом как бы не должно быть таких проблем с запуском обычных каких-то приложений, как минимум хотя бы простых.
2721.40 2727.12 "Анатолий Кулаков" Хорошо, а ты можешь примерно сказать, что нужно было для того, чтобы поддержать M1, то есть в чем изменения нужно было сделать?
2727.12 2744.24 "Егор Богатов" Да, ну, первое, это у нас в принципе не было такого рида, то есть у нас есть ряды, это концепция такая типа смеси архитектуры и операционной системы, например, ряд x windows dash x64, это вот наш тип для винды, например, ряд.
2744.24 2903.76 "Егор Богатов" У нас в принципе не было такого ряда для macOS ARM 64, потому что в принципе не было такой, такой платформы, то есть надо было добавить ряд первое, второе, очень важное, это security feature write xor execute, это важная security фича, которая, к сожалению, у нас не была в дотнете, она, хотя она нужна в принципе везде, для JIT, особенно JIT сесть в компиляторах, которая привинтит, ну, короче, не должно быть возможности, когда JIT, например, заполняет страницу там инструкциями, не должно быть возможности параллельно исполнять или, например, параллельно исполнять и записывать, да, то есть мы должны в один момент либо записывать, либо исполнять, то есть это такая очень хорошая security фича, вот она на этой платформе обязательно, да, то есть без нее падал дотнет, то есть ее реализовали первое, и второе самое важное, это, ну, второй по важности, это ABI, он разный на всех платформах, на всех там операционных системах, вот, и у M1 ABI один в один такой же, как в iOS, то есть те, кто писали приложение для iOS, у них вообще никаких для них проблем не было, да, и компиляторов особенно никаких проблем, потому что уже компиляторы все там нотом умеют, Clang, например, давно, сто лет уже умеет компилировать любую вашу программу в ARM64 для iOS и с учетом всех возможных требований к ABI, например, там одни из требований тем, что, например, на Linux ARM мы там кидаем на стэк все аргументы с alignment, например, там 8 байт, ну, для флотов, например, что-то такое, да, то есть, а здесь совершенно другие требования к alignment, например, даже нет alignment, да, то есть там 8 байт, когда мы кладем на стэк, то есть у нас есть какая-то функция, которая принимает там много параметров, мы часть параметров передаем по регистрам, часть параметров кидаем на стэк, вот, и в случае обычного вот существующего нашего дотнета, в случае Linux ARM, да, то есть на каком-нибудь разбере или на чем-нибудь таком, все эти 8 байт, они ближали с каким-то alignment, например, там 4 или там 8 байт, я не знаю, а в случае iOS ABI их надо кидать там с alignment 1 байт, да, то есть они вот 8 байт на стэке займут 8 байт без alignment, то есть много таких вот мелких, есть специальная страничка у Apple, которая как бы для разработчиков как раз компиляторов, как говорит об особенностях iOS ABI, но штука в том, почему там все винят, что так долго не было поддержки, штука в том, что большинство вот компиляторов, они уже давно, в принципе, умеют в это ABI и для них, и, кстати, в том числе Mono, Mono уже давно там на iOS есть, то есть в Mono это ABI вообще никаких проблем не составил, а вот в .NET не было этого ABI, никогда о нем не слышали, вот сейчас там пытаются его как-то реализовать.
2903.76 2907.52 "Анатолий Кулаков" Ну, а это не просто скопировать из Mono, там и скопировать или из Kalanga?
2907.52 2942.16 "Егор Богатов" Ну, в целом, да, но на самом деле тут совершенно все разные архитектуры, тут просто на доспеха и по ней все правильно сделают, да, то есть где-то там хранить размер данных, которые ты передавешь, с симдами там очень много проблем, я так понимаю, с alignment там тоже, ну, то есть такие, есть одни из требований, потому что регистр allocator, он там не имеет права юзать некоторые регистры, то есть они зарезервированы для системного использования, а вот на Linux ARM64 таких требований нет, ты можешь делать, что там хочешь, еще там были, например, какие-то sign extension, zero extension требования, ну, то есть такие были различия.
2942.16 2953.80 "Анатолий Кулаков" Понятно, слушай, а скажи еще, в принципе, маркетологи нам донесли, что .NET уже давно поддерживает и ARM, и ARM64 и все в этом духе, в чем, собственно, разница была с M1, если это тоже ARM?
2953.80 2986.80 "Егор Богатов" Ну, вот я только что сказал про ABI и вот этот write, store, execute, в целом, я не могу так сказать больше других различий, да, то есть вот как только сделали write, store, execute, он уже, в принципе, стало возможно запускать, но единственное, что вот, да, какие-то сложные функции, в которых там много параметров, и эти параметры не влезали в регистры, их приходилось кидать на stack, да, то есть там на alignment натыкалось, насколько я понимаю, то есть эту фичу тоже, вроде бы, как бы пофиксили в целом, возможно, там с симдами еще пока не пофикшено, но надеюсь, тоже быстро пофиксят.
2986.80 2988.32 "Егор Богатов" Больше глобальных отличий никакие?
2988.32 3039.32 "Егор Богатов" Больше нет, но единственное, что я так понимаю, ARM, Apple, они очень, как бы, такие впереди планеты всей, и они, пока весь мир, пока все какие-то там другие процессоры ARM, они поддерживают какую-то очень старую спецификацию ARM, да, там 8.1, 8.2, Apple впереди планеты всей, они уже там, не знаю, мне кажется, M1, насколько я понимаю, вообще 8.6 поддерживает, то есть там много инструкций добавилось крутых, клевых, там, я не знаю, по-моему, должно быть даже перемножение всяких матриц, очень много инструкций, которых даже нет в x86, ну, кстати, x86 нет ни операций с матрицами, нет, и нету нативной поддержки полуфлотов, да, таких half-floats, половинка флотов, а в ARM вот 64, в 86, там уже, там 84, по-моему, даже, уже было прям нативные инструкции, как с ними работать, складывать с ними, все, пока в Intel'ах ничего такого нету.
3039.32 3046.72 "Анатолий Кулаков" То есть тебе кажется, что вот эти все Apple-овские маркетинговые заявления, что у нас там все в 10 раз быстрее, чем у Intel, а это все вполне может быть правдой, да?
3046.72 3074.36 "Егор Богатов" Более чем, мы видим это на практике, мы видим, что проекты компилируются быстрее, мы видим, что многие программы запускаются быстрее, многие из них, я не знаю, обрабатывают видео, аудио быстрее, ну, что говорить, если тупо даже проекты компилируются вот заметно быстрее, причем более того, эмуляция даже что больше всего порадовала, что эмуляция работает, в принципе, сравнимо, как вот с трехлетним ноутбуком Intel'овским на топовом процессоре, да?
3074.36 3081.76 "Егор Богатов" То есть, если взять там MacBook Pro на топовом Intel'е, а то он, в принципе, работает, как вот этот вот за 1200 MacBook с M1.
3081.76 3082.76 "Егор Богатов" Да, да, отличные показатели.
3082.76 3092.00 "Анатолий Кулаков" Ну, и самый главный вопрос, когда же все-таки релиз, если, грубо говоря, что главную часть уже сделали, неужто нам целый год теперь ждать до отметить шестого?
3092.00 3101.52 "Егор Богатов" Это хороший вопрос, я боюсь, что не ко мне, но могу обещать, что должны, по идее, скоро быть доступны паблик превью, который можно ставить.
3101.52 3120.84 "Егор Богатов" Во-первых, первая очередь, это я надеюсь, что в этом или, может быть, в начале января станут Nightly SDK доступны, но я как бы не могу от лица говорить команды, но я надеюсь, что Nightly SDK уже будут доступны, их можно, нативные, то есть нативные без эмуляции доступны, их можно будет скачать, установить и запускать приложение.
3120.84 3125.36 "Егор Богатов" Ну, понятно, что упираясь какие-то вот эти проблемы, которые пока есть.
3125.36 3139.76 "Егор Богатов" Возможно, в скором времени будет превью 6.0, в первой половине, может быть, ну, я точно не знаю, даже не смотрел, честно говоря, даты и уверен, что мне нельзя, наверное, говорить об этом, но я даже и не смотрел, поэтому и не могу сказать правильно.
3139.76 3156.00 "Егор Богатов" Но, по крайней мере, опыт предыдущего Dota 5 показывает, что должны в первой половине доступны превью 6.0, но, возможно, опять же, судя по личным разговорам в ish.us, поддержка именно эмуляции должна подъехать патчами к 5.0.
3156.00 3164.40 "Егор Богатов" То есть, какое-то вот будете, просто обновите 5.0 и в ней будет уже более стабильная поддержка эмуляции, плюс операционную систему нужно обновить.
3164.40 3168.92 "Анатолий Кулаков" Спасибо большое, а я напоминаю, что это был Егор Богатов из компании Microsoft.
3168.92 3171.08 "Анатолий Кулаков" Вот такие новости прямо с полей.
3171.08 3181.84 "Анатолий Кулаков" Если продолжать про M1, еще стоит сказать парочку проблем с нашими зависимостями, то есть в нашей инфраструктуре есть еще пара игроков, которых нельзя брать в расчет.
3181.84 3182.84 "Анатолий Кулаков" Например, Noda.
3182.84 3191.24 "Анатолий Кулаков" Noda работает прекрасно, MPM Package Manager тоже работает прекрасно, но проблема есть с докером.
3191.24 3196.16 "Анатолий Кулаков" Всеми наш любимый докер, на который нас так легко и тщательно подсаживали, докер не работает.
3196.16 3206.52 "Анатолий Кулаков" Есть Preview Build, который сейчас хоть как-то может запускаться, хоть как-то может работать, но если вы активно используете докер, как раз-таки на чипе M1 докер не работает.
3206.52 3214.32 "Анатолий Кулаков" Ну, опять же, с учетом того, что это все может измениться на тот момент, когда вы слушаете данную новость, поэтому все проверяйте в реальном времени.
3214.32 3221.16 "Игорь Лабутин" Да, я думаю, что на сегодня хватит нам про Tula, про всякие процессоры и странные компании.
3221.16 3224.56 "Игорь Лабутин" Давай вернемся к нашей родной компании, которая нам давно знакома.
3224.56 3232.88 "Игорь Лабутин" Jugru, DotNext, прошел DotNext Москва, но был еще DotNext Питер, который тоже собрал огромное количество докладов.
3232.88 3249.44 "Игорь Лабутин" Было много интересных докладов, это был первый опыт по большому счету онлайн-конференции, и тем не менее, доклады получились хорошие, качественные, и наверное имеет смысл немножко пробежаться по тем, которые уже есть в открытом доступе и посмотреть на те доклады, которые заняли топовые места.
3249.44 3264.20 "Анатолий Кулаков" Да, новость как раз-таки заключается в том, что стал публично доступен плейлист со всеми докладами с питерского DotNext, и я думаю, любой уважающий себя разработчик на ДотНете как минимум должен пробежаться по ним и поискать что-нибудь интересное для себя.
3264.20 3268.64 "Игорь Лабутин" Ну давайте возьмем топ-10, которые у нас есть.
3268.64 3280.32 "Игорь Лабутин" Надо сказать, что эти топ-10 считаются как на основании ваших отзывов, как слушателей и тех, кто участвовал в конференции, просто как средняя оценка всех участников, которые оценили этот доклад.
3280.32 3286.48 "Игорь Лабутин" Чем более качественную оценку поставил каждый участник, тем выше будет доклад в рейтинге.
3286.48 3304.12 "Анатолий Кулаков" Слушай, я думаю, тут все-таки важно сказать об алгоритмах расчетов, потому что когда ДотНекст опубликует этот список в Нахабре, как он обычно делает каждый год, у него будут отличаться рейтинги, то есть у него будут отличаться позиции, и нужно сразу рассказать почему.
3304.12 3314.00 "Анатолий Кулаков" На самом деле, внутри ДотНекста, мы тут такие по крова срываем, вы только никому не говорите, внутри ДотНекста существуют две формулы расчета рейтинга доклада.
3314.00 3322.76 "Анатолий Кулаков" Первая формула - это банальная средняя, то есть все ваши оценки, которые вы оставляете в анкетах, считаются средней оценкой и докладу присылается в некий рейтинг.
3322.76 3332.32 "Анатолий Кулаков" В зависимости от этого рейтинга они сортируются по убыванию и получается некий список доклада, некий рейтинг докладов.
3332.32 3337.72 "Анатолий Кулаков" А есть второй способ расчета рейтинга, называется он софткворум.
3337.72 3343.16 "Анатолий Кулаков" Софткворум учитывает в себе еще количество человек, которые слушали этот доклад.
3343.16 3351.64 "Анатолий Кулаков" Если подумать, то в принципе и тот и тот вариант имеет право на существование в зависимости от того, что вам нужно.
3351.64 3357.96 "Анатолий Кулаков" Например, отличным показателем был для меня несколько сезонов назад Стэн Дырапкин.
3357.96 3364.60 "Анатолий Кулаков" Если я не ошибаюсь, то по средней оценке доклад Стэна про криптографию занял то ли первое, то ли второе место.
3364.60 3375.48 "Анатолий Кулаков" То есть это действительно был очень мощный доклад, на нем сидели большие спецы по криптографии, на нем сидели всякие разработчики-алгоритмы из дотнет мира по шифрованию и так далее.
3375.48 3388.44 "Анатолий Кулаков" Открыв рот и Стэн сделал действительно классный материал, собрал, отлично его преподнес, хорошие примеры показал и рассказал всем, даже тем, кто был далек от секьюрити, какие проблемы есть в дотнете, как их обходить, как нужно пользоваться.
3388.44 3390.52 "Анатолий Кулаков" В общем, шикарный доклад, отличный доклад.
3390.52 3394.12 "Анатолий Кулаков" Не даром у него по средним оценкам лучшие места.
3394.12 3400.92 "Анатолий Кулаков" Но если мы пересчитаем его по софткворуму, то есть учтем количество человек, которые сидело в зале, то их было не так уж и много.
3400.92 3403.04 "Анатолий Кулаков" Человек сто может быть сидело и все.
3403.04 3407.16 "Анатолий Кулаков" И в софткворном рейтинге он занял одно из последних мест.
3407.16 3414.92 "Анатолий Кулаков" Поэтому эти доклады, то есть эти рейтинги, принципиально важно знать по какому рейтингу составляется отчет.
3414.92 3420.24 "Анатолий Кулаков" Это мы вам просто так открыли некие внутренние кухни, которые у нас происходят.
3420.24 3422.28 "Анатолий Кулаков" Может быть для вас это будет интересным.
3422.28 3438.04 "Анатолий Кулаков" А с практической точки зрения, тут важно сказать, что мы сейчас рассказываем рейтинг по среднему, потому что это как раз-таки показатель качества доклада, независимо от того, сколько человек его смотрел, независимо от того, сколько человек его посетило.
3438.04 3442.36 "Анатолий Кулаков" А в официальных отчетах Adonnext у вас будет рейтинг по софткворуму все-таки.
3442.36 3447.28 "Анатолий Кулаков" То есть, сколько людей было, сколько людей докладчик смог прокачать и насколько он популярный доклад сделал.
3447.28 3449.08 "Анатолий Кулаков" Ну и естественно, с учетом оценок тоже.
3449.08 3452.92 "Игорь Лабутин" Ну и это все тоже, конечно, может поменяться к моменту, когда вы все это слушаете.
3452.92 3457.12 "Игорь Лабутин" То есть, что воспринимайте наши слова с определенной долей недоверия.
3457.12 3459.68 "Игорь Лабутин" Ну погнали, наверное, быстренько по рейтингу.
3459.68 3461.24 "Игорь Лабутин" Начнем мы с 10 места.
3461.24 3469.92 "Игорь Лабутин" И 10 место это John Skid со своим докладом про даты, время, как с ними сложно работать, но в целом все-таки как нужно работать.
3469.92 3470.92 "Анатолий Кулаков" Вечный доклад Джона Скита.
3470.92 3474.32 "Анатолий Кулаков" Он уже много где бывал, он его постоянно обновляет.
3474.32 3477.00 "Анатолий Кулаков" То есть, он постоянно показывает что-то новое, что-то интересное.
3477.00 3478.92 "Анатолий Кулаков" И в этот раз не стал исключением.
3478.92 3483.64 "Анатолий Кулаков" Джон снова на свою любимую, мне кажется, тему прокатился отлично.
3483.64 3484.64 "Игорь Лабутин" 9 место Кирилл Маурин.
3484.64 3486.20 "Игорь Лабутин" Классы типов на C#.
3486.20 3495.16 "Игорь Лабутин" Очень хардкорный доклад, который собрал довольно много зрителей и я так понимаю собрал довольно много отзывов по итогу.
3495.16 3497.28 "Анатолий Кулаков" Да, и хорошие рейтинги, хорошие отзывы.
3497.28 3505.12 "Анатолий Кулаков" Классов типов в C# нет, их давно просят на GitHub, и Кирилл нашел способ каким образом их практически сделать для себя.
3505.12 3511.92 "Анатолий Кулаков" И это очень хорошо сказывается на перформансе вашего кода, то есть данный подход.
3511.92 3517.80 "Анатолий Кулаков" Поэтому, если вам важен перформанс и вы интересуетесь структурами данных, то довольно познавательный доклад обязательно посмотрите.
3517.80 3524.28 "Игорь Лабутин" Да, дальше на 8 месте Барта Шепетковский с докладом Living in a Venture Consistent Reality.
3524.28 3532.80 "Игорь Лабутин" Про наши вечные проблемы, что в любой распределенной системе так или иначе ваш мир становится вентюрно консистент и как ни крути с этим нужно что-то делать.
3532.80 3536.44 "Анатолий Кулаков" Вообще, мне кажется, что мы уже давно живем в мире, где все системы распределенные.
3536.44 3547.20 "Анатолий Кулаков" У нас параллельные процессоры, параллельные потоки, параллельные микросервисы, докер контейнеры, кубернетосы, все подряд у нас уже синхронное, все подряд у нас уже параллельное.
3547.20 3565.56 "Анатолий Кулаков" Поэтому, если вы даже не думали, что когда-то вам придется писать код для каких-то распределенных систем, с теорией вентюрной консистенции, с практиками и подходами нужно быть знакомыми, нужно их понимать, нужно их знать, потому что они встречаются довольно часто и чаще, чем вы думаете.
3565.56 3566.56 "Игорь Лабутин" 7 место.
3566.56 3569.00 "Игорь Лабутин" Как обычный F# или функциональность для интерпрайза.
3569.00 3580.92 "Игорь Лабутин" Рома Ниволин, как обычно, про свой F#, но на этот раз он постарался подойти к нему с более практической стороны и показать, зачем вам может быть нужен F#, даже если вы пишете где-то в интерпрайзе.
3580.92 3589.24 "Анатолий Кулаков" И у него это отлично получилось, то есть доклад собрал очень хорошие отзывы, очень достойно и понятно Рома рассказывает.
3589.24 3590.24 "Игорь Лабутин" 6 место.
3590.24 3592.56 "Игорь Лабутин" Стефан Клирри, RoadCP/IP Socket Communication.
3592.56 3599.84 "Игорь Лабутин" В современном мире, мне кажется, все говорят про сетевое взаимодействие, а подразумевают JSON и HTTP и наоборот.
3599.84 3602.24 "Игорь Лабутин" Ну максимум, может быть, мы поговорим про JSPC.
3602.24 3613.44 "Игорь Лабутин" А мало кто помнит, как все на самом деле внутри работает, что делать, если вам нужно поговорить прям по сокету напрямую, что вообще такое за протокол TCP/IP и какие там детали реализации.
3613.44 3630.16 "Игорь Лабутин" Понятно, что совсем в глубину деталей за часовой доклад не влезешь, но кое-что интересное достать можно и самое главное понять, как ваше приложение, как работа вашего приложения может использовать или наоборот противоречить правилам работы TCP/IP и что с этим делать.
3630.16 3642.28 "Анатолий Кулаков" И самое интересное, что такая узкая тема тоже набрала очень много положительных отзывов и, наверное, одна из заслуг это ее автор, потому что Стефан Клирри это довольно-таки популярный ее автор и на Stack Overflow и на своем блоге.
3642.28 3648.56 "Анатолий Кулаков" Он собрал очень много методик по оптимизации, по работе параллельного, по работе синхронного кода.
3648.56 3652.92 "Анатолий Кулаков" Он очень много пишет про таски и про вот эти всякие прочие низкоуровневые глупости.
3652.92 3657.48 "Анатолий Кулаков" Очень замечательные статьи, тоже на блог посмотрите, если вы вдруг случайно не видели еще.
3657.48 3663.92 "Игорь Лабутин" Дальше идет доклад на пятом месте "Долгий путь к сотням тысячам RPS" от Анатолия Жмура.
3663.92 3667.52 "Игорь Лабутин" Тоже про сети, тоже про ваше приложение, но что делать,
3667.52 3673.32 None если вам очень хочется писать достаточно высокоуровнево, но при этом получать очень быстрые сервисы.
3673.32 3682.64 "Анатолий Кулаков" Анатолий хорошо рассказывает про оптимизации, про перформанс, про то, как надо правильно мерить, про то, как надо правильно ускорять и вот эти все прочие глупости.
3682.64 3696.36 "Анатолий Кулаков" Если вы слушали наши предыдущие выпуски, то вы, наверное, слышали про его комментарий относительно Кестерла, относительно того, как он быстро работает и что все эти бичмарки значат для нас и относительно бичмарков по gRPC.
3696.36 3706.20 "Анатолий Кулаков" Поэтому если вы хотите правильно мерить сеть, если вы хотите правильно посмотреть, как сетевые запросы нужно ускорять, очень интересный доклад, обратите внимание.
3706.20 3708.44 "Игорь Лабутин" На четвертом месте доклад для любителей Линукса.
3708.44 3721.60 "Игорь Лабутин" Если вы любите Линукс или если вы в какой-то причине вынуждены на нем жить и запускать .NET, где нет у всех наших любимых тулов вида Visual Studio, удобных райдеров, ладно, райдер еще куда не шло, но тем не менее.
3721.60 3735.96 "Игорь Лабутин" В общем, четвертое место - Running.NET Core Performance Investigation от Адама Ситника, одного из, собственно, сейчас главных авторов и людей, которые ответственны за перформанс .NET Core, в том числе на Линуксе.
3735.96 3740.92 "Анатолий Кулаков" То есть непосредственно из Микрософта человек расскажет, что же они там такое делают интересного.
3740.92 3748.24 "Анатолий Кулаков" И надо сказать, что инструменты под Линукс с каждым месяцем просто становятся лучше и лучше, и это не может не
3748.24 3752.24 "Игорь Лабутин" радовать. Тройка лидеров, третье место - Art of Code, Дилан Битти.
3752.24 3777.88 "Анатолий Кулаков" Гениальный доклад, не сказать, что про C#, не сказать, что про Hardcore, но в целом, как всегда, у Дилана философский доклад про код, про что код делает с нашей жизнью, что каким образом он оставляет философский след, философский отпечаток на нашей судьбе, и что бы программисты делали, если бы их не заставляли программировать за деньги, если бы они программировали только для души, что бы у них могло получиться.
3777.88 3782.76 "Анатолий Кулаков" А много этих и других тем покрывает в своем докладе Дилан Битти.
3782.76 3789.60 "Игорь Лабутин" На втором месте полная противоположность доклада Дилана - это использование C# в .NET Core от Дмитрия Нестерука.
3789.60 3799.48 "Игорь Лабутин" Если Дилан Битти - это очень что-то высокоуровневое и философское, то использование C# в .NET Core от Нестерука - это прям низкоуровневое, низкоуровневое.
3799.48 3809.60 "Анатолий Кулаков" А еще нужно заценить, что это второе место, то есть это один из самых крутейших докладок на конференции, который понравился большинству участников, и это C#.
3809.60 3813.80 "Анатолий Кулаков" Кто бы мог сказать, что большинство людей, которые ходят на конференцию, им интересны C#?
3813.80 3819.92 "Анатолий Кулаков" А на самом деле интересны, и нужно сказать также, что Дмитрий Нестерук прекрасно умеет рассказывать.
3819.92 3823.80 "Анатолий Кулаков" Это один из самых лучших докладчиков, также знаменитый блогер.
3823.80 3831.12 "Анатолий Кулаков" В общем, доклад нашел идеальное сочетание, прекрасный докладчик, хардкорная тема и хорошие зрители.
3831.12 3833.24 "Игорь Лабутин" Да, Дмитрий еще не менее знаменитый подкастер.
3833.24 3840.84 "Игорь Лабутин" А на первом месте еще один известный докладчик, тоже довольно знаменитый, это Андрей Кенчин со своим докладом "Поговорим про перформанс анализ".
3840.84 3846.56 "Анатолий Кулаков" Шедевральное возвращение Андрея после долгого отдыха не дало никаких шансов коллегам.
3846.56 3852.88 "Анатолий Кулаков" Может люди думали, что все, Андрей выдохся, устарел и можно будет забирать первые места, но нет.
3852.88 3857.48 "Анатолий Кулаков" Вернулся Андрей и забрал первое место конференции "What's next" так же, как он это делает всегда.
3857.48 3862.20 "Анатолий Кулаков" Просто невозможно с ним участвовать в один год, иначе никакой перспективы на победу нет.
3862.20 3863.60 "Анатолий Кулаков" Что здесь можно сказать?
3863.60 3872.60 "Анатолий Кулаков" Шикарный материал, отлично подготовлен, много собственных разработок, много собственных наработок, блестящее применение на практике в команде райдера.
3872.60 3880.20 "Анатолий Кулаков" И все это с красочными картинками, с отличными выводами, с open-source инструментами, которые доступны уже сейчас вам для анализа.
3880.20 3884.88 "Анатолий Кулаков" Кстати, Андрей на этом докладе рассказывал про свой новый проект Perfolizer.
3884.88 3891.92 "Анатолий Кулаков" Если вы любите benchmark.net и вам нравятся те анализы, которые там есть, обратите внимание на Perfolizer.
3891.92 3897.68 "Анатолий Кулаков" В нем еще больше анализов, там еще больше интересных алгоритмов, еще больше интересных структур.
3897.68 3905.64 "Анатолий Кулаков" И я встречал множество алгоритмов, которые, если вы ищете их на дотнете, присутствуют только в Perfolizer, и все, больше нигде их нет.
3905.64 3909.16 "Анатолий Кулаков" То есть это такая уникальная сборка, уникальная солянка.
3909.16 3913.36 "Анатолий Кулаков" Посмотрите доклад, посмотрите проект и поставьте звездочку
3913.36 3920.76 "Игорь Лабутин" Андрею. Вообще, Андрей на самом деле занимается довольно много изучением, так скажем, научной стороны этого дела.
3920.76 3941.20 "Игорь Лабутин" И если вам интересно математика, которая за всем этим стоит, во-первых, немножко было в докладе, а во-вторых, подписывайтесь на блог и твиттер Андрея, он там регулярно публикует всякие статейки на предмет именно математических алгоритмов, как искать всякие штуки в ваших результатах performance-тестов, распределение, определять форму распределения, определять модальность распределения и так далее.
3941.20 3944.08 "Игорь Лабутин" В общем, если вы про науку, то там тоже интересно.
3944.08 3948.72 "Игорь Лабутин" Итак, это были 10 топ-10 докладов по версии среднего рейтинга.
3948.72 3958.52 "Игорь Лабутин" Возможно, когда мы увидим статью от Jouguru, там будет немножко другой рейтинг, но по большому счету все эти топ-10, топ-15, топ-5, топ-3 не так важны.
3958.52 3965.68 "Игорь Лабутин" Смотрите полную программу, смотрите полный плейлист, выстраивайте свой собственный рейтинг того, что вам интересно и смотрите качественный контент.
3965.68 3967.48 "Анатолий Кулаков" А на этом, наверное, всё.
3967.48 3968.48 "Анатолий Кулаков" Давай подводить итоги.
3968.48 3969.48 "Игорь Лабутин" Давай.
3969.48 3970.96 "Игорь Лабутин" Сегодня было не так много тем.
3970.96 3978.24 "Игорь Лабутин" Мы сегодня посмотрели на новые обновления ReSharper, Rider и других тулов от JetBrains 2020.3.
3978.24 3990.08 "Игорь Лабутин" Посмотрели на анонс нового, очередного, я бы сказал, C# анализатора InferSharp от Microsoft и Facebook, который позволит сделать ваш код еще более безопасным уже в рантайме.
3990.08 3997.92 "Игорь Лабутин" Глянули на еще один анализатор, в этот раз от Amazon, про то, насколько ваш код портабелен под .NET Core или .NET 5.
3997.92 4008.40 "Игорь Лабутин" Вспомнили такую штуку, как Rosslin Scripting, которая может быть не так часто используется, но все еще может быть полезна, особенно если вам по какой-то причине не нравится DLR или вы не можете его использовать или не хотите.
4008.40 4017.20 "Игорь Лабутин" И обсудили планы Apple и планы Microsoft на тему того, что делать с .NET на новом процессоре M1.
4017.20 4028.96 "Игорь Лабутин" Понятно, что это планы не только самого Microsoft и Apple, это еще и JetBrains, это Mono, это огромное количество разработчиков на .NET, которые стремятся сделать так, чтобы .NET натипно запускался на новом процессе.
4028.96 4033.60 "Игорь Лабутин" И быстренько пробежались по топ-10 докладов питерского .NET 2020.
4033.60 4038.56 "Анатолий Кулаков" Ну что ж, я думаю, чтобы создать новогоднее настроение, нам нужно немножко раздать подарочек, как ты считаешь?
4038.56 4040.32 "Анатолий Кулаков" Мы давно лицензии не дарили.
4040.32 4042.80 "Игорь Лабутин" Давай, да, Новый год, давай все раздадим.
4042.80 4046.00 "Анатолий Кулаков" Объявляется очередной конкурс.
4046.00 4049.04 "Анатолий Кулаков" Итак, друзья, правила стандартные.
4049.04 4053.48 "Анатолий Кулаков" Мы разыгрываем 4 лицензии от компании JetBrains на любой их продукт.
4053.48 4057.08 "Анатолий Кулаков" Лицензии 4 выберет их справедливый рандом.
4057.08 4059.32 "Анатолий Кулаков" Рандом будет из 4 списков.
4059.32 4068.88 "Анатолий Кулаков" Первый список - это люди, которые лайкнули анонс нашего подкаста, вот этого выпуска в социальной сети ВКонтакте в группе .NET.RU.
4068.88 4073.72 "Анатолий Кулаков" Второй список - это те, кто репостнули данный анонс ВКонтактике.
4073.72 4082.44 "Анатолий Кулаков" Третий список - это люди, которые ретвитнули наш твит с официального аккаунта .NET.RU с анонсом данного выпуска.
4082.44 4088.72 "Анатолий Кулаков" И четвертый список - это люди, которые оставили свой комментарий в ютубе под данным выпуском.
4088.72 4090.52 "Анатолий Кулаков" Комментарий может быть абсолютно любым.
4090.52 4097.44 "Анатолий Кулаков" Напишите нам, где вы слушаете наш подкаст, с какого города, какая у вас погода, чего вы желаете всем на новый год, что угодно.
4097.44 4101.04 "Анатолий Кулаков" Но если вы вдруг захотите написать нам что-то интересное,
4101.04 4106.12 None то у меня следующее объявление. В этом году это был последний технический выпуск.
4106.12 4108.88 "Анатолий Кулаков" Дальше мы хотим записать новогодний выпуск.
4108.88 4113.68 "Анатолий Кулаков" В этом новогоднем выпуске мы не будем обсуждать новости, не будем обсуждать эти технические темы.
4113.68 4122.32 "Анатолий Кулаков" Мы поговорим о нашей внутренней кухне, то есть, как мы записываемся, что мы делаем, что мы хотим, для чего мы это делаем и может быть что-нибудь еще.
4122.32 4125.12 "Анатолий Кулаков" Вот, кстати, насчет что-нибудь еще нам нужна ваша помощь.
4125.12 4137.92 "Анатолий Кулаков" Напишите, пожалуйста, в комментариях к ютубу или в любой другой социальной сети, о чем бы вы хотели послушать, о чем бы вы хотели поговорить на какую-нибудь жизненную тему без привязки к новостям, к технологиям, к дотнету и к прочему.
4137.92 4142.20 "Анатолий Кулаков" То есть, что-нибудь такое расслабленное, неновогоднее, желательно, к чему нам не нужно будет готовиться.
4142.20 4147.28 "Игорь Лабутин" Ну, если вас интересует что-то, к чему нам нужно будет подготовиться, мы постараемся и подготовимся.
4147.28 4149.68 "Анатолий Кулаков" Хорошо, постараемся, так уж и быть.
4149.68 4151.08 "Анатолий Кулаков" Ну, а на сегодня все.
4151.08 4155.56 "Анатолий Кулаков" Большое всем спасибо и до скорой встречи в новогоднем выпуске.
4155.56 4156.06 "Анатолий Кулаков" Всем пока.
4156.06 4162.06 None [музыка]
