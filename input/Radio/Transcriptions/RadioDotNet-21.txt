0.00 5.68 "Анатолий Кулаков" Здравствуйте, дорогие друзья!
5.68 9.24 "Анатолий Кулаков" В эфире Радио.нет выпуск номер 21.
9.24 13.16 "Анатолий Кулаков" С вами в студии Анатолий Кулаков и Игорь Лабутин.
13.16 16.64 "Анатолий Кулаков" Ну что ж, начались отличные зимние-морозные деньки.
16.64 20.20 "Анатолий Кулаков" Как раз-таки самое время обсудить технические новости.
20.20 23.92 "Анатолий Кулаков" Ну, а самая главная новость - мы открыли донаты.
23.92 31.28 "Анатолий Кулаков" Вы можете нас поддержать, наш подкастик, начиная от самой минимальной суммы, мы будем рады любой помощи.
31.28 35.04 "Анатолий Кулаков" И у нас уже появились первые патроны, за что им огромное спасибо.
35.04 39.92 "Анатолий Кулаков" И самым первым был Александр, он нам сделал отличный новогодний подарок, он стал первым.
39.92 44.12 "Анатолий Кулаков" Ему прям отдельный респект, большое спасибо, Александр, спасибо, что поддерживаете нас.
44.12 52.52 "Анатолий Кулаков" Если вам тоже интересно присоединиться к нашему приватному чатику, получать множество бонусов с бэкстейджа, то заходите.
52.52 60.72 "Анатолий Кулаков" Для тех, кто разбрасывается долларами, у нас есть Патреон-аккаунт, а для тех, кто привык работать с рублями, у нас есть аккаунт на Boosty.
60.72 62.08 "Анатолий Кулаков" Все ссылочки вы найдете в описании.
62.08 66.52 "Анатолий Кулаков" Ну что ж, давайте приступим непосредственно к самому интересному.
66.52 70.96 "Анатолий Кулаков" После долгих каникул неохотно нырять сразу в какой-то хардкор.
70.96 73.96 "Анатолий Кулаков" Игорь, есть у тебя какая-нибудь темка первая, что полегче?
73.96 77.44 "Игорь Лабутин" Да, полегче темка, ну, конечно же, про C#.
77.44 78.44 "Игорь Лабутин" Про что же еще?
78.44 79.44 "Игорь Лабутин" Начнем мы как обычно.
79.44 83.28 "Игорь Лабутин" И на самом деле, появилась одна штука на просторах интернета.
83.28 86.88 "Игорь Лабутин" Она появилась еще в ноябре, но как-то в поле зрения попала только сейчас.
86.88 88.32 "Игорь Лабутин" Это CheatSheet.
88.32 105.12 "Игорь Лабутин" Признаться, много-много лет назад, когда я был только таким начинающим разработчиком, я очень любил читшиты, типа все команды сабвершина в те времена на одной страничке PDF, или все шорткаты решарбера на одной страничке, все это распечатать, повесить на стеночку.
105.12 108.36 "Игорь Лабутин" Теперь такое можно сделать для C# 9.
108.36 130.28 "Игорь Лабутин" Некто на GitHub опубликовал репозиторий под названием C# 9 CheatSheet, где в варианте PDF, PowerPoint, JPEG, по-моему, есть пятистраничный документик, где аккуратненько перечислены все новиночки 9 C#, структурированные по разделам и очень кратенько с примерами кода описаны, как, что они делают.
130.28 141.20 "Игорь Лабутин" Наверное, в современном мире вы вряд ли это будете печатать на стенку, чтобы видеть у себя бумажку про то, как устроены init.only.setters или как выглядит конкретно атрибутик local.init.
141.20 152.24 "Игорь Лабутин" Но если вы, допустим, часто переключаетесь между версиями языка или просто интересно быстро вспомнить, что было добавлено в какой-то конкретной версии, такая PDF вполне может быть полезна.
152.24 161.80 "Анатолий Кулаков" Я помню, во времена своей молодости тоже любил распечатывать подобные штуки, но не для того, чтобы вешать на стенку, а для меня это был удобный кейс для того, чтобы учить новые фичи языка.
161.80 178.72 "Анатолий Кулаков" То есть я клал листочек рядом в своем обычном рабочем мне и пытался применять те штуки, которые я увидел на листочке, которые были введены в язык, и таким образом на практических кейсах буквально за 2-3 дня я их все уже выучил наизусть и выбрасывал листочек.
178.72 185.68 "Анатолий Кулаков" И я вот только что осознал, что вот эту функциональность для меня, типа обучение новым фичам языка, по 100% заменил ReSharper.
185.68 198.12 "Анатолий Кулаков" Потому что это такая прекрасная вещь, когда ты просто-напросто обновляешь свой плагин, а он тебе начинает подсказывать, что вот здесь вот можно сократить, вот здесь можно красивее написать, а вот здесь нажми Alt+Enter, я тебе сейчас еще покажу, какие фичи ты ни разу не видел.
198.12 204.72 "Анатолий Кулаков" Вот, и это настолько удобно и интересно, что мне кажется, вот он для меня полностью выбросил читшиты из какого-то практического поля.
204.72 215.90 "Игорь Лабутин" Ну да, наверное действительно так, для обучения сейчас компьютер лучше всего, и он сам понимает, что вы от него хотели, и как эту же операцию можно сделать быстрее во многих случаях, и подсказывать.
215.90 218.54 "Игорь Лабутин" Но тем не менее, как краткий справочник, почему нет.
218.54 223.22 "Игорь Лабутин" Такие же PDF-ки есть про 7 и 8 версию, так что если вам интересно, сходите, посмотрите.
223.22 240.78 "Игорь Лабутин" А по поводу обучения, я это использовал когда-то для шорткатов, то есть я не печатал целиком большой там читшиты шарпера в те времена, а я печатал себе там условный пяток шорткатов, которые я хочу выучить, и они у меня висели там на мониторчике, чтобы вот мол я учу именно их там эту недельку, потом они менялись на следующие 5 и так далее.
240.78 247.14 "Игорь Лабутин" Сейчас конечно есть всякие экстенджины, которые подскажут, поняв какое действие вы сделали, а какой же шорткат нужно было использовать.
247.14 250.98 "Анатолий Кулаков" Так, ну что-то ты слишком лайтово, давай чуть-чуть по-хардкорней.
250.98 251.98 "Игорь Лабутин" Чуть-чуть.
251.98 256.58 "Игорь Лабутин" Ну окей, раз чуть-чуть по-хардкорней, давайте пойдем в сторону сеток.
256.58 266.14 "Игорь Лабутин" Я привязался к DotNet 5 в прошлом году, и появилась статья про то, а какие же собственно были улучшения в Networking Stack в DotNet 5.
266.14 274.10 "Игорь Лабутин" Мы много раз упоминали всякие разные кусочки, то там, то тут, но здесь все они сведены воедино в единый большой список, и сейчас мы по нему пробежимся.
274.10 277.90 None Начнем мы с первого раздела, это HTTP обработка.
277.90 283.54 "Игорь Лабутин" Наверняка для многих весь Networking Stack сводится к единственному слову HTTP, но там есть много еще чего-то другого.
283.54 285.02 "Игорь Лабутин" Но начнем мы именно с него.
285.02 287.58 "Игорь Лабутин" Во-первых, улучшилась обработка ошибок.
287.58 318.14 "Игорь Лабутин" HTTP Client, когда у него что-то не получается, в смысле что он не достучался до ресурса или еще что-то, он довольно часто бросал TaskCanceledException, и он до сих пор это будет делать, но если произошел тайм-аут теперь в том консолейшн токене, который мы туда передали, то во внутреннем innerException будет лежать тайм-аут exception, он туда кладется искусственно, но таким образом вы сможете отличать тайм-аут вашего консолейшн токена от тайм-аута сервера, а не потому что вы попросили конкретный тайм-аут.
318.14 324.78 "Игорь Лабутин" Дальше немножко улучшилось заполнение HTTP RequestException.
324.78 347.22 "Игорь Лабутин" Теперь если вы вызовете метод EnsureSuccessStatusCode, который многие используют, ну как такую проверку, типа, реквест в целом успешен или нет, то если он был не успешен, то в HTTP RequestException будет стоять правильный статус-код, и его можно использовать в том числе в exception-фильтрах, что как бы удобно, если вы пишете развещество, логику обработки разных статус-кодов на ваши HTTP Client вызовы.
347.22 362.86 "Игорь Лабутин" Естественно, есть огромное количество helper-методов, типа, там, getStringAsync, getStreamAsync и так далее, которые не возвращают респонс, на котором вы вызываете EnsureSuccessStatusCode, для таких методов оно вызывается само-то внутри.
362.86 404.10 "Игорь Лабутин" Дальше мы уже тоже затрагивали эту тему, но наконец-таки теперь сделано так, что на всех платформах, где поддерживаем .NET, у нас единая реализация внутреннего стека, то есть HTTP Client сам по себе же ничего не делает, он просто делегирует вызов нижележащему слою, и раньше на Windows это был WinHttpHandler, на Linux и Mac это был CurlHandler, теперь есть единый SocketHTTPHandler, и если он был введен и раньше, но раньше можно было принудительно выключить с помощью глобального AppContextSwitchSystemNetHttpUseSocketHTTPHandler, можно было выключить использование SocketHTTPHandler, теперь нельзя.
404.10 428.50 "Игорь Лабутин" Теперь всегда в .NET 5 используется SocketHTTPHandler, но если вам все-таки почему-то на Windows очень нравится WinHttpHandler и вы хотите его использовать, то он запакован во внешний GetPacket, который вы можете к себе забрать, это официальный паблик пакет, и напрямую явно указать в HTTP Client, чтобы он использовался, вот конкретно WinHttpHandler, тогда будет как вы по старинке всегда работали на Windows.
428.50 456.34 "Игорь Лабутин" И у SocketHTTPHandler появились два extension point, это прям совсем уж advanced-advanced, есть callback, который вызывается каждый раз, когда кто-то законнектился к порту, и есть некоторый фильтр-метод, который будет вызываться, на котором можно обработать прям вот raw stream полученный из сокета, но уже после TLS декрипта, то есть прям вот ни уровнем уже некуда, прям из вашего высокоуровневого .NET кода, если хотите.
456.34 470.78 "Игорь Лабутин" Плюс появилось несколько всяких мелких улучшений, добавили синхронный API для HTTP Client Send, внезапно в синхронном мире кому-то все еще нужен строго синхронный API, поэтому его по многочисленным просьбам добавили.
470.78 475.62 "Анатолий Кулаков" А какие-нибудь причины уже понятные, то есть кому понадобилось синхронный input-output?
475.62 492.78 "Игорь Лабутин" Я так понимаю, что причина в том, что всякие осинки это довольно легкий способ, ну может быть не очень легкий, но один из способов получить всякие дедлоки и прочее, особенно когда вы находитесь в контексте всяких UI-ных приложений, где есть синхронизейшн контекст и вот это все.
492.78 497.26 "Игорь Лабутин" И возможно там в каких-то местах проще это сделать синхронно.
497.26 508.62 "Игорь Лабутин" Какой-то мотивации в посте нету большой и развесистой, есть огромное количество ограничений, когда это можно использовать, но тем не менее раз фича прям добавлена, то наверное что-то нужно было.
508.62 512.94 "Игорь Лабутин" Хотя конечно правильно использовать асинхронные версии и писать правильный асинхронный код.
512.94 515.42 "Игорь Лабутин" Да, детишки, не используйте его, не делайте так.
515.42 520.74 "Игорь Лабутин" На этом все с HTTP и следующий пункт это HTTP, догадайся, 2.
520.74 521.74 "Игорь Лабутин" О, наконец-то.
521.74 523.58 "Анатолий Кулаков" Что у нас там заимпровилось?
523.58 531.98 "Игорь Лабутин" Там заимпровились на самом деле такие, с одной стороны, казалось бы, немножко странные для меня вещи, но по некоторому размышлению я понял, что смысл они имеют.
531.98 553.42 "Игорь Лабутин" До .NET 5 было практически невозможно, ну точнее довольно-таки сложно включить на HTTP 2 clear text communication, то есть без всяких encryption, без всего, просто посылать по HTTP 2 со всеми фишками, там, мультиплефингом и всем остальным, с сервер-сайд и client-сайд стримингом, но plain text, без encryption.
553.42 558.86 "Игорь Лабутин" Такого не поддерживалось, точнее поддерживалось, но не официальным, типа не supported application-wide свечом.
558.86 566.98 "Игорь Лабутин" Если бы этот свеч не указывается, то как только вы создаете clear text HTTP 2 connection, он автоматически доугрейтился до HTTP 1.1.
566.98 568.30 "Игорь Лабутин" Теперь появилось несколько шагов.
568.30 573.90 "Игорь Лабутин" Во-первых, теперь при создании HTTP client можно указать явно HTTP version policy.
573.90 579.66 "Игорь Лабутин" Это енотчик, у него три значения, есть, соответственно, request version exact.
579.66 583.54 "Игорь Лабутин" То есть если вы попросили 2, значит будет обязательно 2.
583.54 586.90 "Игорь Лабутин" Если сервер 2 не поддерживает, ну, сорян, connection не может быть установлен.
586.90 594.82 "Игорь Лабутин" Можно request version или ниже, это дефолтное поведение, то есть если вы просили 2, а сервер не поддерживает 2, ну все, доугрейтится до 1.1 и будет работать.
594.82 597.54 "Игорь Лабутин" А можно request version or higher, то есть выше.
597.54 605.06 "Игорь Лабутин" То есть здесь, скорее всего, сценарий такой, что вы можете попросить 1.1, но если вдруг поддержано 2 у сервера, так, случайно, как бы хорошо.
605.06 609.70 "Игорь Лабутин" Или если вы просите 2, а у сервера поддержано 3, тоже неплохо.
609.70 616.90 "Игорь Лабутин" И это все можно глобальным управлять на уровне HTTP client через default version policy, а можно прямо на уровне отдельных send.
616.90 621.14 "Игорь Лабутин" Разные send могут использовать разные вершины, то есть они будут устанавливать разные connections.
621.14 628.46 "Игорь Лабутин" Вторая штука, которую сделали для HTTP 2, это появилась возможность открывать несколько connections к одному и тому же endpoint.
628.46 640.26 "Игорь Лабутин" Раньше, если у вас есть один процесс и другой процесс, ну или даже просто два endpoint, клиент и сервер какой-то, то вы не могли сказать, вот мне законнекси, пожалуйста, к этому серверу, а потом еще раз к этому же серверу.
640.26 641.26 "Игорь Лабутин" Так было нельзя.
641.26 646.70 "Игорь Лабутин" В принципе, HTTP 2 поддерживает multiplexing, то есть несколько connections внутри одного физического connection.
646.70 649.82 "Игорь Лабутин" Казалось бы, такое не надо, несколько физических connections.
649.82 658.42 "Игорь Лабутин" Но на самом деле этих connections виртуальных внутри физического может быть только ограниченное количество, это задается некоторым параметром settings внутри HTTP 2 протокола.
658.42 662.18 "Игорь Лабутин" И иногда некоторые сервера могут устанавливать его там 100.
662.18 665.46 "Игорь Лабутин" А если вы очень активно с таким сервером общаетесь, то 100 может быть мало.
665.46 667.74 "Игорь Лабутин" Поэтому, в общем, Microsoft теперь разрешает.
667.74 677.94 "Игорь Лабутин" Это нужно делать прямо явно, нужно поставить специальную опцию у Socket HTTP Handler, но она теперь может быть поставлена в true и вы канатитесь сколько хотите.
677.94 680.82 "Игорь Лабутин" Следующая штука и последняя в HTTP 2 - это ping.
680.82 695.62 "Игорь Лабутин" По спецификации там есть такая штука ping frames, то есть это если у вас канал находится в состоянии idle, там нет никакого трафика, то чтобы канал как бы жил и оба endpoints не закрывали connections за всяких внутренних timeouts, там периодически шлются пинги.
695.62 702.38 "Игорь Лабутин" Дотнетовская реализация раньше была такой, что она только отвечала на пинги, но сама никогда их не посылала.
702.38 707.22 "Игорь Лабутин" Теперь есть набор опций, который достаточно подробно позволяет конфигурить, как посылать.
707.22 713.02 "Игорь Лабутин" Через какое время, так сказать, ничего не деланье, с каким timeout, как долго самому отвечать.
713.02 714.94 "Игорь Лабутин" Можно все нормально настроить.
714.94 720.06 "Анатолий Кулаков" Я хочу напомнить, что HTTP 1.1 вышел около 25 лет назад.
720.06 724.26 "Анатолий Кулаков" Наконец-то мы через больше чем 20 лет пришли к HTTP 2.
724.26 729.54 "Анатолий Кулаков" И тут что-то у наших гениальных умов, у наших сетевиков прорвало.
729.54 740.66 "Анатолий Кулаков" И в тот момент, когда еще не все поддерживают даже HTTP 2, даже начата поддержка, не у всех уже проведены тесты, в активной разработке находится HTTP 3.
740.66 747.30 "Игорь Лабутин" Где-то да, причем не то, что прям в активное, но я так понимаю, что где-то там близится к стандартизации.
747.30 751.78 "Игорь Лабутин" Я давно не проверял статус, но как-то у них неплохо шло дело к стандартизации.
751.78 758.10 "Игорь Лабутин" HTTP 3, казалось бы, это должна быть, ну как сказать, естественной эволюцией HTTP 2, но нет.
758.10 763.86 "Игорь Лабутин" Это UDP-бейст протокол, второе его название это QUIC, без "К" в конце, четыре буквы.
763.86 776.34 "Игорь Лабутин" И есть куча всяких, по мнению авторов, улучшений по сравнению с тем, что мы делали поверх TCP, более быстрые хендшейки, более надежное мультиплексирование, собственно, каналов в одном.
776.34 790.74 "Игорь Лабутин" Ну, в общем, куча всяких улучшений, плюс есть еще такая штука, что в TCP, даже если вы мультиплексируете все в одном канале, физически-то это все тащится по одному коннекшену и понятно, что если какие-то байтики одного коннекшена еще не пролезли, то все заблокируется.
790.74 796.42 "Игорь Лабутин" Плюс в TCP Windows есть проблема, оно начнет уменьшаться, данные будут передаваться с меньшей скоростью.
796.42 797.42 "Игорь Лабутин" Короче, куча проблем.
797.42 799.22 "Игорь Лабутин" Нет, все фигачится быстро.
799.22 802.18 "Игорь Лабутин" Ну, правда, пакеты могут теряться, но протокол на это заточен.
802.18 805.90 "Анатолий Кулаков" И что у нас есть в .NET, в .NET про HTTP/3?
805.90 809.74 "Игорь Лабутин" В .NET пятом появилась экспериментальная поддержка.
809.74 812.90 "Игорь Лабутин" Это пока очень все рано, никакого продакшена.
812.90 819.06 "Игорь Лабутин" Они используют библиотеку под названием MSQuick и работает это все пока только на инсайдерских билдах Windows.
819.06 829.70 "Игорь Лабутин" То есть, если у вас есть доступ к инсайдерским билдам Windows, то вы можете начать попробовать использовать HTTP/3 и для этого нужно использовать опять же AppContext Switch.
829.70 834.46 "Игорь Лабутин" Я очень много сегодня их упоминаю, как-то сетевая инфраструктура, очень много их обвешена.
834.46 835.94 "Игорь Лабутин" Есть такой Switch.
835.94 836.94 "Игорь Лабутин" .NET System.
836.94 841.54 "Игорь Лабутин" Нет, это HTTP, особенно HTTP Handler, HTTP/3 Draft Support.
841.54 845.54 "Игорь Лабутин" Даже Switch называется Draft Support, что и показывает, насколько все там draft.
845.54 851.98 "Игорь Лабутин" Но, в общем, можно попробовать это все включить и оно будет работать, наверное, в экспериментальном режиме.
851.98 855.94 "Игорь Лабутин" Так что, если вам очень интересно, что такое HTTP/3, зачем-то его попробовать.
855.94 861.82 "Игорь Лабутин" Берите инсайдерский билд Windows, берите .NET 5, выставляйте правильное переменное окружение и пробуйте.
861.82 867.06 "Анатолий Кулаков" Ну, как минимум, интересно, будет ли увеличение скорости, на каких режимах, на каких нагрузках.
867.06 869.62 "Анатолий Кулаков" Ну, то есть, зачем-то эту шарманку все придумывали.
869.62 872.14 "Игорь Лабутин" Да, зачем-то придумывали, будем смотреть.
872.14 878.86 "Игорь Лабутин" То есть, я не видел каких-то пока сильно больших открытых тестов всего этого дела и каких-то практических выводов.
878.86 884.18 "Игорь Лабутин" Просто потому, что я так понимаю, готовых конечных реализаций HTTP/3 пока очень мало и они все довольно экспериментальны.
884.18 885.18 "Игорь Лабутин" Погнали дальше.
885.18 887.18 "Игорь Лабутин" Я уже упоминал про cancellation timeout.
887.18 897.30 "Игорь Лабутин" На самом деле, в целом, HTTP Client и весь API вокруг обрел чуть лучшую поддержку cancellation, там почти везде теперь можно прокинуть внешний cancellation токен.
897.30 911.14 "Игорь Лабутин" Так что, если вы свои операции пишете с использованием cancellation токенов, теперь вы их можете отдавать дальше по ставку в HTTP и они будут следить за вашими токенами и там отменять, если вы отменяете целиком операцию и тогда это прям хорошо.
911.14 914.78 "Игорь Лабутин" Моя любимая тема - это телеметрия, логин и все такое.
914.78 920.10 "Игорь Лабутин" Вообще, в Дотнете всегда была довольно развесистая телеметрия вокруг сети, но с ней была одна проблема.
920.10 925.62 "Игорь Лабутин" Если ее включаешь, то там прям объем ивентов, ЕТВ или еще что-нибудь, был прям огромный.
925.62 928.94 "Игорь Лабутин" Она была слишком низкоуровнева и разобраться в них было довольно сложно.
928.94 932.50 "Игорь Лабутин" В Дотнет 5 появился новый набор ивентов и каунтер.
932.50 938.70 "Игорь Лабутин" Они сделаны с расчетом на то, что все это будет, так скажем, постоянно мониториться.
938.70 948.94 "Игорь Лабутин" Если их включать целенаправленно и небольшими множествами, которые нужны вам конкретно в продакшене, то, скорее всего, это не сильно повлияет на ваше приложение и это хорошо.
948.94 958.42 "Игорь Лабутин" Все это, естественно, базируется на EventSource и, соответственно, может быть кроссплатформенно и ловиться с помощью Дотнет Трейса, Дотнет Каунтера в ToolOff, либо внутри кода через EventList.
958.42 965.26 "Игорь Лабутин" В принципе, можете даже в самом приложении ловить, что там с ним происходит с точки зрения обработки реквестов, сокетов и так далее.
965.26 982.30 "Игорь Лабутин" И последнее, что изменилось в HTTP3, опять же, в инсайдерских билдах винды по дефолту теперь включен TLS 1.3, так что если вы хотите на TLS 1.3 и на Дотнет Коре, на вот этом вот сокете с HTTP-хендлером, то я так понимаю, что довольно скоро оно должно прийти уже в нормальный стек.
982.30 989.86 "Игорь Лабутин" Плюс на Линуксе поменялся набор алгоритмов, которые используются для поддержки SSL, чуть-чуть он изменился в сторону более правильного security.
989.86 990.86 "Игорь Лабутин" Ну, в целом, все.
990.86 1003.90 "Игорь Лабутин" То есть, короче, много-много изменений, в основном улучшение небольших оптишек, как бы более удобно, чуть быстрее, чуть лучше мониторить, так что, ну, прям за Дотнет 5, Network Stack хорошо причесали, я бы сказал.
1003.90 1007.66 "Игорь Лабутин" И он должен быть прям хорош, с точки зрения перформанса и всего остального.
1007.66 1008.66 "Анатолий Кулаков" Отлично.
1008.66 1014.10 "Анатолий Кулаков" Network Stack - это всегда отличная база для оптимизации, потому что используется очень многими приложениями.
1014.10 1022.74 "Анатолий Кулаков" Ну что ж, начало года очень многие команды подводят какие-то итоги, а также делают планы, делают планы на будущие продукты, на будущие версии.
1022.74 1026.66 "Анатолий Кулаков" И не исключением стала команда System Text JSON.
1026.66 1032.30 "Анатолий Кулаков" То есть, народ, который пишет новый сериализатор JSON-овский для Дотнета.
1032.30 1045.30 "Анатолий Кулаков" Я кратко напомню, что System Text JSON, он был призван заменить высокопопулярный Newton Soft JSON, и с успехом это сделал еще в Core, и теперь уже продолжает свое феноменальное шествие в Дотнет 5.
1045.30 1069.58 "Анатолий Кулаков" Главные фичи, почему был введен этот новый сериализатор, это мысль о перформансе, это мысль о том, что сериализатор должен быть очень быстрым, и, например, использование таких новомодных фич, как спаны, мемории, прямая работа с UTF-8 кодировкой, и все такое, что нужно обычному, нормальному, высокопроизводительному HTTP серверу, которым являлся Kestrel.
1069.58 1089.02 "Анатолий Кулаков" Команда JSON, System Text JSON, честно признавалась, что пыталась контрибьютить в Newton Soft JSON для того, чтобы все эти фичи туда протолкнуть, но это аффектило настолько сильно существующих пользователей, и настолько были большие breaking changes, что они решили от этого отказаться и все-таки написать свой сериализатор с нуля.
1089.02 1098.82 "Анатолий Кулаков" И вторая фича, которая заявляется, зачем вообще они начали это делать, это все-таки, чтобы избавить официальную сборку Microsoft из Planet Core от зависимости на Newton Soft JSON.
1098.82 1117.70 "Анатолий Кулаков" Это редко случается, но действительно Microsoft вместе со своими сборками поставлял третистороннюю библиотечку, которую использовал для децерализации и сериализации, и, соответственно, было очень много проблем с этим, много вопросов, у нас такой flow, каким образом теперь редиректить версии, как обновлять и прочее, прочее, прочее.
1117.70 1118.98 "Анатолий Кулаков" В общем, проблем было достаточно много.
1118.98 1120.62 "Анатолий Кулаков" Но теперь это все позади.
1120.62 1125.54 "Анатолий Кулаков" Теперь по умолчанию везде ISP NetCore использует новую библиотеку сериализации.
1125.54 1138.10 "Анатолий Кулаков" Кстати, один из самых популярных проблем, когда вы переходите на .NET Core в вашем ISP Net приложении, это то, что у вас перестают правильно сериализоваться, децерализовываться DTO-шки ваши, которые вы гоняете по сети.
1138.10 1144.14 "Анатолий Кулаков" И вот для как раз-таки таких случаев первым делом нужно возвращать Newton Soft JSON в ваш проект.
1144.14 1149.62 "Анатолий Кулаков" Это делается с помощью метода addNewtonSoftJSON у сервисов.
1149.62 1154.26 "Анатолий Кулаков" И, соответственно, ваши DTO-шки начнут заново сериализоваться, как и раньше, и постепенно уже начинать миграцию.
1154.26 1155.82 "Анатолий Кулаков" Ну, это все лирика.
1155.82 1162.98 "Анатолий Кулаков" Из интересного, что сообщила команда, это на какие уступки она прошла ради того, чтобы сохранить удобство использования.
1162.98 1167.74 "Анатолий Кулаков" Как я уже сказал, System Text JSON разрабатывался прежде всего для перформанса.
1167.74 1175.72 "Анатолий Кулаков" Но есть некоторые фишки, которые они отложили, перформансные фишки, для того, чтобы все-таки добавить удобства и правильного использования.
1175.72 1182.18 "Анатолий Кулаков" Например, раньше у них была специальная структура UTF-8 JSON Writer.
1182.18 1192.42 "Анатолий Кулаков" Эта специальная структура предназначена для того, чтобы оптимально записывать UTF-8 строки, не конвертируя их в UTF-16, что делает Newton Soft JSON.
1192.42 1196.26 "Анатолий Кулаков" И она раньше была RefStruct для того, чтобы сделать поменьше аллокаций.
1196.26 1213.50 "Анатолий Кулаков" Они ее изменили и сделали теперь классом, потому что со структурами очень сложно управляться, и какой-нибудь невнимательный пользователь, который будет этот Writer передавать в кучу своих хелперов, даже не заметит, как Writer породит кучу своих копий, и аллокация станет еще больше, по сути.
1213.50 1216.54 "Анатолий Кулаков" Они поэтому избавились от структуры и сделали его классом.
1216.54 1219.02 "Анатолий Кулаков" Еще одна интересная штука - это валидация.
1219.02 1229.10 "Анатолий Кулаков" Изначально сериализатор был написан с учетом того, что весь JSON-синтексис правильный, все UTF-коды правильные, и нам достаточно только распарсить.
1229.10 1238.54 "Анатолий Кулаков" Но, к сожалению, в современном мире, где у нас есть куча внешних сервисов, куча облачных сервисов, вам может прийти абсолютно любой JSON, и никто никогда его правильность гарантировать вам не будет.
1238.54 1241.62 "Анатолий Кулаков" Из-за этого им пришлось внедрить процесс валидации.
1241.62 1253.50 "Анатолий Кулаков" Они проверяют как UTF-8 валидацию, так и JSON-синтекс валидацию, и, соответственно, это немножко замедляет перформанс, но зато делает сериализатор более надежным, более юзабельным в различных ситуациях.
1253.50 1254.50 "Анатолий Кулаков" Куча экстеншн-поинтов.
1254.50 1262.58 "Анатолий Кулаков" Mutants of JSON славится своими экстеншн-поинтами, там можно настроить абсолютно все, что только захочется, нужно просто знать, куда копать и что конфигурить.
1262.58 1276.90 "Анатолий Кулаков" Новый сервизатор не настолько развисистый, у него, к счастью, не так много всяких ручек, он все-таки бледет вот эту грань, но он довольно настраиваемый, то есть куча экстеншн-поинтов у него тоже есть.
1276.90 1283.90 "Анатолий Кулаков" И тут проблема в том, что они замедляют ваш сервизатор даже если вы их не используете, даже если вы ничего не настраиваете.
1283.90 1295.78 "Анатолий Кулаков" Ну, просто потому что сервизатору необходимо пойти и проверить, есть ли там какие-то настройки, есть ли там какие-то переопределенные методы или какие-то переопределенные дикшенери, и полукапиться туда.
1295.78 1300.22 "Анатолий Кулаков" То есть наличие экстеншн-поинтов - это тоже такой перформанс-деградация,
1300.22 1312.82 "Игорь Лабутин" можно сказать. В целом получается, что вроде как, с одной стороны, сервизатор хорош, и в нем много чего полезного, а с другой стороны, наверняка там еще огромное количество работы, чтобы добиться всего того, что поддерживал Ньютон Софт Джейсон.
1312.82 1317.50 "Игорь Лабутин" Ты сам сказал, что если у вас DTOшки не сериализуются, верните Ньютон Софт Джейсон.
1317.50 1329.02 "Анатолий Кулаков" Да, действительно, но команда решила, что она не будет просто сломя голову поддерживать все то, что поддерживал старый сервизатор, потому что действительно она тогда очень много потеряет и очень сильно просядет.
1329.02 1336.34 "Анатолий Кулаков" Поэтому, кстати, по бенчмаркам она и так в среднем где-то раза в два, все бенчмарки быстрее, чем Ньютон Софт
1336.34 1341.30 "Игорь Лабутин" Джейсон. И есть ли какие-то планы на DotNet 6?
1341.30 1350.94 "Игорь Лабутин" Наверняка какие-то DotNet 6 фичи точно будут использоваться, и мы точно можем рассказать какой-то кусочек того, что команда пытается запланировать на DotNet 6.
1350.94 1351.94 "Анатолий Кулаков" Да, обязательно.
1351.94 1362.66 "Анатолий Кулаков" Сервизатор не стоит на месте, у него запланирована куча улучшений, и один из самых многообещающих путей - это подключение C# с Source-генераторов.
1362.66 1374.94 "Анатолий Кулаков" Как мы уже много раз обсуждали, вместе с DotNet 5 вышли Source-генераторы, они довольно мало фич вокруг себя предоставили, то есть это была такая чисто инфраструктурная штука, которая мало что обещала нам.
1374.94 1382.14 "Анатолий Кулаков" Какие-то самплы у Микрософта, конечно, были, но, естественно, это все мелочи по сравнению с тем, что нас ждет в будущем.
1382.14 1384.46 "Анатолий Кулаков" И вот постепенно это будущее приходит.
1384.46 1390.90 "Анатолий Кулаков" Инфраструктура есть, теперь на этой инфраструктуре практически все команды в Микрософте начнут делать магию.
1390.90 1392.38 "Анатолий Кулаков" А магия заключается в следующем.
1392.38 1403.82 "Анатолий Кулаков" JSON-сериализатор теперь планируют не собирать в момент рантайма, не бегать рефлекшенами, не искать переопределения, не читать атрибуты, а генерить.
1403.82 1405.38 None Генерить в compile-time.
1405.38 1418.14 "Анатолий Кулаков" Действительно, если мы знаем, что у нас сериализуется какая-то конкретная модель, у этой модели строгие типы, строгие названия полей, она никуда меняться не собирается, то довольно глупо в рантайме рефлекшеном искать ее поля.
1418.14 1427.50 "Анатолий Кулаков" Вот они нам все известны, давайте просто запустим генератор, сгенерируем под эти определенные поля, под эти определенные типы, под конвертации, сгенерируем просто строго типизированный сериализатор.
1427.50 1431.42 "Анатолий Кулаков" И будем использовать его напрямую, как будто тот код, который мы написали руками.
1431.42 1453.82 "Анатолий Кулаков" Нужно сказать, что фича не новая, потому что существующий XML-сериалайзер так делал еще со времен ранних дотнетов, но с помощью специальной отдельной внешней утилитки вы могли натравить ее на вашу модельку, и она для вас сгенерировала бы длл, в которой содержался именно тот самый строго типизированный сгенерированный сериализатор, и многие проекты добивались хорошего перформанса с помощью этого пути.
1453.82 1460.78 "Анатолий Кулаков" Вот теперь же мы это все должны получить абсолютно прозрачно, прямо из коробки, и это сулит нам очень много бенефитов.
1460.78 1462.86 "Анатолий Кулаков" Такие, как, например, стартап-импрувмент.
1462.86 1468.94 "Анатолий Кулаков" Естественно, мы будем теперь стартовать быстрее, нам не нужно будет рефлекшеном собирать какие-то атрибуты с наших моделек, этого всего нам не нужно.
1468.94 1485.62 "Анатолий Кулаков" Дальше мы в рантайме тоже наши данные будем децертилизовать быстрее, потому что мы точно знаем, каких типов ожидать, точно знаем, какие полей ждать, никаких других каких-то проверок или лукапов в дикшенере с именами, с резоломным спейсом их уже не будет.
1485.62 1492.78 "Анатолий Кулаков" Когда мы обсуждали генератор, мы говорили, что от генератора очень хорошо выиграет любой код, который сильно использует рефлекшен.
1492.78 1499.18 "Анатолий Кулаков" И в частности, у нас есть еще один утилитка, еще один союзник, который от этого выигрывает.
1499.18 1500.18 "Анатолий Кулаков" Это линкер.
1500.18 1508.30 "Анатолий Кулаков" Линкер - это специальный инструмент, который определяет, какой код у вас сейчас используется для того, чтобы дальше можно было с ним что-то сделать.
1508.30 1509.90 "Анатолий Кулаков" Например, выкинуть неиспользуемый код.
1509.90 1514.38 "Анатолий Кулаков" И линкеру довольно сложно было работать, если в вашем приложении использовался рефлекшен.
1514.38 1518.46 "Анатолий Кулаков" Он, соответственно, не мог предсказать какие-то сложные вещи.
1518.46 1526.58 "Анатолий Кулаков" Допустим, что сейчас аж код идет в сеть, загружает откуда-то какую-то дейлельку, в этой дейлельке хранятся модели, и он эти модели сейчас будет децертилизовывать.
1526.58 1530.82 "Анатолий Кулаков" Вот линкеру это сразу обрубало абсолютно все его фичи.
1530.82 1541.06 "Анатолий Кулаков" Соответственно, если мы отказываемся от рефлекшена, весь код становится статическим, линкер без проблем его анализирует и сможет безболезненно внедрять какие-то оптимизации.
1541.06 1542.98 "Анатолий Кулаков" Например, то же самое выкидывание кода.
1542.98 1553.70 "Анатолий Кулаков" Также выкидывание кода у нас может очень сильно сократить размер самого приложения, потому что большая часть каких-то, даже того же самого сериалайзера, она может даже не использоваться совсем.
1553.70 1561.82 "Анатолий Кулаков" Вот такие первые шаги, которые уже видны, мы сможем увидеть в будущих сериализаторах.
1561.82 1568.86 "Анатолий Кулаков" Эта разработка уже активно ведется, и все эти генераторы можно попробовать посмотреть в экспериментальной ветке на GitHub.
1568.86 1570.66 "Игорь Лабутин" Да, но это не все улучшения.
1570.66 1573.58 "Игорь Лабутин" Есть еще ряд фич, которые запланированы в DotNet 6.
1573.58 1585.66 "Игорь Лабутин" Во-первых, это более качественная поддержка полиморфной сериализации DSerialization, то есть возможность сериализации дерева объектов с учетом наследников, реализации интерфейсов, абстрактных базовых классов и так далее.
1585.66 1589.46 "Игорь Лабутин" Она сейчас в каком-то базовом виде есть, но это все будет расширяться.
1589.46 1603.30 "Игорь Лабутин" Единственное, что в GitHub Issues, где это все обсуждается, сказано, что это скорее всего будет Opt-in Behavior, то есть по умолчанию будет все работать как в DotNet 5, но можно будет включить там специальным аргументом конструктора режим, когда он будет...
1603.30 1613.06 "Игорь Лабутин" Допустим, если вы в сериалайзер его типизировали каким-то базовым типом, а передали объект наследника, то он будет сериализовывать вообще все поля с учетом наследований и так далее.
1613.06 1617.70 "Игорь Лабутин" Вторая, или уже третья, получается по счету большая фича - это поддержка динамиков.
1617.70 1629.06 "Игорь Лабутин" Внезапно динамик все еще хорошо используется, есть кастомеры, которые активно его используют, и сериализация в динамик, она прям нужна и важна и в, и из динамика.
1629.06 1633.78 "Игорь Лабутин" И может быть, действительно, это какой-то такой удобный способ представить произвольный JSON, не заморачиваясь.
1633.78 1636.10 "Игорь Лабутин" Так что эту фичу тоже пилят.
1636.10 1642.58 "Анатолий Кулаков" Я хотел бы допомнить, что многие, наверное, могли пропустить вот этот хайп динамиков, который у нас был, то есть для чего это вообще нужно.
1642.58 1653.74 "Анатолий Кулаков" И наверняка в современных приложениях это мало встречается на практике, но динамики применялись не только для того, чтобы писать какие-то скриптовые оболочки, какие-то скриптовые языки.
1653.74 1656.70 "Анатолий Кулаков" У динамика очень много было интересных побочных эффектов.
1656.70 1659.34 "Анатолий Кулаков" В частности, один из эффектов - это билдеры.
1659.34 1682.90 "Анатолий Кулаков" Например, если вам сейчас нужно построить какой-то сложный JSON-документ без модельки, а вот просто из тех данных, которые у вас есть, вам бы пришлось делать вещи наподобие там New JSON Document, Add JSON Element, Add JSON String, Add JSON Int и вот прочие такие вещи, которые слишком многословные и слишком невыразительные, и очень сложно такой код читать и поддерживать и так далее.
1682.90 1693.14 "Анатолий Кулаков" И, соответственно, динамики предлагают другой совершенно способ, когда вы просто берете документ и начинаете записывать в этот документ поля, как будто пишете в настоящую модель.
1693.14 1696.06 "Анатолий Кулаков" Ну, естественно, никакой модели под капотом у вас нет.
1696.06 1701.38 "Анатолий Кулаков" То есть вы пишете "документ.name = Вася", "документ.age = 23".
1701.38 1709.82 "Анатолий Кулаков" И все эти поля динамически диспатчатся и автоматически превращаются в Add элементы, в Add стринги, в Add инты и так далее.
1709.82 1713.14 "Анатолий Кулаков" Код получается абсолютно такой же, как будто вы инициализируете какой-то объект.
1713.14 1715.46 "Анатолий Кулаков" То есть читаемо, красиво, удобно.
1715.46 1719.90 "Анатолий Кулаков" И это очень много использовалось, например, в XML сериализации.
1719.90 1721.74 "Анатолий Кулаков" Стандартные библиотеки такие есть.
1721.74 1726.82 "Анатолий Кулаков" На этом принципе построена абсолютно вся сериализация, например, в PowerShell, что безумно удобно.
1726.82 1734.14 "Анатолий Кулаков" И я надеюсь, что в JSON тоже такой подход будет удобен и одновременно быстр.
1734.14 1741.38 "Игорь Лабутин" Да, но при этом для любителей, как ты говоришь, писать Add Int и всяких таких штук, они хотят еще сделать Immutable JSON DOM.
1741.38 1749.66 "Игорь Лабутин" То есть сейчас можно диссериализовать JSON в JSON Document, который будет редулен для представления этого JSON, по нему как-то побегать и так далее.
1749.66 1750.94 "Игорь Лабутин" Но его нельзя менять.
1750.94 1758.38 "Игорь Лабутин" А хотят сделать, как в Unicorn Soft JSON, все эти JRA и прочие такие штуки, которые можно просто менять.
1758.38 1760.54 "Игорь Лабутин" И потом, допустим, диссериализовать обратно.
1760.54 1764.22 "Игорь Лабутин" То есть вы сможете диссериализовать что-то, поменять одно значение и сериализовать обратно.
1764.22 1766.62 "Игорь Лабутин" В принципе, сценарий понятный, но вот над этим работаю.
1766.62 1777.86 "Игорь Лабутин" И есть еще огромная куча всяких мелких улучшений, то есть поддержка IOSync Enumerable, поддержка изменения опций JSON Serializer Options, чтобы можно было менять.
1777.86 1781.18 "Игорь Лабутин" Нативная поддержка Time Spans, чтобы они корректно сериализовались.
1781.18 1783.58 "Игорь Лабутин" Очень удобно для настроек будет, я считаю.
1783.58 1786.90 "Игорь Лабутин" Распаршивание JSON в существующий объект.
1786.90 1793.06 "Игорь Лабутин" Тоже, наверное, удобно во всяких сценариях, когда вам нужно из JSON-чика дополнить значение существующего объекта.
1793.06 1794.06 "Игорь Лабутин" Можно будет такое сделать.
1794.06 1797.18 "Игорь Лабутин" Сериализация и диссериализация в стримы синхронно.
1797.18 1798.74 "Игорь Лабутин" Поддержка Non-Public Members.
1798.74 1800.70 "Игорь Лабутин" Это, мне кажется, тоже важно.
1800.70 1802.50 "Игорь Лабутин" И поддержка JSON Path.
1802.50 1805.86 "Игорь Лабутин" Это, я так понимаю, некоторый аналог XPath, но для JSON.
1805.86 1820.18 "Игорь Лабутин" Так что по итогу через год, ну меньше, чем через год, к концу этого года, к ноябрю, System Text JSON должен стать прям ну очень удобным и, наверное, гораздо больше заменой Newton Soft JSON, чем он есть сейчас.
1820.18 1821.18 "Игорь Лабутин" Да, безусловно.
1821.18 1828.86 "Анатолий Кулаков" Ну что ж, а планы на свои будущие проекты есть не только у команды по JSON-сериализации.
1828.86 1832.94 "Анатолий Кулаков" Также я опубликовал статью о будущих планах команда Entity Framework.
1832.94 1835.74 "Игорь Лабутин" Да, и она, надо сказать, довольно-таки амбициозна.
1835.74 1841.82 "Игорь Лабутин" То есть, зная, что команда Entity Framework довольно небольшая, для меня эти планы выглядят весьма амбициозно.
1841.82 1843.30 "Игорь Лабутин" Ну давайте опять же быстро пробежимся.
1843.30 1846.66 "Игорь Лабутин" Есть раздел, называемый High Requested Features.
1846.66 1848.66 "Игорь Лабутин" Это то, что от них все просят.
1848.66 1852.46 "Игорь Лабутин" И туда попали совершенно, микс совершенно разных вещей.
1852.46 1854.66 "Игорь Лабутин" Во-первых, туда попали SQL Server Temporal Tables.
1854.66 1863.30 "Игорь Лабутин" Это такие специальные таблицы, где можно узнать у таблицы не только текущее значение записи в таблице, но и какие значения там были.
1863.30 1866.70 "Игорь Лабутин" То есть, некоторый такой не совсем time-serious, но что-то
1866.70 1870.14 None похожее на это. Вот и будет натирана поддержка VF Core.
1870.14 1871.14 "Анатолий Кулаков" Да?
1871.14 1872.78 "Анатолий Кулаков" И это с историческими значениями, да?
1872.78 1875.06 "Анатолий Кулаков" Я могу запросить, какие значения у него были вчера,
1875.06 1877.06 "Игорь Лабутин" например. Типа того.
1877.06 1878.06 "Игорь Лабутин" Я не пользовал, детально не знаю.
1878.06 1883.90 "Игорь Лабутин" Это, по-моему, какая-то относительно новая фишка, ну, может быть, не последнего SQL Server, но недавних.
1883.90 1887.02 "Игорь Лабутин" Поэтому я еще не успел этого попользоваться, и не факт, что буду.
1887.02 1888.70 "Игорь Лабутин" Но вот High Requested Features.
1888.70 1890.34 "Игорь Лабутин" Вторая фича, она понятна.
1890.34 1891.66 "Игорь Лабутин" Это JSON columns.
1891.66 1894.58 "Игорь Лабутин" Они уже поддержаны для Postgres и для MySQL.
1894.58 1898.14 "Игорь Лабутин" Соответственно, они будут поддержаны для SQL Server и SQLite.
1898.14 1899.14 "Игорь Лабутин" Ну тут все как бы очевидно.
1899.14 1901.62 "Игорь Лабутин" И JSON columns сейчас наверняка очень популярны.
1901.62 1906.30 "Игорь Лабутин" Хранить JSON прямо в базе и по возможности из него даже кверки дестроить.
1906.30 1907.30 "Игорь Лабутин" Ну, в общем.
1907.30 1908.30 "Анатолий Кулаков" Погоди, погоди.
1908.30 1915.34 "Анатолий Кулаков" Мне не очень очевидно, каким образом Microsoft Entity Framework поддерживает Microsoft SQL Server после Postgres.
1915.34 1916.94 "Анатолий Кулаков" Это что за беспредел?
1916.94 1920.62 "Игорь Лабутин" Я так понимаю, что EF Core более-менее все равно.
1920.62 1926.14 "Игорь Лабутин" Как это, ну, в ядре EF Core это более-менее прозрачно сделано.
1926.14 1928.06 "Игорь Лабутин" А дальше вопрос драйверов и адаптеров.
1928.06 1937.06 "Игорь Лабутин" И, как известно, один из разработчиков EF Core является также главным мейнтренером Postgres SQL Driver для EF Core.
1937.06 1939.62 "Игорь Лабутин" И он, видимо, там это реализовал раньше.
1939.62 1940.62 "Игорь Лабутин" Ну, так получилось.
1940.62 1942.14 "Игорь Лабутин" Microsoft - компания большая.
1942.14 1944.26 "Игорь Лабутин" Третья фича, она какая-то совсем маленькая.
1944.26 1946.26 "Игорь Лабутин" Это column attribute order.
1946.26 1951.46 "Игорь Лабутин" То есть, это просто возможность при создании таблиц указать ее порядок в колонке.
1951.46 1956.90 "Игорь Лабутин" То есть, когда вы задаете табличку, создаете табличку, в колонке теперь можно явно указать порядок.
1956.90 1958.46 "Игорь Лабутин" Почему-то все это очень хотели.
1958.46 1961.06 "Игорь Лабутин" Это важная штука, ну ты что, это же эстетическая прелесть.
1961.06 1962.06 "Игорь Лабутин" Да, но...
1962.06 1963.06 "Игорь Лабутин" Ну, наверное.
1963.06 1964.06 "Игорь Лабутин" Ладно, не знаю.
1964.06 1968.46 "Игорь Лабутин" Ну, указывайте в селекте в нужном вам порядке и будет хорошо.
1968.46 1969.78 "Игорь Лабутин" Какая разница, как оно на базе лежит.
1969.78 1974.86 "Анатолий Кулаков" Ты когда классы свои объявляешь, ты задумываешься о том, какое поле у тебя будет первее, а какое вторее?
1974.86 1980.22 "Анатолий Кулаков" Или ты уже при селекте, при модификации, все равно ты их там повторяешь?
1980.22 1982.34 "Анатолий Кулаков" Зачем ты их в декларации думаешь о их порядке?
1982.34 1984.82 "Игорь Лабутин" Поэтому и придумали рекорды, где не надо уже париться.
1984.82 1985.82 "Игорь Лабутин" Там тоже есть порядок?
1985.82 1988.26 "Игорь Лабутин" Ну, есть, но он в одном месте указан, и все.
1988.26 1992.74 "Игорь Лабутин" А не так, что у меня там в конструкторе в одном порядке, в том же порядке обязательно внутри класса.
1992.74 1995.18 "Игорь Лабутин" Вспомнить, кто там первый, паблик или прайват.
1995.18 1997.78 "Игорь Лабутин" Ну, в общем, там как бы можно много о чем подумать.
1997.78 1998.78 "Игорь Лабутин" Ну, в общем, короче.
1998.78 1999.78 "Игорь Лабутин" Подожди.
1999.78 2001.06 "Анатолий Кулаков" А что там у нас с производительностью?
2001.06 2003.34 "Игорь Лабутин" Это быстро, можно, когда-нибудь будет или нет?
2003.34 2004.34 "Игорь Лабутин" Будет.
2004.34 2007.42 "Игорь Лабутин" Уже сейчас в EF Core есть некоторая, скажем так, инфраструктура
2007.42 2014.02 None вокруг производительности, они все это меряют. Но есть несколько вещей, которые они ставят себе целью на этот релиз.
2014.02 2023.62 "Игорь Лабутин" Во-первых, они хотят сделать фишу под названием Compiled Models, то есть, опять же, немножко избавиться от рефлекшена и возможности что-то скомпилировать заранее.
2023.62 2027.66 "Игорь Лабутин" Сору с генераторами или еще чем-то, но, в общем, поменьше рефлекшен.
2027.66 2030.78 "Игорь Лабутин" Вторая штука - это наш любимый Tech Empower.
2030.78 2038.50 "Игорь Лабутин" ASP.NET Core там где-то круто и прикольно всех рвет, ну или не всех, но в общем, команда ASP.NET Core над этим активно работает.
2038.50 2045.10 "Игорь Лабутин" EF Core тоже хочется, есть такой тест, Tech Empower Fortions, где соревнуются различные ORM-ки.
2045.10 2049.94 "Игорь Лабутин" И цель сейчас такая, она очень простая - догнать даппер.
2049.94 2058.86 "Игорь Лабутин" Потому что сейчас лучше всего показывает себя, ну на микрософтском стеке это ADONET, чистый, следующим идет даппер и следующим там где-то плетется в хвосте EF Core.
2058.86 2059.86 "Игорь Лабутин" Цель - догнать даппер.
2059.86 2064.94 "Игорь Лабутин" Они сами говорят, что цель довольно амбициозная и возможно ее не получится добиться, но они будут стараться.
2064.94 2076.94 "Игорь Лабутин" И последняя штука, она может быть даже не столько про перформанс, сколько про ограничение платформ, но она неизбежно приведет к некоторым улучшениям перформанса - это поддержка линкера и поддержка ahead of time compilation.
2076.94 2085.30 "Игорь Лабутин" Потому что для некоторых платформ типа iOS невозможно использовать Reflexio, ну Reflexio можно, но генерить код в рантайме вы не будете, вам нельзя.
2085.30 2093.90 "Игорь Лабутин" Поэтому какие-то вещи надо делать ahead of time и поскольку мы все сильно cross-платформены и идем на все возможные устройства, то как бы давайте будем думать заранее.
2093.90 2098.94 "Игорь Лабутин" Но они честно говорят, что это будет только начало работы и скорее всего в DotA 2.6 они все не успеют.
2098.94 2100.42 "Игорь Лабутин" Так, это был перформанс.
2100.42 2103.94 "Игорь Лабутин" Если мы говорим про EF Core, то конечно нельзя забыть про миграции.
2103.94 2110.50 "Игорь Лабутин" Одна из ключевых вещей EF Core, про то, как вообще поддерживать базу данных в актуальном состоянии и соответствовать вашим кодам.
2110.50 2121.50 "Игорь Лабутин" Они собираются сделать штуку под названием migration bundles, то есть просто некоторую возможность генерить абсолютно стендаловым приложение, которое сможет проапгрейдить вашу базу.
2121.50 2134.58 "Игорь Лабутин" Если, например, ваша база лежит где-то на отдельном сервере и вы хотите ее проапгрейдить независимо от апгрейда вашего основного приложения, то вы сможете это сделать, генерить просто ту лу, которую запустив, проапгрейдит вашу базу.
2134.58 2135.58 "Игорь Лабутин" Мне кажется, удобная штука.
2135.58 2143.98 "Игорь Лабутин" А вторая вещь - это они вообще хотят в целом немножко посмотреть на миграции и сделать возможность их немножко менеджить.
2143.98 2156.78 "Игорь Лабутин" То есть сейчас, по моему опыту работы с EF и EF Core, миграции они как бы создаются, но возвращается ли кто-то когда-то к старым миграциям, чтобы проверить вообще, что там было сделано, не сделано, как бы поправить возможно что-то.
2156.78 2157.78 "Игорь Лабутин" Кажется, что не очень.
2157.78 2164.46 "Игорь Лабутин" А по-хорошему, те старые миграции могли использовать там AP-шки EF Core, которые там то устаревают, то еще что-то.
2164.46 2173.62 "Игорь Лабутин" Ну, в общем, как-то все это неправильно подумали они и сказали, что они будут думать над тем, как бы сделать возможность упростить набор миграций.
2173.62 2185.70 "Игорь Лабутин" То есть придумают, как сделать squash, то есть объединение нескольких миграций в одну, перегенерировать то, что они называют clean model, возможно, заменять AP-шки на более актуальные в старых миграциях.
2185.70 2188.94 "Игорь Лабутин" Короче, какая-то работа вокруг миграций будет интересна.
2188.94 2189.94 "Игорь Лабутин" Feature set.
2189.94 2198.22 "Игорь Лабутин" Это все были какие-то такие, ну кроме highly requested features первого раздела, остальное это было все такие виртуальные вещи, которые напрямую на feature set не влияют.
2198.22 2199.66 "Игорь Лабутин" Теперь уже конкретно про фичи.
2199.66 2207.66 "Игорь Лабутин" Во-первых, они хотят добиться абсолютного равенства с точки зрения возможностей по сравнению с Entity Framework 6, полноценной версией.
2207.66 2213.58 "Игорь Лабутин" Известно, что часть вещей из Entity Framework 6 в EF Core не поддержана, вот эту разницу собираются убрать целиком.
2213.58 2216.82 "Игорь Лабутин" Вторая вещь - это поддержка value objects.
2216.82 2222.18 "Игорь Лабутин" Прям вот они явно пишут для того, чтобы получше поддерживать сценарии domain-driven дизайна.
2222.18 2237.02 "Игорь Лабутин" Скорее всего, речь идет про то, что те конверторы и те штуки, которые сейчас создаются, они практически всегда завязаны на какой-то identity, колоночку, которая привязывается к базе обязательно, ключик и primary keys.
2237.02 2249.90 "Игорь Лабутин" Вот они как-то все будут пересматривать, чтобы была возможность создавать value objects, которые являются собственно value objects, они являются чем-то из мира конкретно Entity Framework, где торчат уши Entity Framework.
2249.90 2252.06 "Игорь Лабутин" Поддержка Cosmos DB, она есть.
2252.06 2254.62 "Игорь Лабутин" Это туда же вот как-то спрашивал про SQL Server.
2254.62 2261.66 "Игорь Лабутин" Cosmos DB - это продукт Microsoft, там далеко не все фичи поддержаны, они сейчас собирают input про то, какие фичи вы там хотите больше всего.
2261.66 2262.66 "Игорь Лабутин" Ну, мы их поддержим.
2262.66 2264.78 None Тут пока только такие планы.
2264.78 2269.18 "Игорь Лабутин" Следующая штука - это expose model building conventions для приложений.
2269.18 2277.26 "Игорь Лабутин" То есть, есть сейчас некоторые конвенции, как они байдят модельки, то есть, как они конвертят чиселки, строчки, даты, еще что-то.
2277.26 2294.14 "Игорь Лабутин" Теперь все это можно будет, скажем так, переопределить или зарыться в это приложение и подключить какие-то свои алгоритмы, свои конвеншины для каких-то, возможно, ваших кастомных форматов, чтобы правильно в ваши объекты это все байдилось еще на уровне байдинга модели.
2294.14 2296.10 "Игорь Лабутин" И последнее - это называется fixbox.
2296.10 2306.06 "Игорь Лабутин" Они собираются к концу релиза .NET 6, ну, они по сути будут релизиться вместе с .NET 6 в ноябре этого года, достичь то, что называется zero bug balance.
2306.06 2313.10 "Игорь Лабутин" Это означает, что к моменту релиза у них не будет в репозитории открытых багов, которые чем-то не заблокированы.
2313.10 2317.50 "Игорь Лабутин" То есть, не должно быть ситуации, что на фикс какого-то бага просто не хватило времени.
2317.50 2319.30 "Игорь Лабутин" Они собираются закрыть их все.
2319.30 2322.50 "Игорь Лабутин" Это прям такое очень смелое, мне кажется, заявление.
2322.50 2325.38 "Игорь Лабутин" Я пока еще не видел проекты, где бы смогли такого достичь.
2325.38 2327.14 "Игорь Лабутин" Но видимо они что-то про себя знают.
2327.14 2331.06 "Анатолий Кулаков" Звучит невероятно, тем более, что команда у них небольшая.
2331.06 2336.62 "Анатолий Кулаков" То есть, наверняка придется нанимать третьего сотрудника, чтобы пилить фреймворк.
2336.62 2340.02 "Игорь Лабутин" И четвертого, который будет фиксить баги, которые в .NET 5 версии.
2340.02 2341.86 "Анатолий Кулаков" Которые первые три наплодили, да.
2341.86 2344.22 "Игорь Лабутин" Ну, в общем, не знаю, будем следить, интересно.
2344.22 2346.14 "Игорь Лабутин" К ноябрю расскажем, чем все закончилось.
2346.14 2352.46 "Игорь Лабутин" Помимо непосредственно работы над E-Entity Framework Core, команда занимается еще и смертными областями.
2352.46 2359.78 "Игорь Лабутин" Во-первых, они пилят общими усилиями вместе с другими командами Microsoft улучшение в сборку систем дата.
2359.78 2368.66 "Игорь Лабутин" Там идет большая работа по улучшению диагностики, по поддержке новых API, бетчинга, то есть отправки нескольких запросов сразу в сервер.
2368.66 2373.82 "Игорь Лабутин" Это то самое, почему в SQL Server какие-то фичи не поддержаны, которые поддержаны в Postgres.
2373.82 2380.70 "Игорь Лабутин" Драйвер в Postgres пилится одним-двумя людьми, а систем дату, по сути, это драйвер в некотором смысле.
2380.70 2389.18 "Игорь Лабутин" Прословочка между драйвером EF Core и SQL Server, там прям дофига народу, заинтересованы много команд, но много кто от него и зависит, поэтому изменения не очень.
2389.18 2395.90 "Игорь Лабутин" И они проаннотируют весь E-Entity Framework на Label Reference Type, это мы будем к следующему ревизу иметь полное, по их мнению, покрытие.
2395.90 2399.70 "Игорь Лабутин" Уже там сейчас что-то есть, насколько я помню, но будет полное.
2399.70 2400.70 "Игорь Лабутин" Давно пора.
2400.70 2407.86 "Игорь Лабутин" И вот мы перечислили уже огромное количество вещей для небольшой команды, но еще у них есть временные эксперименты и исследования.
2407.86 2409.86 "Игорь Лабутин" Это прям вообще шибись.
2409.86 2416.50 "Игорь Лабутин" Во-первых, сейчас идет работа над таким продуктом, проектом, не знаю, библиотекой под названием SQL Server.Core.
2416.50 2424.66 "Игорь Лабутин" Это, я так понимаю, некоторые, ну как EF Core - это аналог E-Entity Framework, только там open-source и новые, написанные с нуля.
2424.66 2431.58 "Игорь Лабутин" Также SQL Server Core - это некоторый аналог, я так понимаю, что-то типа System Data или в общем каких-то таких.
2431.58 2437.86 "Игорь Лабутин" Adunet-like библиотек, но для SQL Server и тоже open-source, чтобы избавиться от всего старого наследия.
2437.86 2441.50 "Игорь Лабутин" Пока это все эксперименты, но там какая-то работа ведется.
2441.50 2443.18 "Игорь Лабутин" И они хотят посмотреть на GraphQL.
2443.18 2456.34 "Игорь Лабутин" Понятно, что GraphQL довольно сильно завязан на доступ к базе, потому что по сути в GraphQL четко написано, что нужно клиенту и в принципе, если научиться мапить GraphQL прямо на Entity Framework Core, будет вообще почти ненужная бизнес-логика.
2456.34 2457.34 "Игорь Лабутин" Наверное.
2457.34 2466.38 "Игорь Лабутин" Но вот в общем они как-то смотрят на то, что им может дать GraphQL, что они могут дать GraphQL и как вообще они с ним связаны и нужно ли в эту сторону копать.
2466.38 2468.82 "Игорь Лабутин" Вот такие планы у команды Entity Framework.
2468.82 2470.86 "Игорь Лабутин" Я бы сказал, сильно грандиозные.
2470.86 2473.26 "Анатолий Кулаков" Да, будем посмотреть.
2473.26 2476.10 "Анатолий Кулаков" Интересно понаблюдать за такими бравыми спецмерчиками.
2476.10 2481.86 "Анатолий Кулаков" А пока некоторые строят планы, другие выпускают релизы.
2481.86 2488.54 "Анатолий Кулаков" И совсем недавно, тут буквально после Нового года практически, вышла новая версия Identity Server, версии 5.
2488.54 2490.74 "Анатолий Кулаков" Но под странным названием Dune.
2490.74 2492.10 "Анатолий Кулаков" Игорь, как это читают?
2492.10 2497.26 "Игорь Лабутин" Я бы это читал Duende, но я не знаю, как это официально читается.
2497.26 2498.26 "Игорь Лабутин" Будем читать Duende.
2498.26 2499.98 "Анатолий Кулаков" Прежде всего обращаюсь к авторам.
2499.98 2503.78 "Анатолий Кулаков" Выгоните к чертовой матери вашего маркетолога, который придумывал вам имена.
2503.78 2507.34 "Игорь Лабутин" Я тебя боюсь огорчить, но придумывали это как раз таки авторы.
2507.34 2511.74 "Игорь Лабутин" У них был блог-пост, где они объясняют, почему они выбрали именно такое имя.
2511.74 2514.26 "Анатолий Кулаков" Уже уважаемые авторы, вот себя не выгоняйте.
2514.26 2517.42 "Анатолий Кулаков" Ладно, давай, будем учиться разговаривать на извращенном английском.
2517.42 2519.94 "Анатолий Кулаков" Расскажи нам, что интересного завезли в версию 5?
2519.94 2522.22 "Анатолий Кулаков" И почему он вообще так странно называется, напомни.
2522.22 2526.70 "Игорь Лабутин" Ну да, мы про это говорили, где-то это был, по-моему, октябрь или ноябрь прошлого года.
2526.70 2537.70 "Игорь Лабутин" Авторы Identity Server, Доминик Бауэр и я простите, не помню, кто второй, решили, что как-то Identity Server V4, он используется ну прям в огромном количестве софта.
2537.70 2544.82 "Игорь Лабутин" Это по сути де-факто стандарт реализации OpenID Connect, OAuth и прочих смежных протоколов.
2544.82 2546.82 "Игорь Лабутин" Пока далеко не ушли, второй Брукалин.
2546.82 2547.82 "Игорь Лабутин" Брукалин, да, спасибо.
2547.82 2560.82 "Игорь Лабутин" И поняв, что в общем-то это все живет в огромном количестве софта, они тратят на поддержку и работу над Identity Server огромное количество времени, но при этом денег как-то это дело не сильно приносит.
2560.82 2571.22 "Игорь Лабутин" То есть не получается сделать так, чтобы вроде и полноценно работаешь над Identity Server, чего им очень хотелось по их собственным словам, и при этом жить-то как-то все-таки получается.
2571.22 2576.58 "Игорь Лабутин" Чтобы это все совместить, они приняли решение сделать компанию, которая будет продавать Identity Server.
2576.58 2582.90 "Игорь Лабутин" И сейчас политика такая, что Identity Server V4, он бесплатен, он опенсурстный, и как был, так и остается.
2582.90 2584.66 "Игорь Лабутин" Его можно свободно использовать где угодно.
2584.66 2587.58 "Игорь Лабутин" А вот для Identity Server V5 теперь новые правила.
2587.58 2593.30 "Игорь Лабутин" Если вы опенсурс продукт, то вы можете использовать Identity Server V5 как и раньше, четверочку.
2593.30 2596.46 "Игорь Лабутин" А вот если вы коммерческая компания, то теперь нужно заплатить за лицензию.
2596.46 2598.70 "Игорь Лабутин" Там есть какие-то разные уровни лицензирования.
2598.70 2602.90 "Игорь Лабутин" Но смысл в том, что теперь за Identity Server V5 нужно платить денежку.
2602.90 2606.06 "Игорь Лабутин" Ну вы получаете платный саппорт, обновление, ну в общем прям все как положено.
2606.06 2609.50 "Игорь Лабутин" Ну а авторы получают денежку и могут работать полноценно над продуктом.
2609.50 2610.86 "Игорь Лабутин" Ну это было в прошлом году.
2610.86 2612.58 "Игорь Лабутин" А что же нас ждет в этом?
2612.58 2615.66 "Игорь Лабутин" Ждет пока непонятно, планов пока не обозначено.
2615.66 2619.14 "Игорь Лабутин" Но V5 уже вышел, то есть всего это заняло не так много времени.
2619.14 2621.58 "Игорь Лабутин" И там три основных, в общем-то, больших фичи.
2621.58 2629.62 "Игорь Лабутин" Во-первых, оттуда сделали поддержку дотнет 5, то есть завезли всякие ноулбл, референсы, ну в общем перевели короче продукт на дотнет 5.
2629.62 2632.86 "Игорь Лабутин" Он теперь его полноценно поддерживает, так что можно использовать смело.
2632.86 2635.74 "Игорь Лабутин" Вторая фича - это automatic key management.
2635.74 2644.34 "Игорь Лабутин" Не секрет, что для того, чтобы у вас работал OAuth, OpenID Connect и так далее, вам требуется энное количество всяких private key pair.
2644.34 2652.42 "Игорь Лабутин" То есть ключики для подписи токенов, ключики для подписи каких-нибудь других токенов, если у вас там еще разные какие-нибудь организации.
2652.42 2653.90 "Игорь Лабутин" Ну короче, ключей может быть море.
2653.90 2657.50 "Игорь Лабутин" Как минимум он должен быть один или два, я не помню, там минимальный набор.
2657.50 2659.46 "Игорь Лабутин" В общем, хотя бы один он у вас есть.
2659.46 2664.98 "Игорь Лабутин" А как только у вас есть пара private-public ключей, то возникает вопрос, а когда их менять.
2664.98 2673.62 "Игорь Лабутин" Ну они могут быть компрометированы, они могут быть выданы просто, особенно если они завернуты в сертификат, у сертификата может быть срок действия.
2673.62 2677.34 "Игорь Лабутин" В общем, хорошие практики security говорят, что ключи нужно менять.
2677.34 2681.54 "Игорь Лабутин" Менять их нужно регулярно и желательно это делать естественно автоматически, а не руками.
2681.54 2695.42 "Игорь Лабутин" Identity Server сам по себе уже в четвертой версии поддерживал это нативно, в смысле, что вы можете указать несколько ключей одновременно, указать какой из них главный и токены можно выдавать одним, а валидировать будут оба.
2695.42 2697.66 "Игорь Лабутин" Ну то есть, короче, сама поддержка механики есть.
2697.66 2702.42 "Игорь Лабутин" Но механизм самообновления, он предполагался в реализации стороннее.
2702.42 2706.34 "Игорь Лабутин" То есть вы, как автор приложения, пишете некоторую реализацию этого RollingKey алгоритма.
2706.34 2716.82 "Игорь Лабутин" Очевидно, что делали это очень мало народу и это не очень хорошо для security, поэтому в новой версии, по-моему, это только в бизнес-варианте, если open-source нет, есть теперь фича automatic key management.
2716.82 2730.18 "Игорь Лабутин" То есть вы, по сути, просто задаете, я хочу, чтобы раз в три месяца у меня менялся ключик, при этом я хочу, чтобы новый ключик уже анонсился за 7 дней до смены, а старый ключик был валиден еще 10 дней после смены.
2730.18 2734.90 "Игорь Лабутин" Все эти периоды, они важны в зависимости от того, насколько долгие токены вы выдаете.
2734.90 2736.34 "Игорь Лабутин" И все, он будет само работать.
2736.34 2749.42 "Игорь Лабутин" У вас будут автоматически обновляться ключи, если утекло что-то, вы можете это принудительно, естественно, зафорсить, а так просто по дефолту раз в три, по-моему, месяца, дефолтный вариант, и плюс-минус неделя вокруг этого момента у вас будет RollingKey.
2749.42 2750.78 "Игорь Лабутин" Прям прекрасная штука.
2750.78 2751.78 "Игорь Лабутин" Это одна фича.
2751.78 2753.78 "Игорь Лабутин" Вторая фича - это Resource Isolation.
2753.78 2764.22 "Игорь Лабутин" Тут я думаю, что, наверное, для подробного объяснения нам нужно немножко погрузиться в терминологию о Auth и всех этих ресурсов, аудиенсов и прочего, я скажу кратенько.
2764.22 2767.98 "Игорь Лабутин" Как я это понял, так вот сходу, быстро не вспоминая всех деталей.
2767.98 2781.78 "Игорь Лабутин" Смысл в том, что раньше вы могли, получая токен, указать желаемые скопы, вы могли указать желаемые аудиенсы, а если у вас при этом есть несколько разных ресурсов, то было невозможно получить токен, который валиден только для одного ресурса.
2781.78 2785.90 "Игорь Лабутин" То есть вы получали токен для заданного аудиенса и для всех скопов, которые запрошены.
2785.90 2791.50 "Игорь Лабутин" Если у вас есть несколько ресурсов, которые просят один и тот же скоп, ну ваш токен был валиден для них, для всех.
2791.50 2803.94 "Игорь Лабутин" В начале 2020 года был утвержден RFC, который утверждал, так сказать, расширение к протоколу о Auth, который позволял указывать при запросе токена, позволял указывать ресурс дополнительный.
2803.94 2814.70 "Игорь Лабутин" Вот, собственно, эту штуку реализовали в v5 версии, теперь можно указать не только скопы и аудиенс, но еще и желаемый ресурс и, соответственно, токен будет выдан только такой, который удовлетворяет этому ресурсу.
2814.70 2822.06 "Игорь Лабутин" И вы на стороне сервера можете проверить, в токене этот ресурс будет, вы можете проверить, что токен был выдан, как раз, для того ресурса, которого запрашивает пользователь, доступ.
2822.06 2829.46 "Игорь Лабутин" И это позволит вам делать некоторую хорошую изоляцию, допустим, фич внутри вашего приложения, если у вас какой-то большой развесец для приложений.
2829.46 2832.54 "Игорь Лабутин" В общем, если кратенько и не погружаясь в детали, то вот так.
2832.54 2839.38 "Анатолий Кулаков" Ну, отлично, поздравляем авторов с первым релизом, желаем им удачи на коммерческом поле и будем следить за развитием замечательного продукта.
2839.38 2842.58 "Игорь Лабутин" Да, давай тогда теперь, наверное, закончим с новостями.
2842.58 2854.90 "Игорь Лабутин" Мне на самом деле казалось, что после Нового года какое-то затишье и там прям как тихо-мирно, но вот как-то оказалось, что все-таки все какие-то планы порассказывали, уже новостей много чего объявилось, так что жизнь кипит.
2854.90 2858.74 "Игорь Лабутин" Давай куда-нибудь теперь с новостей пойдем в какую-нибудь другую тему поспокойнее.
2858.74 2860.18 "Игорь Лабутин" Есть у вас что-нибудь еще?
2860.18 2865.06 "Анатолий Кулаков" Если вы устали от новогоднего затишья, то у меня замечательная для вас новость.
2865.06 2872.14 "Анатолий Кулаков" Организаторы Гидры выпустили плейлист от 2020 года с последней конференции.
2872.14 2892.82 "Анатолий Кулаков" Для тех, кто не знает, что это такое, я кратко расскажу, что Гидра - это конференция, в которую приглашаются такие самые звезды, самые большие пупки из мира научного и из разработчиков, те, которые говорят о консенсусах, которые говорят о тканк-каранти, о дистрибьюшене и о прочих вот этих странных вещах.
2892.82 2904.54 "Анатолий Кулаков" Многие спикеры на этой конференции являются преподавателями в престижных всяких мировых университетах, институтах, преподают в ЭТМО, например.
2904.54 2911.26 "Анатолий Кулаков" И, например, это то место, где можно встретить Лампорта, где можно пару часиков поболтать с Клепманом и так далее.
2911.26 2914.46 "Анатолий Кулаков" Ну, в общем, это моя вторая любимая конференция после ДотНекста.
2914.46 2916.26 "Анатолий Кулаков" Всячески вам ее рекомендую.
2916.26 2919.54 "Анатолий Кулаков" И вот, как я уже сказал, есть плейлист.
2919.54 2921.50 "Анатолий Кулаков" Плейлист с отличными докладами.
2921.50 2924.02 "Анатолий Кулаков" Просто каждый из них на вес золота.
2924.02 2931.38 "Анатолий Кулаков" Если вы вдруг не знали о конференции, также посмотрите плейлист с первой конференции, потому что это уже вторая была.
2931.38 2937.98 "Анатолий Кулаков" И я для себя выбрал три доклада, которые, по моему мнению, должны быть интересны максимально широкому кругу.
2937.98 2940.34 "Анатолий Кулаков" И хотел бы про вам про них немножко рассказать.
2940.34 2950.58 "Анатолий Кулаков" Во-первых, прекрасный доклад от нашего любимого Дмитрия Иванова, который называется "Multi-training in a UA Application" "Then some threads are more equal than others".
2950.58 2958.10 "Анатолий Кулаков" Несмотря на упоминания в UI-ке в названии, доклад будет полезен как общий обзор для выбора стратегии синхронизации.
2958.10 2959.94 "Анатолий Кулаков" Вот в самом широком смысле этого слова.
2959.94 2967.94 "Анатолий Кулаков" Дмитрий отлично прошелся по самым популярным решениям от Mutex'а, Event Sourcing'а, через Actor и Software Transaction Memory.
2967.94 2971.62 "Анатолий Кулаков" То есть затронул очень много интересных, интересных тем.
2971.62 2976.78 "Анатолий Кулаков" Разбираются типичные недостатки каждого этого подхода, их практическое место в современных проектах.
2976.78 2983.90 "Анатолий Кулаков" И вот эта сквозная ниточка UI, которую он все время проводит через все эти примеры, дает отличную привязку к практическим кейсам.
2983.90 2988.46 "Анатолий Кулаков" Вы всегда будете понимать зачем это, как это используется, какие у него плюсы, какие минусы.
2988.46 2991.42 "Анатолий Кулаков" Потому что UI знаком практически каждому.
2991.42 2992.90 "Анатолий Кулаков" В общем, это отличный обзор.
2992.90 2995.22 "Анатолий Кулаков" У Дмитрия великолепный английский.
2995.22 2998.02 "Анатолий Кулаков" Просто обзавидоваться, поэтому не смущайтесь языку.
2998.02 2999.70 "Анатолий Кулаков" Я думаю, вы прекрасно все поймете.
2999.70 3002.26 "Анатолий Кулаков" Просто попробуйте посмотреть его хотя бы немножко.
3002.26 3003.86 "Анатолий Кулаков" Много полезных примеров.
3003.86 3005.74 "Анатолий Кулаков" У Nogidri это был уровень смузи.
3005.74 3009.32 "Анатолий Кулаков" Ну то есть нашим Dothnext'овским инженерам точно будет чему поучиться.
3009.32 3011.90 "Анатолий Кулаков" И вот второй доклад Мартина Клепмана.
3011.90 3014.70 "Анатолий Кулаков" CRDT - The Hard Path.
3014.70 3016.82 "Анатолий Кулаков" Conflict-free replication datatypes.
3016.82 3018.66 "Анатолий Кулаков" Именно так расшифровывается CRDT.
3018.66 3023.94 "Анатолий Кулаков" Это очень популярное семейство алгоритмов для оптимистичной репликации.
3023.94 3029.70 "Анатолий Кулаков" С помощью этих структур данных мы можем конкурента изменять одни и те же данные на разных репликах.
3029.70 3033.82 "Анатолий Кулаков" Даже если эти реплики находятся в оффлайне и вообще никакой связи с другим миром не имеют.
3033.82 3038.06 "Анатолий Кулаков" И не могут взаимодействовать не только с друг другом, но и с каким-то общим сервером.
3038.06 3039.06 "Анатолий Кулаков" Только сами в себе.
3039.06 3043.94 "Анатолий Кулаков" В конце концов, когда связь появляется, состояние их снова станет консистентным.
3043.94 3046.82 "Анатолий Кулаков" То есть гарантированно одинаковым на всех репликах.
3046.82 3048.10 "Анатолий Кулаков" Независимо ни от чего.
3048.10 3049.58 "Анатолий Кулаков" Никак не менялось, ничто не менялось.
3049.58 3054.58 "Анатолий Кулаков" CRDT широко используется в геораспределенных баз данных, в многопользовательских редакторах.
3054.58 3063.02 "Анатолий Кулаков" Например, может быть вы неосознанно использовали их в Microsoft Word Online или в Google Docs, когда вместе с коллегой редактировали текст.
3063.02 3065.26 "Анатолий Кулаков" Вот там сейчас все это работает именно на CRDT.
3065.26 3072.98 "Анатолий Кулаков" То есть как в текстовых, так и в графических и в многих других сферах вообще структура довольно базовая и применить ее можно довольно-таки широко.
3072.98 3078.70 "Анатолий Кулаков" А сам Мартин, он очень знаменитый популяризатор, знаменитый автор про распределенные системы.
3078.70 3091.34 "Анатолий Кулаков" Достаточно вспомнить его работу над Кавкой, книгу с Кабанчиком или докторскую степень в Кембриджском университете, где он и сейчас трудится над разными темами, в том числе над теорией CRDT.
3091.34 3098.74 "Анатолий Кулаков" Доклад отлично рассказывает, что такое CRDT, как они решают конфликты, какие сложности сейчас стоят перед научным миром.
3098.74 3105.58 "Анатолий Кулаков" Это не всеобъемлющее введение в тему, то есть если вы хотите получить твердый базис, то доклад вам не подойдет.
3105.58 3115.86 "Анатолий Кулаков" Но если вы хотите просто посмотреть, как работает магия, в чем занимается передовая наука в теме распределенных структур данных, то вот Мартин является отличным погружением.
3115.86 3124.02 "Анатолий Кулаков" Мартин как раз разрабатывает те структуры данных, которые будут, может быть, через несколько лет применены в наших базах данных, в сервисах и так далее.
3124.02 3127.06 "Анатолий Кулаков" Очень интересный человек, очень интересные работы.
3127.06 3131.02 "Анатолий Кулаков" Вот если вы распределенные тщены как-нибудь увлекаетесь, посмотрите этот доклад.
3131.02 3135.18 "Анатолий Кулаков" Ну и последний доклад, такой интересного наброса, я выбрал.
3135.18 3136.18 "Анатолий Кулаков" Олег Анастасьев.
3136.18 3137.18 "Анатолий Кулаков" Efficient and Reliable Macroservices.
3137.18 3139.30 "Анатолий Кулаков" Олег это инженер в одноклассниках.
3139.30 3145.42 "Анатолий Кулаков" Он широко известен в джава мире, у нас его не так широко знают, ну в общем зря.
3145.42 3146.74 "Анатолий Кулаков" Специалист он вообще отличный.
3146.74 3150.86 "Анатолий Кулаков" В его задачи входит проектирование высоконакруженных и отказно заустойчивых систем.
3150.86 3153.82 "Анатолий Кулаков" В докладе был сделан очень дерзкий вброс.
3153.82 3156.74 "Анатолий Кулаков" Типа у стейтлест микросервисов очень много минусов.
3156.74 3166.06 "Анатолий Кулаков" Возможные проблемы с сетью, накладные расходы на маршалинг, сервизацию данных, большие затраты на CPU, на память, на инфраструктурные нужды и так далее.
3166.06 3172.70 "Анатолий Кулаков" В общем тот тренд на стейтлест, который все эти годы нас преследовал несет очень много минусов.
3172.70 3177.78 "Анатолий Кулаков" Все может быть гораздо проще и надежнее, если микросервисы сделать стейтфул.
3177.78 3182.62 "Анатолий Кулаков" Взять базу данных, строить ее в ваше приложение, то есть сделать embedded в стройку.
3182.62 3187.62 "Анатолий Кулаков" И развитие этой мысли действительно привело в докладе просто к потрясающим итогам.
3187.62 3188.62 "Анатолий Кулаков" Я вот такого не ожидал.
3188.62 3195.42 "Анатолий Кулаков" И с которыми всем заинтересовавшимся я предлагаю знакомиться самостоятельно, потому что не хочется ломать интригу.
3195.42 3207.62 "Анатолий Кулаков" Он очень грамотно к этому ко всему подходит, очень хорошо рассматривает всякие аргументы скептиков и доказывает, что такой подход имеет место на жизнь не только в теории, но и на практике.
3207.62 3209.66 "Анатолий Кулаков" Тоже очень увлекательный доклад.
3209.66 3210.66 "Анатолий Кулаков" Искренне рекомендую.
3210.66 3211.66 "Игорь Лабутин" Ух, спасибо.
3211.66 3231.14 "Игорь Лабутин" На самом деле, действительно, звучит прям полезно, потому что я был на Гидре вот прошлой, первой, и там как-то было не очень много такого непосредственно полезного или даже хотя бы близкому обычному инженерному подходу, а тут прям вот то, что ты озвучил, это те темы, которые могут быть интересны для общего развития, даже если вы просто инженер.
3231.14 3232.94 "Игорь Лабутин" Рекомендую, посмотрите.
3232.94 3238.42 "Игорь Лабутин" Пошли, наверное, обратно в наш уютный тутнет-мир из всей этой науки и каких-то странных мест.
3238.42 3241.38 "Игорь Лабутин" Докер, приложеньки, давай про них поговорим.
3241.38 3243.02 "Анатолий Кулаков" Мы, кажется, мы уже все знаем про Докер.
3243.02 3244.62 None Что еще про него можно рассказать?
3244.62 3253.58 "Игорь Лабутин" Ну, все не все, но как только у нас есть один инструмент, мы им просто пользуемся, как только у нас есть два инструмента, у нас уже есть несколько способов их скрестить.
3253.58 3262.82 "Игорь Лабутин" И как раз-таки этим озаботился Эндрю Лок в своей статье, а, собственно, если мы используем Докер имиджи, то какой вариант паблиша для тутнет-приложений нам выбирать?
3262.82 3268.26 "Игорь Лабутин" Напомню, что тутнет-приложение может быть запаблишено по большому счету в двух режимах.
3268.26 3272.26 "Игорь Лабутин" Либо это framework-депендент вариант, либо это self-contained вариант.
3272.26 3277.86 "Игорь Лабутин" Если, кстати, вам нужен еще donut-runtime в том месте, где вы будете запускаться, в self-contained вы все тащите с собой.
3277.86 3279.26 "Игорь Лабутин" И вам нужна, по сути, только винда.
3279.26 3282.66 "Игорь Лабутин" И вот вопрос, в Докер как нам лучше паблишиться?
3282.66 3284.34 "Игорь Лабутин" Как framework-депендент или как self-contained?
3284.34 3285.34 "Игорь Лабутин" Есть ли разница?
3285.34 3287.74 "Анатолий Кулаков" Наверное, в Докере самое главное - это размер.
3287.74 3291.22 "Анатолий Кулаков" То есть, кто из них меньше размера даст, того в Докер засовывать.
3291.22 3292.22 "Анатолий Кулаков" По-моему, все логично.
3292.22 3293.22 "Игорь Лабутин" О чем статья-то?
3293.22 3295.50 "Игорь Лабутин" Ну, статья, по большому счету, ровно про это.
3295.50 3297.54 "Игорь Лабутин" Она, по сути, просто про размер.
3297.54 3301.22 "Игорь Лабутин" Но там есть тонкости, потому что в Докере размер он такой.
3301.22 3303.90 "Игорь Лабутин" Довольно-таки интересная штука.
3303.90 3305.26 "Игорь Лабутин" Ну, давай подробнее.
3305.26 3312.94 "Игорь Лабутин" Если мы просто почитаем, что пишут про всякие framework-депендент и self-contained варианты, то вы найдете кучу плюсов и минусов.
3312.94 3313.94 "Игорь Лабутин" Они довольно стандарты.
3313.94 3320.06 "Игорь Лабутин" Во framework-депендент варианте вы, конечно же, дистрибьютите только вашу DALEKU, размер дистрибьюшена меньше.
3320.06 3323.26 "Игорь Лабутин" Но зато у вас есть меньше контроля над runtime.
3323.26 3327.02 "Игорь Лабутин" И вы понятия не имеете, какой там будет один глобальный на всей системе.
3327.02 3336.14 "Игорь Лабутин" В self-contained варианте вы тащите все с собой, у вас полный контроль за рантаймом, у вас нет в принципе требований, чтобы этот рантайм был, вам не нужно ничего ставить заранее.
3336.14 3341.54 "Игорь Лабутин" Но зато, поскольку вы тащите с собой рантайм, то с общим размером приложения у вас плохо.
3341.54 3354.86 "Игорь Лабутин" А также плюс-минус того, что если вам хочется что-то запатчить, например, нашли какую-то уязвимость, то если у вас shared runtime, то есть framework-депендент, то просто обновили на машинке его и все.
3354.86 3362.34 "Игорь Лабутин" А вот если у вас self-contained, ну нужно тащить все с собой, перекопилировать приложение, передеплоивать его, то есть ну как бы, может быть плюс, может быть минус.
3362.34 3364.14 "Игорь Лабутин" Но так было, пока не было докера.
3364.14 3366.70 "Игорь Лабутин" В докере все немножко по-другому.
3366.70 3376.62 "Игорь Лабутин" Если мы посмотрим на framework-депендент вариант, и когда вы говорите, что ну вы тащите только файлики вашего приложения, ну в докере это не так, вы все равно тащите и рантайм тоже.
3376.62 3382.94 "Игорь Лабутин" Просто он не в докер-образе, который собираете вы, а он в докер-образе, который вы откуда-то спулите, предварительно.
3382.94 3384.90 "Игорь Лабутин" Вы имеете меньше контроля над рантаймом.
3384.90 3398.30 "Игорь Лабутин" Да нет, в докере как раз-таки вы имеете полный контроль над рантаймом и по сути в докере self-contained и framework-депендент отличаются только тем, в каком конкретно месте виртуальной файловой системы докера лежит этот самый рантайм.
3398.30 3404.22 "Игорь Лабутин" В self-contained, в общем-то, все остается так, так что по сути действительно разница только в размере.
3404.22 3424.62 "Игорь Лабутин" Единственный момент, который может повлиять на размер, это то, что в дотнете при сборке есть релю, который я уже упоминал, линкер, может что-то вам порезать из приложения, но даже если без линкера, у вас есть такая штука, называется App Trimming, которая просто выпилит ненужные файлики из сборки.
3424.62 3432.58 "Игорь Лабутин" Если вы, например, какие-то файлики вообще совсем никак не используете, ну, get-пакеты и так далее, это все в общем выпилится из сборки и размер будет только у приложения меньше.
3432.58 3434.70 "Игорь Лабутин" Так вот эта штука работает только с self-contained приложениями.
3434.70 3440.82 "Игорь Лабутин" Естественно, с framework-депендент приложения, ну, framework вроде как выпиливается никак и у вас в приложение входит только ваше же файл.
3440.82 3443.38 "Игорь Лабутин" Там только если линкер что-нибудь постарается из вашего кода выпить.
3443.38 3455.62 "Игорь Лабутин" И тут как раз-таки возникает такая мысль, что в докере же у нас не просто все хранится в едином образе, а у нас есть так называемое текстурирование, то есть докер, финальный докер образ, он собирается из слоев.
3455.62 3457.98 "Игорь Лабутин" И как раз-таки Эндрю провел эксперимент.
3457.98 3470.90 "Игорь Лабутин" Он взял базовый образ, базовый образ это 10 мегабайт, это я так понимаю минимальный вообще необходимый дотнет рантайм, точнее зависимости, которые нужны дотнет рантайму, это 10 мегабайт.
3470.90 3481.10 "Игорь Лабутин" Поверх него он поставил, ну не поставил, а сконфигурил докер так, чтобы поверх него вставал асп.нетный рантайм, это 103 мегабайта, ну точнее в итоговой варианте
3481.10 3485.58 None 93, как здесь написано. И 28 мегабайт занимала у него приложение.
3485.58 3490.22 "Игорь Лабутин" Какой-то стандартный там типа темплейт с какими-то минимальными изменениями.
3490.22 3493.50 "Игорь Лабутин" Итого получился 131 мегабайт для framework-депендент варианта.
3493.50 3496.62 "Игорь Лабутин" В self-contained варианте получился 35 мегабайт, в два раза меньше.
3496.62 3505.82 "Игорь Лабутин" Туда вошли те же 10 мегабайт базы, 48 мегабайт вместо 93, это как раз таки trimmed рантайм и 28 все то же самое приложение.
3505.82 3511.50 "Игорь Лабутин" Если включить прям агрессив, trimming, можно еще 10 мегабайт сэкономить, там получается 55 мегабайт тогда.
3511.50 3519.82 "Игорь Лабутин" И получается, что с одной стороны вроде как в self-contained это выиграли, что 65 в два раза меньше чем в 131, все берем в self-contained, но есть одно но.
3519.82 3531.90 "Игорь Лабутин" Если вы на одной машинке хостите очень много приложений через докер и все они framework-депендент, все они шарят общий базовый слой SPNET, то тогда получается, что вот эти 93 мегабайта, они будут общими для всех.
3531.90 3542.46 "Игорь Лабутин" А в self-contained, в каждом контейнере финальном, который невозможно закэшировать в серединке, он как бы только сам по себе и туда тащится аж все 55 мегабайт получается.
3542.46 3557.02 "Игорь Лабутин" Получается, что self-contained меньше, но зато меньше риюза между ними и поэтому если вы огромное количество машины, огромное количество приложений пытаетесь запихнуть на одну машинку, например на один так, виртуалочку, то может быть выгоднее использовать framework-депендент.
3557.02 3577.30 "Игорь Лабутин" По большому счету у него как раз-таки конклюжен такой, что если у вас там Kubernetes и прочие штуки, которые докер использует прям очень активно и где скорее всего будет запущено много копий вашего приложения, особенно если речь идет про копии, где очевидно, что у вас рантаймы все общие и одинаковые, то тогда конечно, используя framework-депендент, вы выиграете довольно много на вот этом докер кэшировании промежуточных слоев.
3577.30 3596.82 "Игорь Лабутин" Если же вы деплойте ваше одинокое приложение, либо вы это деплойте там, где какой-нибудь там шарик хостинг, где нету всякого Kubernetes, где не будет огромной магии докера и докер вы используете чисто для удобства доставки и запуска, то лучше использовать self-contained, чтобы не зависеть ни от чего вокруг, так сказать, ship my environment и в нем все будет работать гарантированно.
3596.82 3601.86 "Анатолий Кулаков" Слушай, действительно неоднозначные выводы, но очень интересное, хорошее замечание, согласен.
3601.86 3614.14 "Анатолий Кулаков" А еще мне, смотри, в голову пришла такая мысль, что если у тебя действительно какая-то security уязвимость есть во фреймворке, то тебе гораздо легче обновить ту инфраструктуру, которая у тебя находится на framework dependency.
3614.14 3631.42 "Анатолий Кулаков" То есть обновить слой докер образа, который отвечает за фреймворк и передеплоить уже существующие просто-напросто докер образы гораздо легче, чем перекомпилировать, абсолютно передеплоить потом опять же все self-contained приложения.
3631.42 3639.62 "Игорь Лабутин" Да, потому что перебилд тебе же нужно по-хорошему, если ты делаешь просто security патч, тебе нужно точно перебилдить ровно ту версию, которая релизилась.
3639.62 3646.06 "Игорь Лабутин" То есть нужна хорошая инфраструктура и билда, а не то, что вы на коленочке собрали докер образы и их запушили в production.
3646.06 3649.42 "Игорь Лабутин" То есть требований к такому self-contained варианту, мне кажется, будет больше.
3649.42 3653.34 "Анатолий Кулаков" Да, а у докера просто заменяешь один слой и все, и у тебя новый фреймворк уже лежит.
3653.34 3664.82 "Игорь Лабутин" Ну, то есть есть плюсы, есть минусы, смотрите, куда вы деплоите, смотрите, как часто вы обновляетесь, смотрите, насколько security-critical ваши системы и насколько вам часто и актуально их нужно обновлять.
3664.82 3675.42 "Игорь Лабутин" Так что, если вы и так, например, по вашему процессу пушите новую версию вашего приложения раз, не знаю, в два дня, ну, наверное, без разницы, запушите просто с новым обновленным патчем через два дня новую.
3675.42 3682.46 "Игорь Лабутин" А вот если у вас запушенные работают месяцами, то, наверное, имеет смысл подумать о framework-dependent, security-patch будут проще.
3682.46 3683.46 "Игорь Лабутин" Погнали дальше.
3683.46 3685.82 "Анатолий Кулаков" Унакомился на статейку Скотта Хансельмана.
3685.82 3697.62 "Анатолий Кулаков" Скотт каждый год выставляет свой список инструментов, которые он пользуется для Windows, и в этой статейке он как раз-таки рассматривает актуальный список.
3697.62 3704.34 "Анатолий Кулаков" Я думаю, что многим из наших слушателей будет интересно, не чем пользуется Скотт, а что может пригодиться им.
3704.34 3711.64 "Анатолий Кулаков" То есть многие из этих инструментов, если практически не все, полезны широкому кругу людей, и именно для этого он ими делится.
3711.64 3717.58 "Анатолий Кулаков" Давайте немножко пробежимся и рассмотрим, что же использует Скотт Хансельман в своей ежедневной работе.
3717.58 3719.38 "Анатолий Кулаков" Прежде всего это Zoomit.
3719.38 3729.38 "Анатолий Кулаков" Это специальный инструмент, который позволяет увеличивать экран, увеличивать какую-то область на экране и рисовать красивые стрелочки, красивые квадратики, чтобы обратить внимание на эту часть экрана.
3729.38 3735.26 "Анатолий Кулаков" Очень полезно, когда вы, например, шарите свой экран со своими коллегами, пытаетесь им что-то показать или объяснить или нарисовать.
3735.26 3744.06 "Анатолий Кулаков" Также замечательно подходит для докладчиков, которые делают свои доклады, которые шарят экраны и показывают какие-то части своего экрана для чего-то.
3744.06 3753.90 "Игорь Лабутин" Да, стандартная зумилка Windows 10, она в принципе тоже ничего, но это менее затратно, выход в трей не беспокоит, куча шорткатов и позволяет рисовать.
3753.90 3755.90 "Игорь Лабутин" Прям прикольно, я пользуюсь, мне нравится.
3755.90 3763.90 "Анатолий Кулаков" Это утилита из пакета SciS Internals, я почему-то не нашел у Скотта, вот прям большой жирный, жирного пункта, все используют эти SciS Internals.
3763.90 3767.18 "Анатолий Кулаков" Ну, от себя могу добавить, что весь пакет просто замечателен.
3767.18 3771.98 "Анатолий Кулаков" Не знаю, даже если вы никогда его не видели, попробуйте просто Process Explorer скачать.
3771.98 3775.70 "Анатолий Кулаков" Это такая умная замена обычному системному Windows Task Manager.
3775.70 3782.54 "Анатолий Кулаков" Просто посмотрите на то, как он это делает, что он умеет, что делает и вы навсегда любитесь его, все SciS Internals.
3782.54 3792.34 "Игорь Лабутин" Да, и кстати у Скотта есть, у него есть на самом деле отсылочка к полному пакету SciS Internals и у него же есть еще отсылка к большому пакету NearSoft.
3792.34 3800.42 "Игорь Лабутин" Тоже это гора мелких тулов, она более такая низкоуровневая системная тоже и менее заточена на программирование, так скажем.
3800.42 3805.22 "Игорь Лабутин" Там больше всякие Uninstall, драйвера и прочее, но тоже бывает полезно, посмотрите туда.
3805.22 3806.22 "Анатолий Кулаков" Поехали дальше.
3806.22 3807.22 "Анатолий Кулаков" Вингет.
3807.22 3815.66 "Анатолий Кулаков" Вингет это пакетный менеджер для Виндимб, который скоро обещает стать официальным настоящим от Микрософта.
3815.66 3825.02 "Анатолий Кулаков" Если вы знакомы с Adget или с Choco, то вот Вингет это как раз та штука, которая пытается сделать им конкуренцию.
3825.02 3830.46 "Анатолий Кулаков" Она довольно давно и довольно успешно работает, но почему-то еще не включена в официальные дистрибутивы Windows.
3830.46 3831.98 None Это событие мы ждем.
3831.98 3837.58 "Игорь Лабутин" Я пользуюсь Choco, в принципе более-менее доволен, нормально работает.
3837.58 3838.58 "Игорь Лабутин" Вингет пока не пробовал.
3838.58 3842.06 "Анатолий Кулаков" Да, я тоже пользуюсь Choco и тоже пока доволен.
3842.06 3847.78 "Анатолий Кулаков" Микрософт PowerToys - это вот большой набор утилит, который к сожалению работает только под Windows 10.
3847.78 3851.50 "Анатолий Кулаков" К сожалению, потому что там довольно интересные штуки попадаются.
3851.50 3852.50 "Анатолий Кулаков" Давайте поподробнее.
3852.50 3855.14 "Анатолий Кулаков" Например, там есть ColorPicker.
3855.14 3865.94 "Анатолий Кулаков" Когда вы можете взять цвет из любой части вашего экрана, независимо от того, какое приложение сейчас запущено, вы можете взять цвет, выбрать удобный формат, который вам нужен и скопировать в буфер-обмен.
3865.94 3868.94 "Анатолий Кулаков" У меня это пригождается просто по 10 раз на дне.
3868.94 3872.78 "Анатолий Кулаков" Наверное, очень специфическая это улза, но нужно знать, что она существует.
3872.78 3874.46 "Игорь Лабутин" Да, также там есть Fancy Zones.
3874.46 3878.50 "Игорь Лабутин" Вот это, наверное, та штука, которую я пользуюсь чаще всего в PowerToys.
3878.50 3884.34 "Игорь Лабутин" Это возможность разметить экран на, скажем так, виртуальные регионы.
3884.34 3888.26 "Игорь Лабутин" Поделить, например, на матрицу 2х2 или в 3 столбца.
3888.26 3893.54 "Игорь Лабутин" И дальше, если вы тащите окошечко с зажатым шифтом, оно автоматически будет снэпиться в эти регионы.
3893.54 3899.66 "Игорь Лабутин" Я прям настроил себе матрицу 2х2 и не нарадуюсь, когда нужно раскидать набор окон по кусочкам.
3899.66 3902.54 "Игорь Лабутин" Понятно, что есть всякие шорткаты типа Windows влево, Windows вправо.
3902.54 3904.98 "Игорь Лабутин" Они помогают поделить пополам, по крайней мере, приложение.
3904.98 3909.18 "Игорь Лабутин" Но вот когда нужно там в 3 колонки или 2х2 сделать, это прям спасение.
3909.18 3910.18 "Игорь Лабутин" Очень прикольно.
3910.18 3911.18 "Игорь Лабутин" Мне нравится.
3911.18 3913.02 "Анатолий Кулаков" Да, там более сложные лейауты.
3913.02 3915.90 "Анатолий Кулаков" В общем, людям с большими мониторами это то, что доктор прописал.
3915.90 3917.78 "Анатолий Кулаков" Я даже на маленьком пользуюсь.
3917.78 3918.78 "Анатолий Кулаков" Keyboard Manager.
3918.78 3925.02 "Анатолий Кулаков" Это специальный инструмент, который позволяет вам переопределить ваши клавиши на клавиатуре на любые другие клавиши.
3925.02 3927.02 "Анатолий Кулаков" А также он поддерживает шорткаты.
3927.02 3933.62 "Анатолий Кулаков" Например, вы можете сделать так, чтобы при нажатии Ctrl+C у вас была не вставка, а печаталась буква B.
3933.62 3935.58 "Анатолий Кулаков" Прочие другие такие извращения можно творить.
3935.58 3943.70 "Анатолий Кулаков" Хорошая толза, если вы хотите, допустим, попробовать новые раскладки или перебиндить существующие клавиши, которые у вас почему-то неудобно расположены на клавиатуре.
3943.70 3946.66 "Анатолий Кулаков" В общем, тоже замечательно подходит.
3946.66 3947.66 "Анатолий Кулаков" RunUtility.
3947.66 3952.98 "Анатолий Кулаков" Это такой своеобразный лаунчер, который есть, например, в macOS под именем Alfredo или Spotlight.
3952.98 3960.78 "Анатолий Кулаков" Нажимаете Alt+Space, у вас вылетает окошко текстовое, в котором вы набиваете практически все, что вам может прийти в голову.
3960.78 3965.62 "Анатолий Кулаков" Запустить какую-то программу, найти какой-то файлик, выполнить какую-то командную строку.
3965.62 3968.94 "Анатолий Кулаков" Там полно плагинов, он справится практически со всем, что
3968.94 3973.14 "Игорь Лабутин" есть. Да, что меня порадовало, кстати, он ищет в том числе среди уже запущенных программ.
3973.14 3977.02 "Игорь Лабутин" То есть, если вы, например, пытаетесь открыть какой-то файлик, а он уже у вас где-то открыт.
3977.02 3982.74 "Игорь Лабутин" Эта штука тоже будет показана и при выборе этого пункта вы просто переключитесь как будто Alt+Tab.
3982.74 3985.98 "Игорь Лабутин" То есть, можно такой Alt+Tab с поиском делать.
3985.98 3996.10 "Анатолий Кулаков" Еще куча мелких утилит, которым можно найти более лучшую альтернативу, конечно, но пока это официальная штука от Microsoft и есть надежда, что они усовершенствуются.
3996.10 3998.10 "Анатолий Кулаков" Например, File Explorer Add-on.
3998.10 4001.54 "Анатолий Кулаков" Это превью панель для вашего обычного File Explorer.
4001.54 4004.78 "Анатолий Кулаков" Он может делать превью Markdown и SVG.
4004.78 4010.78 "Анатолий Кулаков" Image Resizer, который очень быстро позволяет вам заресайзить кучу файлов, кучу картинок, если вам нужно.
4010.78 4011.78 "Анатолий Кулаков" Power Renamer.
4011.78 4016.82 "Анатолий Кулаков" Это можно точно так же большую кучу файлов переименовать по определенному шаблону, по определенному алгоритму.
4016.82 4018.78 "Анатолий Кулаков" Тоже может быть пригодится.
4018.78 4022.82 "Анатолий Кулаков" Еще одна интересная стулза, которая сейчас находится в экспериментальном режиме.
4022.82 4024.58 "Анатолий Кулаков" Video Conference Mute.
4024.58 4031.18 "Анатолий Кулаков" Это очень быстрый способ замьютить ваш микрофон и вашу камеру глобально для всей операционной системы.
4031.18 4033.62 "Анатолий Кулаков" С помощью нажатия, допустим, Windows N.
4033.62 4041.14 "Анатолий Кулаков" Это очень хорошая штука, особенно так как мы сейчас очень часто общаемся с коллегами по видеосвязи.
4041.14 4053.78 "Анатолий Кулаков" Если вам вдруг резко в кадр забежала жена или ребенок начал кричать, не хочется разбираться в какой программе, где эта кнопочка Mute, где она находится, как она работает, нажалась она или нет.
4053.78 4058.22 "Анатолий Кулаков" Просто быстро нажимаете Windows N и отрубается вообще камера и микрофон во всей операционной системе.
4058.22 4062.14 "Анатолий Кулаков" Мне кажется, прекрасная вещь, которая должна быть встроена в операционную систему.
4062.14 4070.18 "Игорь Лабутин" Да, на самом деле для Mute эта штука как раз использует встроенную фильтр в операционную систему, просто для нее нет Shortcut, теперь она есть.
4070.18 4071.66 "Игорь Лабутин" И оно неплохо работает.
4071.66 4075.50 "Игорь Лабутин" У меня стоит как раз экспериментальная версия, я попробовал, оно более-менее работает.
4075.50 4077.26 "Игорь Лабутин" С камерой там пока все сложнее.
4077.26 4085.98 "Игорь Лабутин" Камера на самом деле не мьютится, так скажем, не выключается нативно, а это делается через промежуточную виртуальную камеру.
4085.98 4099.54 "Игорь Лабутин" То есть в вашей системе появляется после установки виртуальная камера, именно ее нужно выбирать во всяких темзах, зумах и прочем, и именно в ней, в драйвере по сути делается просто настроечка типа "передавать изображение", "не передавать изображение".
4099.54 4108.10 "Игорь Лабутин" И вот с этой фичей пока там довольно много проблем, на GitHub есть ишье, где описано огромное количество всяких косяков, над ним всеми работают, потихонечку все фиксится.
4108.10 4117.74 "Игорь Лабутин" То есть для видео оно пока действительно совсем экспериментал, я выключил себе Mute камеры, а вот со звуком все работает, неплохо работает, так что можно пользоваться.
4117.74 4130.10 "Анатолий Кулаков" И GitHub здесь было упомянуть не зря, потому что все эти утилиты open-source, я напомню, что это был пакет Microsoft Power Toys, вот, всех можно найти на GitHub, помочь, предложить, написать, зарапортовать, в общем, как положено.
4130.10 4131.10 "Анатолий Кулаков" Пойдем дальше.
4131.10 4135.18 "Анатолий Кулаков" Для разработчиков будет очень полезная утилита CodeTrack.
4135.18 4141.06 "Анатолий Кулаков" Это бесплатный .NET Performance профайлер и анализатор выполнения.
4141.06 4154.14 "Анатолий Кулаков" Он умеет строить хорошие флеймграфы, он портабельный, у него не нужно строй, ему не нужно устанавливать, у него еще куча всяких мелких достоинств, но в общем это довольно качественный хороший профайлер.
4154.14 4162.66 "Игорь Лабутин" Я собирался его как-то попробовать попользовать, но у меня что-то не было пока ни одного сценария, где нужно что-то попрофайлить, поэтому руки не дошли, но он у меня скачан и лежит готовый.
4162.66 4170.30 "Игорь Лабутин" Есть еще Fusion++, мы, кстати, его, по-моему, упоминали даже в подкасте, это штука для просмотра лого в загрузке сборок.
4170.30 4175.30 "Игорь Лабутин" Вообще в .NET со времен еще какого-то раннего фреймворка есть встроенная система.
4175.30 4189.10 "Игорь Лабутин" Вообще система подгрузки сборок, она как-то ассоциируется с код неймом Fusion, там исторически в дебрик .NET, и поэтому тулза для просмотра этих самых логов, Assembly Binding Log Viewer, называлась Fusion Log Viewer.
4189.10 4228.86 "Игорь Лабутин" Она была в комплекте .NET SDK, фреймворк SDK, но она обладала совершенно ужасным UI, то есть это глобальный сеттинг на всю систему, результаты пишутся в файлике в виде каких-то очень странных XML, не XML, их надо очень как-то непонятно как читать, короче был не очень удобный UI, а Fusion++ это поверх этой же API-шки глобальной системной, но написанный удобный тулб с хорошей графикой, который просто позволяет вам для конкретного приложения включить, выключить, грубо говоря, есть кнопочка рекорд, все загрузки, потом закончить рекорд, и он там даже делает некоторый автоанализ и хайлайтит самые проблемные места, так что прям хайли рекомендуют, если у вас есть проблемы с загрузок сборок.
4228.86 4242.74 "Анатолий Кулаков" Еще несколько полезных приложений, Rescue Time, если вы не сталкивались, то Rescue Time это такой инструмент, который наблюдает за вашей системой, смотрит какие приложения вы используете и записывает время, которое вы за ними проводите.
4242.74 4266.90 "Анатолий Кулаков" У многих это может ассоциироваться с какой-нибудь системой слежки за своими сотрудниками, но я вам хочу ее посоветовать не для этого, я вам хочу ее посоветовать для самих себя, то есть очень часто разработчики уверены, что они там проводят за работой очень много времени, проводят за соцсетями очень мало времени, в мессенджерах практически не общаются, и вот подобные другие заблуждения в ту или иную сторону очень часто встречаются.
4266.90 4270.06 "Анатолий Кулаков" Вот подобные инструменты очень сильно отрезвляют.
4270.06 4280.78 "Анатолий Кулаков" Как только вы реально посмотрите день, неделю, месяц, сколько времени вы на что тратите, вы можете абсолютно пересмотреть весь ваш режим, весь ваш график дня, потому что они сильно отрезвляют.
4280.78 4286.58 "Анатолий Кулаков" На самом деле мы ощущаем время абсолютно не так, как оно есть на самом деле.
4286.58 4295.42 "Анатолий Кулаков" И вот Trace View Time или подобный другой инструмент позволит вам здраво и глазами компьютера и точных таймеров взглянуть на себя со стороны.
4295.42 4301.38 "Анатолий Кулаков" Даже ради просто своего собственного интереса поставьте, там бесплатная версия очень функциональная, ее вам хватит с головой.
4301.38 4308.78 "Игорь Лабутин" Да, единственное, что не делает бесплатная версия, что например не хватает мне, она не умеет трекать внутри браузера разные тапки.
4308.78 4315.98 "Игорь Лабутин" Вот это у меня не получилось по крайней мере настроить, вроде как это платная фича, то, что есть рабочие вкладки, не рабочие вкладки.
4315.98 4325.14 "Игорь Лабутин" Понятно, что YouTube было бы неплохо отнести к нерабочим, такая штука не работает, но в принципе в остальном все да, прекрасно, норм работает и интересно посмотреть, сколько тратится времени.
4325.14 4330.34 "Игорь Лабутин" И не бойтесь, это не то приложение, где нужно будет тщательно размечать тут я работал, тут не работал.
4330.34 4340.38 "Игорь Лабутин" У них по дефолту довольно неплохие категоризации приложений существующих, то есть Telegram сразу в непродуктивные, Visual Studio в продуктивные.
4340.38 4346.02 "Игорь Лабутин" Чуть-чуть может быть надо будет поднастроить под вас, под ваш профиль работы и все будет сразу как на ладони.
4346.02 4352.66 "Анатолий Кулаков" Karnak - это очень полезная утилита, если вы опять же отшарите свой экран, показываете какую-то презентацию, обучаете кого-то, ментрите.
4352.66 4356.98 "Анатолий Кулаков" Суть ее в том, что она показывает все хоткей, которые вы набираете.
4356.98 4359.94 "Анатолий Кулаков" То есть все нажатия клавиш, которые вы набираете.
4359.94 4361.10 "Анатолий Кулаков" Не важно, что бы вы сейчас нажали.
4361.10 4368.62 "Анатолий Кулаков" Очень полезно, чтобы показывать хоткей, очень полезно, чтобы показывать какой-то способ печати, способ переключения.
4368.62 4373.22 "Анатолий Кулаков" В общем она ловит абсолютно все, даже системные клавиши и удобно вам это показывает.
4373.22 4374.90 "Игорь Лабутин" Дальше есть Ear Trumpet.
4374.90 4379.06 "Игорь Лабутин" Я про него только читал, но я все горю желанием попробовать.
4379.06 4385.46 "Игорь Лабутин" Это по сути просто регулятор громкости в звуках для Windows, но он довольно таки advanced.
4385.46 4390.38 "Игорь Лабутин" В десятке появилась возможность, может быть она была и раньше, но в десятке она прямо явно есть.
4390.38 4395.82 "Игорь Лабутин" Но чтобы ее найти нужно довольно сильно закопаться в настройки, делать индивидуальную громкость для разных приложений.
4395.82 4402.82 "Игорь Лабутин" Я на самом деле встречался с тем, что я вроде ставлю громкости в Stray в максимум, а какой-нибудь Skype у меня все равно тихий.
4402.82 4406.38 "Игорь Лабутин" Оказалось, что у него есть индивидуальная настройка, ее можно найти, но она далеко.
4406.38 4413.86 "Игорь Лабутин" Эта штука вам вытаскивает это все в Tray, заменяет стандартный регулятор громкости и прям удобно видно, какую громкость какого приложения.
4413.86 4415.82 "Игорь Лабутин" Можно это все, я так понимаю, замьютить и так далее.
4415.82 4418.66 "Игорь Лабутин" То есть я все хочу попробовать, но я не пробовал пока.
4418.66 4419.66 "Анатолий Кулаков" Auto Hotkey.
4419.66 4427.22 "Анатолий Кулаков" Это специальный менеджер для настройки хоткеев, для автоматизации, для скриптинга, абсолютно всего, что у вас есть в системе.
4427.22 4435.10 "Анатолий Кулаков" Вот весь сеть и сотни утилит, которые мы назвали, которые входят в эти пакеты, ручками никто обычно никуда не вытаскивает.
4435.10 4442.34 "Анатолий Кулаков" Они автоматизируются, настраиваются, вешаются на какие-то команды или на хоткеи и уже непосредственно участвуют в вашей ежедневной жизни.
4442.34 4448.62 "Анатолий Кулаков" Вот Auto Hotkey это тот инструмент, который может все это объединить, может под вас замечательно настроить.
4448.62 4456.46 "Анатолий Кулаков" У него отличная документация, огромное число фанатов, куча уже написанных скриптов, плагинов, всего чего только угодно.
4456.46 4458.18 "Анатолий Кулаков" Если вы никогда про него не слышали, обязательно
4458.18 4472.78 "Игорь Лабутин" посмотрите. Виндерстат это вообще go-to-tool, один из номер первых, наверное, то, что я делаю на ноуте всегда, потому что хоть у меня 512 по идее SSD, но все равно забивается все довольно быстро, там, бекапы, перфю, дампы и все что-то.
4472.78 4483.42 "Игорь Лабутин" И виндерстат позволяет просто посмотреть, куда ушло место в иерархическом виде, а также в виде красивой диаграммы и позволяет легко и просто понять, что можно почистить.
4483.42 4488.18 "Игорь Лабутин" Например, у меня недавно обновилась винда и в общем с легкостью 50 гигов на этом улетела, на старую копию
4488.18 4498.54 "Анатолий Кулаков" винды. Можно посмотреть не только какие папочки, сколько занимают, но и тип, есть разбивка и группировка по типам файлов, тоже иногда бывает полезно и прочее-прочее.
4498.54 4503.54 "Анатолий Кулаков" То есть для освобождения места, для того, чтобы узнать, а куда делось место на вашем диске, замечательная утилита.
4503.54 4507.78 "Анатолий Кулаков" Еще одна большая, хорошая, полезная утилита это Windows Sandbox.
4507.78 4515.18 "Анатолий Кулаков" Мы его тоже обсуждали, это такая виртуальная, менеджер виртуальных машин, который сделан для людей, для обычных домохозяек.
4515.18 4523.98 "Анатолий Кулаков" Такой легковесный виртуальный environment, где вы можете запустить абсолютно любое приложение, в том числе графическое, из-за полной изоляции.
4523.98 4534.02 "Анатолий Кулаков" Изоляция происходит с помощью Microsoft Hypervision и запускает отдельный кернел, ну то есть все как положено по секьюрити, высшая планка.
4534.02 4554.70 "Анатолий Кулаков" Но это происходит довольно прозрачно для пользователя, то есть вы можете просто запустить приложение, у вас автоматически поднимется дефолтная виртуалочка, там приложение это запустится, вы его можете потыкать, закрыть виртуалочку, все сразу у вас исчезнет, все данные, которые приложение оно сохраняло, все куки, которые оно записало, все время, которые оно переводило, все это сбросится в ноль.
4554.70 4560.86 "Анатолий Кулаков" И в следующий раз, когда вы будете запускать другое приложение, оно уже получит чистый кернел, чистую операционную систему.
4560.86 4563.50 "Анатолий Кулаков" То есть такой очень удобный, очень легковесный Sandbox.
4563.50 4572.22 "Анатолий Кулаков" И он, кстати, подходит для игр тоже в PAL, то есть он вполне оптимизирован, у него быстрое время старта и очень хорошая скорость.
4572.22 4579.10 "Игорь Лабутин" Звучит интересно, я пока по старинке, когда мне нужна виртуалка, просто достаю старый WFRP, создаю там виртуалочку отдельную и так далее.
4579.10 4589.38 "Игорь Лабутин" Но у меня очень часто сценарий нужно делать что-нибудь с сеткой, поэтому я не смотрел еще на Windows Sandbox, надо посмотреть будет, что там можно сделать с сетью, можно ли его как-то ограничить.
4589.38 4592.82 "Анатолий Кулаков" Ну вот ты не стандартная домохозяйка, поэтому может быть для тебя функциональность маленькая.
4592.82 4597.26 "Анатолий Кулаков" Но если вам нужно очень легко и быстро и без заморочек, то зацените.
4597.26 4602.98 "Анатолий Кулаков" Это совсем очень маленькая часть того, про что рассказывал Скотт, и инструментов гораздо больше.
4602.98 4612.14 "Анатолий Кулаков" VSL, VS Code, Windows Terminal, Linkupad, WinDBG, Wireshark, Pine.net, VLC Player, много-много других названий.
4612.14 4617.10 "Анатолий Кулаков" Если какой-то из них вы не знаете, то обязательно сходите к Скотту, почитайте подробности и зацените.
4617.10 4628.02 "Анатолий Кулаков" В общем, нужно свое окружение настраивать максимально удобно, потому что в нем вы проводите большую часть своей жизни, оно должно быть комфортным, быстрым, и поэтому лучшие утилиты на рынке необходимо знать.
4628.02 4639.82 "Игорь Лабутин" А если у вас есть, кстати, какие-нибудь прикольные утилиты, которые вы используете в повседневной жизни разработчика, кидайте нам в YouTube в комменты, поделимся со всем миром, вдруг кто что использует прикольное и полезное.
4639.82 4643.30 "Анатолий Кулаков" Да, а следующая статейка про IConfiguration.
4643.30 4646.06 "Игорь Лабутин" Ну, казалось бы, что IConfiguration - простая штука.
4646.06 4649.58 "Игорь Лабутин" В S/Panad Core появилась эта штука, она давно-давно.
4649.58 4651.82 "Игорь Лабутин" Просто возможность удобно держать конфигурацию.
4651.82 4653.22 "Игорь Лабутин" Что тут обсуждать?
4653.22 4655.02 "Игорь Лабутин" Ну, оказалось, что есть что.
4655.02 4660.46 "Игорь Лабутин" Для начала давайте напомним, что IConfiguration - это по сути некоторая абстракция конфигурации приложений.
4660.46 4667.98 "Игорь Лабутин" Все мы знаем файлики upsettings.json, upsettings.dev, json, можно еще что-то в переменных окружениях задавать.
4667.98 4678.62 "Игорь Лабутин" Все это единым прозрачным образом для приложения видно в виде, по сути, key-value пар, ключ-значения, где key - это полный путь до значения.
4678.62 4684.94 "Игорь Лабутин" Если это иерархия как upsettings.json, то имена ключиков разделены двоеточиями, ну а значение лежит просто как значение.
4684.94 4693.66 "Игорь Лабутин" И вся абстракция IConfiguration позволяет таким образом в приложении произвольным образом накидать огромное количество источников этой конфигурации.
4693.66 4699.42 "Игорь Лабутин" Это могут быть уже упомянутые файлики, это могут быть переменные окружения, это может быть command-line, это может быть все что угодно.
4699.42 4706.34 "Игорь Лабутин" И тут возникают вопросы, если можно делать все что угодно в произвольном порядке, то как же делать правильно?
4706.34 4710.06 "Игорь Лабутин" Статья как раз-таки описывает опыт того, как это делают в Stack Overflow.
4710.06 4716.98 "Игорь Лабутин" И это на самом деле один из немногих, пожалуй, моментов, который я никогда не знал, как сделано в Stack Overflow.
4716.98 4724.38 "Игорь Лабутин" Вообще Stack Overflow довольно открытая компания, они очень много пишут про то, как они используют .NET и как у них все устроено внутри.
4724.38 4736.34 "Игорь Лабутин" Были и доклады про их внутреннюю архитектуру и про то, как это все устроено, но вот конкретно про то, такие тонкие технические моменты, как это сделано для конфигурации конкретно ASP.NET, никогда не было никаких статей и информации.
4736.34 4737.34 "Игорь Лабутин" Или я не видел.
4737.34 4738.34 "Игорь Лабутин" Теперь есть.
4738.34 4748.10 "Игорь Лабутин" И в общем ничего такого прям супер-секретного у них нету, они, конечно, читают все в порядке upsettings.json, потом upsettings.environment.json, то есть там dev/prod, какие у вас еще есть окружения.
4748.10 4753.34 "Игорь Лабутин" Дальше у них есть спецфайлик environment.settings.environment.json, я про них чуть позже расскажу.
4753.34 4756.70 "Игорь Лабутин" Ну и дальше стандартный набор из environment, variable и command-line arguments.
4756.70 4758.38 "Игорь Лабутин" В общем ничего интересного.
4758.38 4760.14 "Игорь Лабутин" В чем особенность?
4760.14 4769.38 "Игорь Лабутин" У Stack Overflow еще задолго до появления iConfiguration у них уже была некоторая поддержка так называемых site settings, то есть известно, что Stack Overflow это не один-единственный сайт.
4769.38 4781.26 "Игорь Лабутин" Возможно для .NET разработчиков StackOverflow.com это не единственный сайт, но на самом деле их там огромное семейство и языковые, и вообще по разным направлениям жизни, базы данных, изучение языков и так далее.
4781.26 4788.62 "Игорь Лабутин" И поэтому какие-то сеттинги могут быть вообще глобальны для всего Stack Overflow, а какие-то сеттинги могут быть специфичны для конкретного отдельного сайта.
4788.62 4811.66 "Игорь Лабутин" Механизм этот был давно поддержан в коде, но использовался он исходно не только для фичи сеттингов, для которых был придуман, но, как оказалось, по прошествии многих лет для огромной кучи информации, включая секреты, connection string, которые, вообще говоря, тоже частично секретные и должны зародиться в чем-то более подходящем, чем просто всем доступные сеттинг-файлы.
4811.66 4813.46 "Игорь Лабутин" Ну, как-то это все было не очень хорошо.
4813.46 4816.98 "Игорь Лабутин" Кроме того, можно было задавать дефолты, дефолты задавались через код.
4816.98 4823.46 "Игорь Лабутин" Понятное дело сменить такие дефолты означало, либо нужно конфигурить все места, либо пересобирать софт, тоже не круто.
4823.46 4833.50 "Игорь Лабутин" Для самого сайта Stack Overflow они хостятся на своих собственных серверах и там, я так понимаю, особых проблем нет, все работало и работает, но у Stack Overflow есть версия, которую можно поставить себе.
4833.50 4840.78 "Игорь Лабутин" И с распространением облаков понятно, что многие хотят, например, поставить Stack Overflow в какое-нибудь облако, в Azure, в AWS или еще куда-то.
4840.78 4844.26 "Игорь Лабутин" И тут возникает некоторая задачка.
4844.26 4853.22 "Игорь Лабутин" Если мы, допустим, живем в Azure, который мне чуть больше знаком, поэтому я буду говорить про него, то в Azure есть своя собственная поддержка конфигурации, поддержка секретов и надо как-то это все совместить.
4853.22 4855.06 "Игорь Лабутин" Поэтому они сделали следующую штуку.
4855.06 4861.86 "Игорь Лабутин" Они добавили в вот эти сайт-сеттинги поддержку промежуточной загрузки тех самых i-configurations.
4861.86 4870.34 "Игорь Лабутин" Теперь мы сначала берем дефолты из кода, потом берем i-configuration, а потом берем override, если есть какие-то там прям базы конкретно для конкретного instance.
4870.34 4872.42 "Игорь Лабутин" Все норм, как бы вообще прекрасно.
4872.42 4878.46 "Игорь Лабутин" Проблема в том, что в их дефолтном environment, то есть там, где крутится сам сайт Stack Overflow, нету никаких таких сервисов.
4878.46 4888.54 "Игорь Лабутин" Stack Overflow, казалось, не использует никаких сервисов для хранения секретов типа Vault'а или для каких-то там сервис-локаторов типа Consul, ничего такого нет.
4888.54 4890.74 "Игорь Лабутин" Все задано статически файликами.
4890.74 4895.86 "Игорь Лабутин" И поэтому пришлось сделать вот этот environment-settings.json и добавить его в общий список конфигураций.
4895.86 4898.74 "Игорь Лабутин" So far, so good, как говорят наши друзья-англичане.
4898.74 4905.62 "Игорь Лабутин" Проблема в том, что теперь мы все это грузим в единое пространство key-value ключиков конфигурации.
4905.62 4909.34 "Игорь Лабутин" И как я уже сказал, там, например, оказывается такая штука, как SQL connection string.
4909.34 4916.06 "Игорь Лабутин" Все бы хорошо, но SQL connection string - это на самом деле сложная строка, в которой есть огромное количество компонентов.
4916.06 4923.22 "Игорь Лабутин" Адрес SQL-сервера - это, наверное, не то чтобы сильно секрет, но это общая настройка, возможно, для environment или для одного сайта.
4923.22 4927.78 "Игорь Лабутин" User name и пароль для этого SQL-сервера, если используется SQL-сервер авторизация.
4927.78 4929.42 "Игорь Лабутин" А это уже вроде как секрет.
4929.42 4932.38 "Игорь Лабутин" И куда собирать такую строку - непонятно.
4932.38 4936.18 "Игорь Лабутин" В итоге Stack Overflow ребята решили, что мы сделаем по-простому.
4936.18 4944.34 "Игорь Лабутин" Мы будем хранить в конфигурации эту строку с placeholders'ами, примерно как interpolated string в C#, и будем в ней подменять значения.
4944.34 4948.82 "Игорь Лабутин" То есть там будет написано, что там user id = $sql-user.
4948.82 4953.46 "Игорь Лабутин" И в момент рантайма $sql-user будет браться тоже откуда-нибудь из конфигурации.
4953.46 4960.34 "Игорь Лабутин" Чтобы это все поддержать, они добавили новый экстенджер-метод, называется with-substitution, куда можно тоже передать некоторые билдеры для конфигурации.
4960.34 4962.14 "Игорь Лабутин" И там будут все эти замены произведены.
4962.14 4967.38 "Игорь Лабутин" Все бы хорошо, но теперь у нас все грузится в конфигурацию, все substitutes.
4967.38 4972.06 "Игорь Лабутин" Но для того, чтобы соститутился $sql-user и $sql-parole, они должны быть тоже в этой конфигурации.
4972.06 4975.02 "Игорь Лабутин" И они, получается, лежат там же рядышком.
4975.02 4979.66 "Игорь Лабутин" В принципе, никто не мешает их случайно заиспользовать откуда-то из кода.
4979.66 4984.38 "Игорь Лабутин" Поэтому, чтобы такого не было, ребята пошли еще дальше и они добавили новый хелпер.
4984.38 4988.54 "Игорь Лабутин" Теперь можно загрузить конфигурацию и задать глобальный префикс.
4988.54 4995.62 "Игорь Лабутин" И, соответственно, в некотором роде получится, что вся конфигурация будет дочерним узлом этого глобального префикса.
4995.62 4998.42 "Игорь Лабутин" И у вас ко всем вашим ключикам добавили новый префикс.
4998.42 5003.78 "Игорь Лабутин" Вот, это, соответственно, они грузят какие-то настройки с префиксом "globals", секреты с префиксом "secrets".
5003.78 5009.18 "Игорь Лабутин" И таким образом, для того, чтобы обратиться к секретам, вам нужно явно написать слово "syssecret" где-то в ключике.
5009.18 5012.74 "Игорь Лабутин" И это как бы даст вам намек, что вообще-то вы работаете с секретами.
5012.74 5033.46 "Игорь Лабутин" А бонусом ко всему этому послужило то, что, поскольку iConfiguration, он очень клевый, и некоторые провайдеры для iConfiguration поддерживают рантайм изменения сеттингов, а ажурный как раз-таки поддерживает, то если вы хотите идти в ажуре, то изменяя сеттинги в ажурном UI-чике на портале, вы по сути в рантайме прямо их пропагейтите дальше в приложении.
5033.46 5038.34 "Игорь Лабутин" Мы, кстати, этим тоже пользуемся, очень удобно менять уровни логирования прямо на лету, прям зашибись.
5038.34 5039.34 "Игорь Лабутин" Работает хорошо.
5039.34 5073.70 "Игорь Лабутин" И я бы это все так рассказывал, это все так теория, в принципе это все можно написать самим, но если вас что-то заинтересовало, вы как-то чувствуете, что у вас есть какие-то похожие проблемы, там конфигурация становится очень большой, секреты путаются вместе с не секретами, то посмотрите на пакет stack-exchange.utils, это Nugetik, который под достаточно свободной лицензией лежит на GitHub'е, на Nugetork'е, и там как раз-таки есть все эти extension методы про конфигурацию, которые я описал, ну а также есть еще небольшой набор хелперов для HTTP-клайнта, которые чуть упрощают жизнь с HTTP-клайнтом для стандартных сценариев.
5073.70 5079.10 "Игорь Лабутин" Но опять же, это стандартные сценарии Stack Overflow, возможно вам они будут неактуальны, а может наоборот очень хорошо зайдут.
5079.10 5086.10 "Игорь Лабутин" Но я думаю, что просто еще один полезный пакетик в копилку и мысленно подумать про конфигурацию, про порядок и так далее.
5086.10 5088.54 "Анатолий Кулаков" Да, отличный пакет, я думаю, многим пригодится.
5088.54 5098.50 "Анатолий Кулаков" Следующую статью написал Халит Абухамех, и он рассмотрел текущее состояние open-source attributions в дот-нете.
5098.50 5100.50 "Анатолий Кулаков" Игорь, а какое у нас текущее состояние?
5100.50 5103.14 "Игорь Лабутин" Ну как, текущее состояние, что их нужно делать.
5103.14 5111.02 "Игорь Лабутин" Для тех, кто не знаком с терминологией, расскажу, что open-source attribution - это по сути выполнение требований лицензии.
5111.02 5128.86 "Игорь Лабутин" Если вы используете какой-то пакет с лицензией, открытый, то некоторые лицензии, например MIT, Apache, требуют, чтобы в лицензии вашего продукта было указано, что используется такой-то пакет, дл, файлик, кусочек кода такого-то автора, который был под такой-то лицензией.
5128.86 5134.14 "Игорь Лабутин" И там в разных лицензиях по-разному, иногда нужно приложить текст оригинальной лицензии того, кого вы используете.
5134.14 5151.74 "Игорь Лабутин" Все бы хорошо, проблема в том, что в нашем современном мире все больше и больше мы стремимся к огромному количеству Nuget пакетов, даже сам Microsoft теперь распространяет ASP.NET Core, как по сути, можно сказать, огромный большой набор Nuget-ов, и уследить за всем становится довольно сложно.
5151.74 5162.94 "Игорь Лабутин" То есть формально выполнить требования всех лицензий и аккуратненько в вашем продукте указать все возможные лицензии всех продуктов, всех Nuget-пакетов, которые вы заиспользовали, может быть на самом деле проблематичным.
5162.94 5165.50 "Игорь Лабутин" А как другие инфраструктуры с этим справляются?
5165.50 5169.58 "Игорь Лабутин" Ну, вот Халид приводит пример JavaScript World.
5169.58 5181.10 "Игорь Лабутин" В npm-е, соответственно, есть пакетик специальный - OSS Attribution Generator, который имеет возможность пройтись по всем зависимостям вашего проекта.
5181.10 5197.50 "Игорь Лабутин" То есть вы его забираете к себе в проект, запускаете, и он пробегает по всем зависимостям вашего проекта, и из всех зависимостей аккуратненько собирает всю инфу, проверяет какие там типа лицензии, находит, собственно, сами файлики лицензий на GitHub, если они есть, и все это аккуратненько собирает в готовый файлик, который вы просто берете и включаете в ваш продукт.
5197.50 5198.50 "Игорь Лабутин" Там все будет.
5198.50 5203.34 "Игорь Лабутин" Если, конечно, те пакеты, которые вы используете, были забраны с официальных репозиторий npm.
5203.34 5209.70 "Игорь Лабутин" Проблема в том, что для того, чтобы это все работало, нужно, чтобы было выполнено несколько вещей.
5209.70 5213.10 "Игорь Лабутин" Во-первых, нужен тулинг, чтобы это все собрать и собрать в файлик.
5213.10 5216.78 "Игорь Лабутин" И вот ощущение, что в дотнете с этим тулингом как-то пока не очень.
5216.78 5218.38 "Игорь Лабутин" Мы, по крайней мере, найти такое не смогли.
5218.38 5220.46 "Игорь Лабутин" Если вы вдруг какое-то такое знаете, подскажите.
5220.46 5224.78 "Игорь Лабутин" Второе, нужно, чтобы вся информация о лицензиях была в этих самых, хотя бы в NuGet.
5224.78 5228.06 "Игорь Лабутин" И, в принципе, кажется, что для большинства пакетов она сейчас уже есть.
5228.06 5233.62 "Игорь Лабутин" Крайне мере, атрибутики вроде на GitHub, не на GitHub, а на NuGet.org показываются.
5233.62 5236.02 "Игорь Лабутин" Так что, скорее всего, сейчас дело только в тулинге.
5236.02 5242.02 "Игорь Лабутин" И от того, чтобы легко и просто выполнять требования лицензий, нас отделяет один единственный шаг.
5242.02 5257.98 "Игорь Лабутин" Это просто хороший удобный тулинг, чтобы собрать все используемые вами NuGet пакеты и из них сгенерить один большой новый, не знаю, Markdown файл, который вы сможете положить либо на ваш сайт, либо прямо в продукт со словами "Вот мы используем такие-то пакеты с такими-то лицензиями".
5257.98 5260.02 "Игорь Лабутин" Это было бы, наверное, самое правильное.
5260.02 5264.10 "Анатолий Кулаков" Да, отличное место, куда можно применить свои силы, сделать полезную утилиту.
5264.10 5268.18 "Анатолий Кулаков" И, кстати, для очень богатых интерпрайс-компаний.
5268.18 5275.26 "Анатолий Кулаков" Потому что такая штука прежде всего нужна тем компаниям, у которых есть юристы, которые бродятся, боятся за свой авторитет и так далее.
5275.26 5276.78 "Анатолий Кулаков" Странно, что ее до сих пор не появилось.
5276.78 5281.02 "Игорь Лабутин" Ну, может быть, они и есть, просто может быть спрос не такой большой, непонятно.
5281.02 5285.62 "Игорь Лабутин" Мы в какой-то момент, где-то около 2 лет назад искали и мы ничего не нашли.
5285.62 5292.98 "Игорь Лабутин" Есть еще у Халида расширение этой идеи, потому что то, что я описал, оно все-таки работает на уровне NuGet пакетов.
5292.98 5315.30 "Игорь Лабутин" Возможно, в принципе, теоретически вы можете забрать какую-то зависимость не NuGet пакетом, это с одной стороны, а с другой стороны вы можете захотеть, например, если вы пишете свой продукт, вставить эту информацию как-то в ваш продукт автоматически и тут можно даже попробовать поиспользовать какие-нибудь Source генераторы, автоматически погенерить, не знаю, Razor View, еще что-нибудь такое.
5315.30 5319.38 "Игорь Лабутин" Стандартный способ отображения этой штуки в любом, например, веб-продукте или еще что-нибудь.
5319.38 5321.54 "Игорь Лабутин" Короче, работы можно придумать много.
5321.54 5330.22 "Игорь Лабутин" Если вам эта тема интересна, и вообще open source, и лицензии вокруг этого дела, то вот можно погуглить, посмотреть, порыться, что есть готового.
5330.22 5331.94 "Игорь Лабутин" А если ничего нет, написать.
5331.94 5335.02 "Анатолий Кулаков" Да, всегда можно изобрести что-нибудь новое и интересное.
5335.02 5336.50 "Анатолий Кулаков" Ну что, пойдем дальше.
5336.50 5345.30 "Анатолий Кулаков" В прошлом выпуске мы рассказывали о ресурсах, которые мы читаем, слушаем, смотрим и как оказалось, что мы не только читаем, но мы еще слушаем и смотрим.
5345.30 5355.54 "Анатолий Кулаков" Поэтому мы подумали, что хорошо давать рекомендации и освещать не только статьи, но и интересные для разработчиков подкасты, выпуски подкастов или что-то в этом духе.
5355.54 5359.82 "Анатолий Кулаков" Поэтому сейчас мы анонсируем нашу новую рубрику, которая называется "Подслушано".
5359.82 5367.34 "Анатолий Кулаков" Это те интересные подкасты, которые мы прослушали за это время и которые могли бы быть интересны вам.
5367.34 5371.82 "Анатолий Кулаков" Поэтому мы кратко о них расскажем, а вы уже сами смотрите, интересна вам эта тема или нет.
5371.82 5375.42 "Анатолий Кулаков" Если интересно, пройдите, поддержите наших коллег, послушайте их выпуски.
5375.42 5382.90 "Игорь Лабутин" Начнем, пожалуй, тогда с немножко, может быть, совсем относящегося к программированию подкастов.
5382.90 5388.38 "Игорь Лабутин" Это "Link Me Up", исходный подкаст про сети, но у них есть довольно много разных интересных разделов.
5388.38 5398.54 "Игорь Лабутин" Вот конкретно недавно я прослушал выпуск у них, который сначала по названию мне показалось будет не сильно интересным, назывался он "Олды и Айти".
5398.54 5402.66 "Игорь Лабутин" Я вроде как еще не совсем old, мне кажется, хотя, может быть, приближаюсь к этому времени.
5402.66 5406.30 "Игорь Лабутин" Но в итоге оказался довольно полезный подкаст.
5406.30 5412.46 "Игорь Лабутин" Гостем был товарищ, который в 40+ лет устроился в Amazon и прекрасно там работает.
5412.46 5429.62 "Игорь Лабутин" И он как раз-таки довольно неплохо структурировал то, как ваша карьера может развиваться по мере вашего возрастления, что становится важным на разных этапах и вообще как себя вести, на что обращать внимание, как бороться с какими-то проблемами, которые возникают по пути.
5429.62 5439.02 "Игорь Лабутин" В общем, если вы чувствуете себя не очень молодым, если вы чувствуете кризис среднего возраста в Айти, послушайте, возможно, вы найдете пару практических советов.
5439.02 5443.18 "Анатолий Кулаков" Если "Link Me Up" говорила про лдов, то у меня есть противовес.
5443.18 5449.50 "Анатолий Кулаков" Подлодки как раз-таки рассуждали то, как лучше развиваться джуниор-разработчиком и вообще разработчиком в целом.
5449.50 5452.54 "Анатолий Кулаков" В гостях у них был Кирилл Макевнин, это SEO хекслета.
5452.54 5456.34 "Анатолий Кулаков" И они затрагивали такие темы, что же такое вообще хороший программист.
5456.34 5463.22 "Анатолий Кулаков" Затрагивали языки, парадигмы разработки, чем они отличаются, какие нужно изучать, какие нужны, какие нет.
5463.22 5479.62 "Анатолий Кулаков" Тестирование, нужно ли знать сети, нужно ли знать базы данных, как работать правильно в команде, как целиться на результат, как развиваться и обучаться, начиная всем от джуниора и уже не останавливаясь более старшим профессиям.
5479.62 5495.06 "Анатолий Кулаков" То есть, если вас интересуют такие вопросы, как с чего начать учиться, как строить, выстраивать свою карьеру, каким образом мне поддерживать свои скиллы, если вы находитесь на раннем этапе этого пути, то возможно, вам будет интересен подкаст с Кириллом Макевниным.
5495.06 5500.78 "Анатолий Кулаков" В DevZen'е была интересная тема, у них в гостях были авторы Victoria Matrix.
5500.78 5506.90 "Анатолий Кулаков" Victoria Matrix - это, если кто не знает, новая система по сбору метрик.
5506.90 5514.06 "Анатолий Кулаков" Она от 3 до 70 раз быстрее, чем другие приложения по этой теме сейчас на рынке.
5514.06 5520.82 "Анатолий Кулаков" У нее очень быстрая обработка данных, где-то в 10 раз быстрее, чем другие.
5520.82 5527.26 "Анатолий Кулаков" Когда я говорю другие, здесь в основном подразумевается Prometheus, чтобы было понятнее, про что это.
5527.26 5532.10 "Анатолий Кулаков" У нее хорошая система альертинга со сложными рулами и очень простым UI.
5532.10 5542.58 "Анатолий Кулаков" У нее есть большой спектр поддерживаемых протоколов, в нее можно писать из графита, Influx, OpenTSDB, Prometheus и многих-многих других.
5542.58 5552.50 "Анатолий Кулаков" Victoria Matrix - это довольно свежая система, она довольно недавно выстрелила, на нее есть куча хороших интересных статей и вот авторы в гостях у DevZen.
5552.50 5558.14 "Анатолий Кулаков" Они рассказывали о истории, как они вообще пришли к этой идее.
5558.14 5563.54 "Анатолий Кулаков" Изначально они сами собирали метрики и увидели, что на их условиях, на их объемах Prometheus не справляется.
5563.54 5576.22 "Анатолий Кулаков" В принципе, очень часто другие люди к этому приходят и они увидели среди своих друзей те же самые проблемы, решили сделать продукт, который в принципе как Prometheus по функциональности, но только сделанный правильно.
5576.22 5587.46 "Анатолий Кулаков" Если кто не знает, то Prometheus первый - это был абсолютный позор с автостроения, это был ужасный продукт, никчемные решения, мега тупой автор и все такое.
5587.46 5597.34 "Анатолий Кулаков" К версии Prometheus 2 автору, судя по всему, кто-то подарил книгу о том, как пишутся сетевые приложения, он немножко исправился и им хотя бы возможно было пользоваться.
5597.34 5601.26 "Анатолий Кулаков" Но все же это является примером крайне плохого приложения.
5601.26 5611.26 "Анатолий Кулаков" И интересный подход у Victoria Matrix в том, что они пытаются делать свой продукт как можно более совместимым с Prometheus.
5611.26 5619.70 "Анатолий Кулаков" То есть для вас, как для пользователя Prometheus, нужно просто-напросто взять Victoria Matrix, заместить Prometheus и все, и больше ничего не трогать.
5619.70 5628.42 "Анатолий Кулаков" Он автоматически начнет принимать в том же формате, в котором принимал Prometheus, вы можете точно так же строить из графана ваши любимые отчеты с тем же самым синтексисом запросов.
5628.42 5630.74 "Анатолий Кулаков" В общем, такой полностью ход реплейс.
5630.74 5637.54 "Анатолий Кулаков" И соответственно это очень хороший кейс, который позволяет вам сравнить два продукта практически абсолютно ничем не рискуя.
5637.54 5641.26 "Игорь Лабутин" Если вы любитель английского, то послушайте DotNet Rocks.
5641.26 5647.06 "Игорь Лабутин" Мы уже упоминали, что вышел новый релиз Identity Server и обсуждали подробно, что там новенького.
5647.06 5651.82 "Игорь Лабутин" Так вот в гостях у DotNet Rocks были как раз-таки Доминик Пайер и Брок Айленд, авторы.
5651.82 5656.10 "Игорь Лабутин" И они подробно рассказали, что там новенького, какие планы и так далее.
5656.10 5657.66 "Игорь Лабутин" Так что слушайте.
5657.66 5665.74 "Анатолий Кулаков" Наш хороший друг Алексей Мерсон, также известен миру как мега специалист по DDD, сходил в подкаст Слушайте Весла.
5665.74 5679.30 "Анатолий Кулаков" Там они обсуждали, что же такое DDD, что можно почитать, посмотреть по этой теме, обсуждали опыт Алексея применительно к его работе, где и как он применяет эти техники, как они ему помогают, что работает, что не работает.
5679.30 5685.18 "Анатолий Кулаков" Также затронули темы Event Sourcing, CQRS и прочих веселых базоворотов, о которых каждый мечтает знать.
5685.18 5694.26 "Анатолий Кулаков" Поэтому если вам нравится, как излагает Алексей Мерсон, если вам хочется больше узнать про DDD, Event Sourcing, CQRS, попробуйте подкаст Сушите Весла.
5694.26 5696.74 "Игорь Лабутин" Ну и на этом сегодня, я думаю, нужно завершать.
5696.74 5703.58 "Игорь Лабутин" Когда мы начинали готовить этот выпуск, казалось, что там будет исключительно мало материала, но фактически оказалось прям огромное количество.
5703.58 5707.90 "Игорь Лабутин" Я не знаю финальную длину, которая получится, но кажется, что это будет довольно длинный подкаст.
5707.90 5714.30 "Игорь Лабутин" И за это время мы успели обсудить C# 9 читшит, а также восьмерку и семерку, если интересно.
5714.30 5719.46 "Игорь Лабутин" Посмотрели подробный обзор, что было улучшено в DotNet 5 с точки зрения нетворка.
5719.46 5726.18 "Игорь Лабутин" Посмотрели, что было сделано в System Text.json и что будет сделано возможно в DotNet 6.
5726.18 5731.78 "Игорь Лабутин" Узнали очень амбициозные планы команды Identity Framework Core на версию 6.
5731.78 5736.66 "Игорь Лабутин" Посмотрели на Duend Identity Server Release версии 5, какие там фичи появились.
5736.66 5749.50 "Игорь Лабутин" Толя представил крутейший обзор топ-3, ну может быть не топ-3, но его личных топ-3 докладов на Гидре 2020, но я рекомендую посмотреть весь плейлист, там наверняка вы найдете что-то интересное.
5749.50 5760.46 "Игорь Лабутин" Дальше мы пошли в более практическую часть, посмотрели на то, как влияют варианты паблиши вашего дотнет-приложения на размеры докер-образов и что нужно выбирать в вашем продукте.
5760.46 5768.50 "Игорь Лабутин" Глянули на список тулов Хохота Хансельмана и посмотрели, что может быть вам полезно из этого списка.
5768.50 5783.62 "Игорь Лабутин" Обсудили немножко штуку с конфигурацией ISP.NET Core, как вообще Stack Overflow подходит к работе с IConfiguration Abstraction и немножко обсудили, что же делать с лицензиями в Open Source мире вокруг дотнета.
5783.62 5791.30 "Игорь Лабутин" Напоследок рассказали про то, чем мы занимались в последнее время, какие выпуски, каких подкастов нас зацепили и что мы рекомендуем вам послушать.
5791.30 5802.42 "Анатолий Кулаков" Если у вас еще есть какие-то идеи или вы хотите поделиться фидбэком об этом выпуске, милости просим, мы ждем вас на любой нашей социальной сети, приходите, рассказывайте, отвечайте.
5802.42 5803.42 "Анатолий Кулаков" А на этом, видимо, все.
5803.42 5804.42 "Анатолий Кулаков" Всем пока.
5804.42 5806.42 "Игорь Лабутин" Всем счастливо, до новых встреч.
5806.42 5807.42 "Игорь Лабутин" Счастливо.
5807.42 5807.42 None Пока.
5808.42 5808.42 None Пока.
