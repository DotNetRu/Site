0.00 6.24 "Анатолий Кулаков" Здравствуйте, друзья!
6.24 14.42 "Анатолий Кулаков" С вами четвертый выпуск радио.нет, и сегодня этот выпуск с вами проведут Анатолий Кулаков и Игорь
14.42 15.42 "Игорь Лабутин" Лабутин.
15.42 18.26 "Анатолий Кулаков" Привет! Вот, а начать мне хочется с радостной новости.
18.26 21.54 "Анатолий Кулаков" Наконец-то наш подкаст обрел постоянный хороший дом.
21.54 27.04 "Анатолий Кулаков" Мы переехали на хостинг Concore и столкнулись с неожиданными проблемами.
27.04 34.68 "Анатолий Кулаков" Игорь, ты на вскидку сколько знаешь сервисов, в которых можно бесплатно выложить видео для того, чтобы поделиться там со своими друзьями?
34.68 35.68 "Игорь Лабутин" Видео или аудио?
35.68 36.68 "Игорь Лабутин" Видео – это YouTube.
36.68 39.20 "Игорь Лабутин" Аудио сложнее.
39.20 50.20 "Анатолий Кулаков" Меня удивило в принципе именно сравнение с видео, потому что про видео действительно у нас есть и YouTube, и Vimeo, и Яндекс.Видео, и более извращенные какие-то хостинги.
50.20 57.76 "Анатолий Кулаков" Ну, казалось, во время дешевого сториджа выложить куда-то видосик уже не составляет проблемы, и все свыклись с этим как с должным.
57.76 63.12 "Анатолий Кулаков" И ничто не предвещало как бы беды выложить то же самое, но только аудио.
63.12 71.00 "Анатолий Кулаков" То есть файлики, которые занимают в десятки раз меньше места, которые требуют в десятки раз меньше вычислительной мощности и прочего.
71.00 73.24 "Анатолий Кулаков" То есть обычный хостинг подкастов.
73.24 79.48 "Анатолий Кулаков" И вот с бесплатным хостингом подкастов абсолютная беда в этом мире, потому что его просто не существует.
79.48 82.24 "Анатолий Кулаков" Платные хостинги есть, бесплатных нет.
82.24 85.48 "Анатолий Кулаков" При всем многообразии хостинга бесплатных для видео.
85.48 87.24 "Анатолий Кулаков" И кажется ли тебе это какой-то дичью?
87.24 91.72 "Игорь Лабутин" Ну, с одной стороны кажется, с другой стороны, видимо, все дело в рекламе.
91.72 100.64 "Игорь Лабутин" В видео все просто и понятно, можно вставлять кучу рекламы перед и после, а в звуке как-то, наверное, не очень это популярно, что ли.
100.64 102.40 "Игорь Лабутин" Или не монетизируется.
102.40 103.40 "Игорь Лабутин" Может в этом дело.
103.40 107.12 "Анатолий Кулаков" Ну, хорошее предположение, но меня как пользователя такие мелочи мало волнуют.
107.12 108.96 "Анатолий Кулаков" Не умеют монетизироваться, пусть учатся.
108.96 117.12 "Анатолий Кулаков" Но на всем этом ужасном, коррумпированном, капиталистическом безрыбье нашелся один-единственный нормальный игрок.
117.12 119.16 "Анатолий Кулаков" Это как раз-таки Anker.
119.16 122.08 "Анатолий Кулаков" Anker это абсолютно бесплатный хостинг для подкастов.
122.08 135.28 "Анатолий Кулаков" Он нас любезно принял, синтегрировал нас с более чем 10 разными подкастинговыми площадками, в том числе и с Apple подкастами, и с Google подкастами.
135.28 146.56 "Анатолий Кулаков" Поэтому вы нас теперь можете смело там находить, рекомендовать друзьям, которые работают на любых платформах, и всячески рекламировать, за что мы вам будем очень-очень признательны.
146.56 148.36 "Анатолий Кулаков" В общем, мы свой дом нашли.
148.36 156.92 "Анатолий Кулаков" Если вдруг кто-то еще решится записывать подкасты, имейте в виду, шикарный сервис, не требует никакой рекламы, ни оплаты, ничего.
156.92 160.08 "Анатолий Кулаков" Очень минималистичный, красивый, удобный и функциональный.
160.08 161.64 "Игорь Лабутин" Без регистрации смс.
161.64 162.64 "Анатолий Кулаков" Прекрасно.
162.64 164.40 "Анатолий Кулаков" Да, минутка самой рекламы закончилась.
164.40 165.40 "Анатолий Кулаков" Давай теперь к темам.
165.40 167.36 "Анатолий Кулаков" У нас было что-нибудь интересное?
167.36 171.04 "Игорь Лабутин" С момента, когда мы записывались последний раз, интересно действительно произошло.
171.04 176.96 "Игорь Лабутин" Если я правильно помню, последний выпуск мы закончили словами, что мы ждем выпуска Netcore.
176.96 177.96 "Игорь Лабутин" Netcore выпустился.
177.96 180.84 "Игорь Лабутин" Выпустился 3.0, как Microsoft и обещали.
180.84 185.68 "Игорь Лабутин" В нем куча-куча-куча разных фич.
185.68 195.04 "Игорь Лабутин" Про часть из них мы уже говорили, про часть из них мы не говорили, но давайте, наверное, кратенько пробежимся по тому, что же нам завезли в Netcore 3.0 для начала.
195.04 210.76 "Игорь Лабутин" И начать хочется с того, что вам для использования Netcore 3.0 нужно всего лишь поставить Visual Studio 2019 Update 16.3, либо Visual Studio for Mac 8.3, если вы ей пользуетесь, и у вас появится сразу Netcore 3.0.
210.76 215.28 "Игорь Лабутин" Вам, по сути, даже не нужно ставить отдельно в SDK Netcore 3.0, сразу вместе со студией поставиться.
215.28 220.08 "Игорь Лабутин" Давай вспомним, какие у нас есть ключевые фишки этого 3.0 релиза.
220.08 226.96 "Анатолий Кулаков" Давай только кратко, потому что, насколько я помню, там про каждую фишку можно просто часами рассуждать, поэтому по всему анонсу мы бегать не будем.
226.96 229.00 "Анатолий Кулаков" Давай вот основные моменты и кратенько.
229.00 234.84 "Игорь Лабутин" Основной момент номер один, и для меня, наверное, самый главный, это улучшение производительности.
234.84 241.60 "Игорь Лабутин" В Netcore 3.0 завезли всякие спаны и прочие штуки, и там все стало быстро, круто и замечательно.
241.60 255.60 "Игорь Лабутин" Кроме этого, завезли много разных интересных фич C# 8, которые мы, возможно, еще обсудим, хотя их уже много раз и обсуждали и в видео, и в докладах различных конференций, митапов и различных подкастов.
255.60 264.20 "Игорь Лабутин" Помимо C#, на самом деле, обновилась версия CKF#, он получил версию 4.7, и это то, что касается языковых штук.
264.20 282.76 "Игорь Лабутин" Касательно фреймворка, в целом, мы получили новый .NET STANDARD 2.1, в который вошли новые API, которые появились в Netcore 3.0, и одно из самых интересных для меня вещей - это в Netcore 3.0 возродили WPF с Informs, что позволяет теперь достаточно просто и легко мигрировать десктопные приложения на Netcore.
282.76 284.48 "Игорь Лабутин" C#, правда, только на Windows.
284.48 296.48 "Игорь Лабутин" Но при этом буквально недавно, неделю или около того назад, Microsoft объявила, что хоть Informs мы перенесли, но мы на самом деле деприкейтим часть контролов, которые вообще использовать не надо.
296.48 300.76 "Игорь Лабутин" Их давно уже не надо использовать, но они все еще были, вот мы их наконец-таки убираем.
300.76 302.44 "Игорь Лабутин" Поэтому на самом деле там все будет.
302.44 306.72 "Анатолий Кулаков" Насколько я помню, это контроллы, которые задеприкейтились еще в версии .NET 2.0.
306.72 312.60 "Анатолий Кулаков" То есть это контроллы из первого .NET, во втором им пришли хорошие замены, и первые задеприкейтились.
312.60 314.20 "Анатолий Кулаков" Их сейчас наконец-то выкинули.
314.20 325.48 "Игорь Лабутин" Все так, но я так это быстренько порылся с нашей кодовой базой, то ли мы такие динозавры, то ли еще что-то, но по-моему один или два контроллов я у нас нашел из тех самых, которые задеприкейчены.
325.48 329.08 "Игорь Лабутин" Как они там оказались, не знаю, но меня это сильно удивило.
329.08 332.28 "Анатолий Кулаков" Это было 15 лет назад, хватит, давайте уже переезжаем.
332.28 333.28 "Игорь Лабутин" Да, да, да.
333.28 337.60 "Игорь Лабутин" Linux, все дела, выкинули десктоп и побежали в светлое будущее.
337.60 351.56 "Игорь Лабутин" Кроме этого в светлое будущее нам обещают другой немножко улучшенный механизм публикации приложений, то есть у нас теперь появились не только длл в виде аутпута, но теперь можно сделать exe, можно их потримить, то есть уменьшить размер.
351.56 359.16 "Игорь Лабутин" Появилась собственно частичная линковка, то есть не все длл можно включать, если dp не используется.
359.16 362.92 "Игорь Лабутин" И много других штук вокруг этого.
362.92 365.68 "Игорь Лабутин" Далее, в каком бы порядке это все рассказать.
365.68 368.68 "Игорь Лабутин" Ну, давайте в том, в котором Microsoft это рассказывает.
368.68 389.68 "Игорь Лабутин" Microsoft написала свой собственный JSON-сериалайзер, который шустрее и гораздо более оптимальнее работает с точки зрения расхода памяти по сравнению с Newtonsoft, но он не абсолютно на 100% с ним совместим, поэтому могут быть случаи, где Newtonsoft все еще нужно использовать и можно продолжать его использовать дальше.
389.68 402.12 "Игорь Лабутин" Но если у вас есть код, который критичен к перформансу, например какие-то IP-эндпоинты, которые очень часто дергаются, то рассмотрите JSON-сериалайзер новый Microsoft, который будет использовать всю мощь новых фишек Netcore.
402.12 408.36 "Анатолий Кулаков" Кстати, интересный факт, автор Newtonsoft JSON, James Newton King, сейчас работает в Microsoft.
408.36 417.44 "Игорь Лабутин" Да, и автор Newtonsoft JSON в библиотеке для сериализации JSON работает, как я понимаю, в надподдержке gRPC.
417.44 420.68 "Игорь Лабутин" Вот такой забавный факт, если я не ошибаюсь, конечно.
420.68 441.68 "Игорь Лабутин" Помимо этого, DotNetCore соптимизировали для работы в докере, то есть DotNetCore собственно предназначался в каком-то смысле всегда для работы внутри докер-контейнеров, но из-за того, что garbage collector в нем был заточен под работу в полноценной операционной системе, он вел себя не очень адекватно на тех объемах памяти, которые иногда можно увидеть в докерах.
441.68 447.40 "Игорь Лабутин" То есть когда мы выделяем не так много гигабайт контейнеру, garbage collector вел себя не очень адекватно.
447.40 449.88 "Игорь Лабутин" Сейчас это все подтвикали и все должно стать хорошо.
449.88 461.52 "Игорь Лабутин" Ну и последнее из таких больших вещей - это новые платформы, DotNetCore работает на ARM, DotNetCore работает на Raspberry Pi и мы ждем дальше увеличения количества поддерживаемых платформ в будущем.
461.52 465.32 "Игорь Лабутин" Это очень кратенько про NetCore 3.0, релиз.
465.32 480.80 "Игорь Лабутин" Надо понимать, что это важный, нужный и очень большой и давно ожидаемый релиз, но он поддерживается Microsoft всего-то до марта 2020 года, после чего он станет неподдерживаемым и его по-хорошему не нужно будет уже использовать в продакшене.
480.80 486.56 "Игорь Лабутин" А вместо него нужно будет использовать DotNetCore 3.1, который тоже зарелизили за то время, пока нас не было.
486.56 493.44 "Игорь Лабутин" И для этого вам нужно поставить студию 2019-16.4, всего лишь минорный апдейт студии и вы получаете новую SDK.
493.44 496.36 "Анатолий Кулаков" 3.1 - это уже будет long-term support, я правильно понимаю?
496.36 500.12 "Игорь Лабутин" Да, 3.1 - это long-term support, это значит три года с момента релиза.
500.12 507.44 "Игорь Лабутин" То есть три года вы можете быть уверенны, что Microsoft будет выпускать патчи и всякие security апдейты для NetCore 3.1.
507.44 516.08 "Игорь Лабутин" Раз уж мы заговорили про support, нужно упомянуть DotNetCore 2, он тоже еще не умер и довольно много кода живет на NetCore 2.
516.08 523.48 "Игорь Лабутин" И там тоже есть две версии, есть версия 2.2, которая была последней, насколько я помню, в NetCore 2.
523.48 531.84 "Игорь Лабутин" И у нее support заканчивается вот буквально на днях 23 декабря, а версия 2.1, она является LTS, и она будет поддерживаться три года.
531.84 540.12 "Игорь Лабутин" Так что если у вас код на NetCore 2.1, вы можете до августа 2021 года не беспокоиться и на нем счастливо жить, потихонечку планируя миграцию на 3.1.
540.12 544.80 "Игорь Лабутин" Но или на DotNet 5 или DotNet 6, кто там будет уже в то время.
544.80 556.48 "Анатолий Кулаков" Разница между DotNetCore 3.1 и 3.0 в принципе не очень существенная, это в основном стабильность, стабильность, performance и improvements, то есть никаких новых фич практически не прибавилось и не убавилось.
556.48 557.88 "Игорь Лабутин" Ну и это здорово.
557.88 577.40 "Игорь Лабутин" То есть на самом деле здорово, что Microsoft выпускает такие важные и правильные релизы, и мне на самом деле очень нравится схема, когда выпускается большой релиз с кучей фич, не как LTS вариант, а чуть погодя, через несколько месяцев выпускается уже LTS отполированный и с уже боевым, возможно, применением всех этих фич на реальных
577.40 590.88 "Анатолий Кулаков" проектах. А вместе с DotNetCore 3.1 также обновились и ISP.NET и Entity Framework, которые тоже переехали на стабильную LTS версию коры и в принципе это их главное достижение.
590.88 592.52 "Анатолий Кулаков" Или они каких-то фишек тоже прибавили?
592.52 606.00 "Игорь Лабутин" Ну в 3.1, насколько я помню, там каких-то особых нововведений тоже не было, это в основном перформансы, полировка, стабильности, но вот про Entity Framework Core 3 можно поговорить отдельно.
606.00 623.80 "Игорь Лабутин" Это моя в каком-то смысле персональная боль, потому что мы попробовали использовать Entity Framework Core в проекте и натолкнулись на несколько трудностей, в особенности в том, как Entity Framework транслирует наш LinkU код в SQL-запросы.
623.80 645.92 "Игорь Лабутин" На достаточно каких-то простых LinkU выражениях, с парой-тройкой include, которые должны были бы преобразоваться на join-а дочерних таблиц, Entity Framework Core выдавал классический SQL с проблемой 1+n, когда был один запрос в родительскую табличку и потом по одному запросу на каждую запись в родительской табличке для того, чтобы прочитать данные из дочерних таблиц.
645.92 648.96 "Игорь Лабутин" И это, понятное дело, дотрамотило очень жутко.
648.96 664.16 "Игорь Лабутин" В Entity Framework Core 3, насколько я понимаю, очень сильно переписали механизм, отвечающий за трансляцию LinkU, и теперь утверждается, что генерация хорошей нормальной join-ы в достаточной степени оптимальной.
664.16 674.88 "Игорь Лабутин" Мы пока еще не попробовали это у себя, но я надеюсь, в ближайшие несколько месяцев все-таки к этому вернемся к вопросу и сможем как-то более квалифицированно понять, насколько там все стало лучше.
674.88 690.68 "Анатолий Кулаков" А также результатами того, что Entity Framework новый переехал на последний C#, 8-й, у него появилась нативная поддержка асинхронных стримов, с помощью которых вы теперь можете читать асинхронно ваши записи из баз данных, и нативная поддержка nullable reference types.
690.68 692.80 "Анатолий Кулаков" То есть они сейчас работают как required attribute.
692.80 704.04 "Анатолий Кулаков" То есть раньше вам нужно было проставлять специальный attribute required, а теперь, если вы используете non-nullable reference type, то Entity Framework сам понимает, что это обязательное поле, его нужно обязательно проставить.
704.04 707.64 "Анатолий Кулаков" Вот подобные такие фишечки, они тоже пронизаны в принципе в этом релизе.
707.64 716.00 "Игорь Лабутин" Да, это, кстати, очень хороший пример того, как non-nullable reference types, возможно, не очень стандартным способом использованы.
716.00 724.28 "Игорь Лабутин" То есть я не думал о таком методе их использования, когда они по сути являются заменой атрибутом, да, required, либо еще что-нибудь в таком духе.
724.28 728.04 "Игорь Лабутин" Там XML сериализация или JSON сериализация, такое тоже, наверное, будет полезно.
728.04 739.12 "Игорь Лабутин" Потому что я до сих пор с ужасом вспоминаю кошмары типа там поля, бла-бла и бла-бла specified при XML сериализации, которые нужно было проставлять в true обязательно, иначе ничего не сериализуется.
739.12 742.72 "Игорь Лабутин" Возможно nullable и non-nullable reference types этому помогут.
742.72 749.16 "Игорь Лабутин" Во внутренности HF Core есть еще одно важное изменение, которое довольно сильно может повлиять на то, как работает ваш код.
749.16 754.68 "Игорь Лабутин" В каком-то смысле можно сказать это breaking change между прошлой версией и тройкой.
754.68 763.28 "Игорь Лабутин" А именно это проблема или даже скорее не проблема, а особенность client-side evaluation выражений.
763.28 772.80 "Игорь Лабутин" Как мы знаем, если в linq коде написать выражение, которое Entity Framework не сможет оттранслировать в нормальный SQL, то у Entity Framework есть два варианта.
772.80 794.08 "Игорь Лабутин" Вариант первый — просто кинуть exception, сказать «я не умею такое в SQL», либо оттранслировать в SQL все, что оно может, получить данные из базы, а потом аккуратненько в памяти применить все остальные ваши хитро вывернутые функции, которые вы почему-то указали в качестве предикатов или еще где-то, или в проекциях.
794.08 798.80 "Игорь Лабутин" В Entity Framework 3.0 поведение поменялось.
798.80 812.48 "Игорь Лабутин" Если в версии 2 Entity Framework любыми средствами старался выполнить ваш запрос, то есть пусть даже ему придется материализовать всю таблицу в памяти и потом применить поверх ваши селекты, предикаты или еще что-то, он это будет делать.
812.48 814.68 "Игорь Лабутин" В Entity Framework Core 3 поведение полностью поменяно.
814.68 833.04 "Игорь Лабутин" Если на момент трансляции вашего LinkU в SQL он не может этого сделать, за исключением самого-самого-самого последнего селекта, то есть последней проекции, то будет runtime exception, что такое, такой хинтэсис я не знаю, и перепишите, пожалуйста.
833.04 850.36 "Игорь Лабутин" Можно ему явно указать, чтобы он это делал на клиенте, ну в смысле получал данные из базы и потом на клиенте все это эвалюировал, но для этого нужно указать в нужном месте, занумеровал, после чего с этого момента у вас все данные окажутся в памяти и дальше будут обрабатываться как linked objects.
850.36 851.88 "Игорь Лабутин" Это вот важное изменение.
851.88 853.64 "Игорь Лабутин" Ну и все, в общем-то.
853.64 861.16 "Анатолий Кулаков" Так, отлично, то есть Microsoft очень сильно и очень упорно толкает всех разработчиков на то, чтобы они переходили в новую версию фреймворка.
861.16 877.32 "Анатолий Кулаков" И они недавно анонсировали, что перенесли 80% всех тех API, которые есть в большом фреймворке в .NET Core, то есть это все для того, чтобы вам можно было удобнее мигрировать со старого больше неподдерживаемого фреймворка на новомодный Core.
877.32 880.00 "Анатолий Кулаков" И они объявили, что этот перенос закончен.
880.00 882.40 "Анатолий Кулаков" То есть на этих 80% они успокоились.
882.40 885.16 "Анатолий Кулаков" Игорь, нам хватит на 80%?
885.16 887.20 "Игорь Лабутин" Короткий ответ, конечно нет, не хватит.
887.20 892.80 "Игорь Лабутин" Наверняка найдется API, который не спортировали и который лично кому-то будет очень жалко.
892.80 893.80 "Игорь Лабутин" И я бы даже так сказал.
893.80 899.48 "Игорь Лабутин" Наверняка каждый из проектов встретит хотя бы один API, который почему-то не спортировали.
899.48 908.28 "Игорь Лабутин" Но дело в том, что наверняка есть адекватная замена, альтернатива, либо где-нибудь какой-нибудь новый Nuget пакетик на .NET Core, который эмулирует эту функциональность.
908.28 910.48 "Анатолий Кулаков" Ну давай вспомним кратко.
910.48 917.44 "Анатолий Кулаков" В основном, что не спортировали, это AppDomain, Remoting, WebForms, WCF и Windows Workflow.
917.44 921.84 "Анатолий Кулаков" Это в принципе вот такие большие глобальные вещи, которых не будет никогда.
921.84 922.84 "Игорь Лабутин" Да.
922.84 930.96 "Игорь Лабутин" И я бы сказал, что наверное из всего этого самое такое критичное с моей колокольни, по крайней мере, это WCF.
930.96 940.32 "Игорь Лабутин" Он действительно много кем пользовался и его отсутствие, ну скажем так, усложняет переход на .NET Core в некоторых проектах.
940.32 942.52 "Игорь Лабутин" Хотя бы, спасибо Microsoft, оставили клиентскую часть.
942.52 946.40 "Игорь Лабутин" Это по крайней мере позволяет половину проекта держать в .NET Core и половину держать в WCF.
946.40 948.16 "Игорь Лабутин" У нас так, например, сейчас.
948.16 955.44 "Анатолий Кулаков" Ну и появились open-source проекты, которые поддерживаются комьюнити, которые называются Core.WCF и Core.Workflow.
955.44 957.72 "Анатолий Кулаков" Поэтому тоже в принципе не сильно критично.
957.72 959.60 "Игорь Лабутин" Ну, надо посмотреть на их качества.
959.60 971.76 "Игорь Лабутин" Я имею в планах посмотреть, что там, в каком виде сейчас Core.WCF, потому что возможно это нам как-то облегчит переход на .NET Core, сделать его более плавным.
971.76 972.76 "Игорь Лабутин" Но посмотрим.
972.76 978.24 "Игорь Лабутин" Возможно, если я найду время и все это поизучаю, я про это как-нибудь интересно расскажу в одном из следующих выпусков.
978.24 993.24 "Игорь Лабутин" Что интересно, когда Microsoft это объявила, что все, мы все закончили портировать, у меня было ожидание, что наверняка найдется огромнейшее количество народу, которые скажут, вот, а вот еще то забыли, вот то, вот нам нужно обязательно вот это.
993.24 1008.20 "Игорь Лабутин" Но на удивление, по крайней мере в том ish-ю на GitHub, который был указан, что все обсуждения нужно вести тут, с момента публикации этой новости, что произошло где-то месяца полтора назад примерно, появилось всего 17 комментариев.
1008.20 1017.88 "Игорь Лабутин" Что означает, что возможно действительно Microsoft сделал правильный выбор и спортировала ровно тот набор API, который нужен 99% разработчиков.
1017.88 1020.00 "Анатолий Кулаков" Ну отлично, значит было классное планирование.
1020.00 1027.96 "Анатолий Кулаков" А еще для диалогов с Microsoft и сбора мнений с пользователей Microsoft нанесла новую площадку, Microsoft Q&A.
1027.96 1029.72 "Анатолий Кулаков" Ты уже посмотрел эту штуку?
1029.72 1030.72 "Игорь Лабутин" Да, я туда зашел.
1030.72 1048.68 "Игорь Лабутин" К сожалению, пока там только тематика Azure, что мне там совсем напрямую не интересно, и я бы с большим удовольствием посмотрел бы там на вопросы по C# и так далее, но и визуально, и по смыслу это очень сильно напоминает Stack Overflow.
1048.68 1059.92 "Игорь Лабутин" То есть примерно такая же система, кто угодно может задавать вопросы, у вопросов есть лайки или рейтинг в каком-то смысле, есть ответы, у ответов тоже есть лайки и рейтинг, ну и как-то это живет.
1059.92 1061.56 "Игорь Лабутин" Сейчас там очень мало контента.
1061.56 1071.92 "Анатолий Кулаков" Здесь меня в принципе сразу возмутило, почему они на Stack Overflow, просто как все нормальные люди, не создали там свой тег и не используют уже проверенную, понятную, надежную площадку, на которой все зарегистрированы.
1071.92 1074.20 "Анатолий Кулаков" Зачем вот запретать свой собственный велосипед-то?
1074.20 1087.76 "Игорь Лабутин" Ну, есть, наверное, ответ, который мне бы не очень понравился, а именно здесь возможности модерации гораздо больше, то есть сами себе площадка и сами себе можем модерировать все, что угодно.
1087.76 1101.32 "Игорь Лабутин" Надо не забывать, что эта штука родилась как в некотором роде наследие MSDN Forums и TechNet Forums, где понятно, что они были администраторами и возможно могли что-то там подчищать, удалять, либо как-то менять.
1101.32 1106.56 "Игорь Лабутин" Я очень надеюсь, что это не является главной причиной, почему они не пошли на Stack Overflow.
1106.56 1113.24 "Игорь Лабутин" Возможно, это просто некоторое, скажем так, противодействие рискам того, что Stack Overflow куда-нибудь денется, хотя куда он может денеться.
1113.24 1128.04 "Анатолий Кулаков" Глядя на новый Microsoft, мне как-то в это тяжело вериться, потому что у них та же самая площадка есть GitHub, где они вполне нормально живут с комьюнити, где вполне нормально встречаются со всякими неадекватами и хорошо обрабатывают все ситуации.
1128.04 1129.04 "Анатолий Кулаков" И вторая претензия...
1129.04 1130.96 "Игорь Лабутин" Да, но GitHub-то не купили же в итоге.
1130.96 1135.60 "Анатолий Кулаков" Да, это, наверное, была причина покупки GitHub, чтобы все-таки легально удалять неугодных пользователей.
1135.60 1141.12 "Анатолий Кулаков" Ну и вторая причина — у Stack Overflow есть специальная коммерческая версия.
1141.12 1152.60 "Анатолий Кулаков" То есть ты вполне можешь купить платную версию Stack Overflow, запостить у себя на сайте и получить уже проверенный, надежный, понятный интерфейс с уже знакомыми контроллами и системой управления.
1152.60 1155.08 "Анатолий Кулаков" Почему они хотя бы не купили платную подписку в Stack
1155.08 1160.04 "Игорь Лабутин" Overflow? А вот интересно, ты получаешь при этом абсолютно такой же UI или ты можешь еще понастраивать его визуально?
1160.04 1164.32 "Игорь Лабутин" Потому что на самом деле оно настолько похоже на Stack Overflow, что может быть и есть Stack Overflow под капотом?
1164.32 1165.68 "Игорь Лабутин" Кто его знает?
1165.68 1167.40 "Анатолий Кулаков" Ммм, может быть, может быть.
1167.40 1185.48 "Игорь Лабутин" Посмотрим, как оно будет развиваться, посмотрим, насколько активно туда побегут те, кому интересен C#, или там все будет завалено вопросами про Azure и прочие облачные сервисы, и посмотрим, насколько будет активно приходить народ с ответами.
1185.48 1186.72 "Игорь Лабутин" Это тоже важно.
1186.72 1188.16 "Анатолий Кулаков" Так, что у нас еще?
1188.16 1192.40 "Анатолий Кулаков" А, еще у нас вышла серия статей от Andrew Locke.
1192.40 1200.32 "Анатолий Кулаков" Мы как-то слишком часто на него наталкиваемся в последнее время, но действительно автор пишет просто шикарные обзоры, поэтому их ни в коем случае нельзя игнорировать.
1200.32 1202.00 "Анатолий Кулаков" Давайте немножко по ним пробежимся.
1202.00 1207.88 "Анатолий Кулаков" Это серия статей как раз-таки про исследование нового ISP-Netcore третьего.
1207.88 1214.48 "Анатолий Кулаков" Он очень много разбирает разных интересных моментов, и кое-какие моменты хотелось бы все-таки сегодня осветить.
1214.48 1220.16 "Анатолий Кулаков" Прежде всего из нововведений Core третьего это было выделение Generic Host.
1220.16 1230.76 "Анатолий Кулаков" Если вы сталкивались с предыдущими версиями ISP-Core, то там был класс, который назывался WebHost, и от него в принципе начиналась вся работа вашего приложения.
1230.76 1236.60 "Анатолий Кулаков" От него начинались все настройки, конфигурация UI, конфигурация переменных окружений и прочее прочее.
1236.60 1243.28 "Анатолий Кулаков" И в принципе у большинства людей, которые первый раз его видели, сразу возникал вопрос, а при чем здесь Web?
1243.28 1249.84 "Анатолий Кулаков" Почему бы это не сделать базовым классом для наших приложений, любых приложений консольных, вебовских, информовских?
1249.84 1251.52 "Анатолий Кулаков" И вот в 3.0 они это сделали.
1251.52 1253.84 "Анатолий Кулаков" Они вынесли класс Generic Host отдельно.
1253.84 1259.84 "Анатолий Кулаков" В этом классе вы можете настроить все, что необходимо обычному стандартному приложению.
1259.84 1270.84 "Анатолий Кулаков" То есть, например, потянуть конфигурацию из различных источников, из файлов, переменных средей окружения, из базы данных, из аргументов командной строки и так далее.
1270.84 1278.24 "Анатолий Кулаков" Настроить логирование, настроить ваш контейнер, который теперь есть, дефолтная имплементация по умолчанию.
1278.24 1280.32 "Анатолий Кулаков" Ну то есть, все то, что вам нужно.
1280.32 1281.52 "Анатолий Кулаков" И это замечательно.
1281.52 1286.48 "Анатолий Кулаков" Теперь у нас такой классик есть, и сам ISP его использует под капотом.
1286.48 1287.48 "Игорь Лабутин" Супер.
1287.48 1291.28 "Игорь Лабутин" На самом деле, когда такие полезные кусочки выделяют в отдельные сущности, это очень здорово.
1291.28 1299.72 "Игорь Лабутин" Далее, вторая статья рассказывает про вещь, которую я, например, пользуюсь крайне редко, а именно шаблоны проектов.
1299.72 1304.56 "Игорь Лабутин" То есть, когда можно сказать ".NET NEW" что-нибудь, и он тебе какой-то пустой проектик.
1304.56 1312.24 "Игорь Лабутин" Я в своей практике пользуюсь им очень мало, может потому, что я в основном работаю над большим продуктом, где мы мало добавляем в новые проекты, но тем не менее.
1312.24 1317.28 "Игорь Лабутин" И здесь в третьем ISP.NET Core появилось довольно много разных новых шаблонов.
1317.28 1338.32 "Игорь Лабутин" В частности, поскольку теперь у нас есть очень простой и понятный хостинг, помимо этого появилась теперь возможность не только генерировать полноценное ISP.NET МВЦ приложение со всеми свистелками, но и достаточно минималистичные темплейты, типа там "Empty", как они называют.
1338.32 1355.24 "Игорь Лабутин" Он не совсем "Empty", конечно, но все-таки, где у вас добавляется всего лишь простой роутинг, и корневой маршрут сразу возвращает Hello World, и больше ничего, никакого MVC, никаких статик-файлов, никакой авторизации, вообще ничего нету, только роутинг и endpoints на них, на роутинге и все.
1355.24 1357.28 "Игорь Лабутин" И дальше этот шаблончик можно...
1357.28 1369.08 "Игорь Лабутин" Есть другие шаблоны, построенные на его основе, которые уже позволяют создать либо WebApp, либо MVC, либо что-то с RazorPage, либо там всякий Blazor, понятное дело, и все остальное.
1369.08 1382.84 "Игорь Лабутин" И для того, чтобы поддержать столь гибкие шаблоны и иметь возможность их создавать, Microsoft в ISP.NET Core 3 немножко изменила набор экстенджер-методов, которые используются для конфигурирования вашего хоста и приложения.
1382.84 1388.04 "Игорь Лабутин" И как раз-таки это позволило гораздо гибче это все делать.
1388.04 1397.80 "Игорь Лабутин" То есть теперь у нас отдельно мы конфигурируем роутинг, отдельно мы конфигурируем endpoints, отдельно мы конфигурируем, ну как раньше, авторизацию и так далее.
1397.80 1409.56 "Игорь Лабутин" То есть теперь можно не просто вызвать сервис.addmvc и получить вообще все, что может вам прилететь от MVC, даже если вы этим не пользуетесь.
1409.56 1416.56 "Игорь Лабутин" То есть, если, например, вы пользовались только контроллерами, ну вам не нужен Razor, то это было сделать не очень просто в 2.x.
1416.56 1427.16 "Игорь Лабутин" А сейчас в 3.0 вы можете по кусочкам подключать нужные штуки, добавить контроллеры, добавить роутинг, добавить еще что-то, и у вас будет собранное приложение под ваши нужды.
1427.16 1438.40 "Анатолий Кулаков" Здесь хотелось бы добавить, что довольно важная концептуальная вещь, которую многие не очень осознают, что в API-контроллеры можно делать без всякого MVC.
1438.40 1454.36 "Анатолий Кулаков" Допустим, вы сделали какое-то ваше консольное приложение и хотите в нем выставить endpoint, который отвечает на вопрос, насколько ваше приложение потребляет ресурсы, или выставить стандартный health check, или выставить какую-нибудь базовую диагностику от вашего приложения.
1454.36 1464.72 "Анатолий Кулаков" Для этого не обязательно ваше маленькое консольное приложение оттащить огромный MVC со всеми его контроллерами, рейзерами, компонентами, джаваскриптами и прочей глупостью.
1464.72 1472.92 "Анатолий Кулаков" Для этого всего лишь на все достаточно подключить базовый Avin, настроить пару endpoints и выдавать нарушу то, что вы захотите.
1472.92 1477.76 "Анатолий Кулаков" Обычно это какой-нибудь сериализованный JSON или какой-нибудь стандартный health check.
1477.76 1480.20 "Анатолий Кулаков" То есть не обязательно сточить всех этих монстров.
1480.20 1482.76 "Анатолий Кулаков" Мы этой штукой очень часто пользуемся.
1482.76 1491.16 "Анатолий Кулаков" И более того, даже если вы захотите рендерить красивые, интересные странички на рейзере, для этого тоже вам не обязательно подключать полный MVC.
1491.16 1498.48 "Анатолий Кулаков" Рейзер как компонент для рендеринга страничек довольно таки небольшой, компактный и требует буквально одного референса.
1498.48 1509.24 "Анатолий Кулаков" И вы точно так же в вашем Web API можете поддержать не только JSON, XML стандартные, но и HTML без всяких проблем и без всякого большого ASP framework.
1509.24 1524.08 "Анатолий Кулаков" Следующая статья рассказывает глубже про стандартный DI, который сделали в Microsoft и в частности про то, что в нем появилась новая фича — это провалидировать все ваши зарегистрированные сервисы.
1524.08 1540.80 "Анатолий Кулаков" Я думаю, многие из вас сталкивались с проблемой, когда вы написали каких-то классиков, объявили какие-то их зависимости, запускаете ваше приложение, а оно в момент резолва вашего классика падает с ошибкой того, что не смогло найти какую-то зависимость, потому что вы ее банально забыли зарегистрировать в вашем контейнере.
1540.80 1555.76 "Анатолий Кулаков" Чтобы такого не происходило где-то посередине выполнения вашей программы, а происходило как можно раньше, в Microsoft придумали фичу, которая проверяет контейнер еще до того, как вы попытались зарезаловать из нее любые сервисы, на самом старте вашего приложения.
1555.76 1558.72 "Анатолий Кулаков" Ну или, соответственно, это можно сделать в тестах.
1558.72 1567.12 "Анатолий Кулаков" В статье Andrew рассматривает больше не эту фичу проверки, а то, каким образом эта проверка может не сработать.
1567.12 1582.16 "Анатолий Кулаков" То есть она у вас не сработает, если вы попросили вашу зависимость, например, напрямую из сервис коллекшена или если вы попросили зависимость из фабрики какой-то или из функции, или она также плохо работает для generic аргументов.
1582.16 1585.12 "Анатолий Кулаков" В общем, у нее есть очень много всяких багов.
1585.12 1592.08 "Анатолий Кулаков" Он их описывает и призывает быть внимательнее, следить именно за такими зависимостями.
1592.08 1597.60 "Анатолий Кулаков" Но вообще фича довольно-таки полезная и во всех больших DI контейнерах она довольно давно существует.
1597.60 1602.88 "Игорь Лабутин" Да, и на самом деле для некоторых таких проблем есть вполне нормальные workarounds.
1602.88 1609.40 "Игорь Лабутин" Например, одна из проблем довольно важная, что по дефолту все, что вы принимаете в конструктор контроллера, проверяться не будет.
1609.40 1615.32 "Игорь Лабутин" А это, как мне кажется, довольно частая ситуация, что в конструктор контроллера может прилететь довольно много зависимости.
1615.32 1622.00 "Игорь Лабутин" Но вот конкретно эту можно победить за счет как раз-таки той самой гибкости, которую предоставил новый extension метод для конфигурации.
1622.00 1627.76 "Игорь Лабутин" Вы просто явно говорите, добавьте контроллер и добавьте их как сервисы, и тогда они все будут работать через стандартный DI.
1627.76 1635.08 "Игорь Лабутин" В противном случае они, кстати, создаются просто обычными, если я правильно помню, Activator, Create Instance как-то так, внутри нетер МВС где-то.
1635.08 1638.08 "Игорь Лабутин" Да, дальше.
1638.08 1648.24 "Игорь Лабутин" Задача, которую Эндрю здесь пытается описать, заключается в том, что нам хочется в момент старта нашего приложения пытаться запускать какой-то наш код.
1648.24 1658.36 "Игорь Лабутин" В 2.x вроде как это тоже можно сделать, но у нас есть по его описанию три способа.
1658.36 1676.68 "Игорь Лабутин" Можно было сделать startup filter, но, к сожалению, у него есть только синхронные аппи, поэтому если вы хотите запускать что-то асинхронное, то вам придется самим дожидаться завершения ваших async методов через всякие, ну хорошо если не вейтеры, а в общем стандартную мантру писать где-то вейтер, wait и вот это все.
1676.68 1693.84 "Игорь Лабутин" Второй вариант, можно было бы поиспользовать iApplication lifetime, но у него тоже синхронный API, а кроме того, Event Application Start, в котором можно попытаться что-то начать обрабатывать, он срабатывает уже после того, как начали обрабатываться реквесты.
1693.84 1699.76 "Игорь Лабутин" То есть есть шанс, что первые реквесты будут обработаны без того, чтобы ваш стартап-код запустился.
1699.76 1710.60 "Игорь Лабутин" И можно было использовать iHosted Service, там уже асинхронный API, это хорошо, но он тоже исполнялся только после того, как сервер начал обрабатывать реквесты.
1710.60 1735.24 "Игорь Лабутин" Поэтому можно было использовать два варианта альтернативных, которые были предложены им в своих статьях раньше, это либо вручную все исполнять после того, как вы собрали веб-хост в конфигурацию его, но не запустили его еще, либо использовать кастомную реализацию интерфейса IServer, которая сначала исполнит ваши таски, а потом начнет исполнять запросы, но там были свои проблемы.
1735.24 1738.72 "Игорь Лабутин" Третьим на S/P/Nad Core стало все проще.
1738.72 1762.60 "Игорь Лабутин" Мы можем использовать iHosted Service и первое, что делает фреймворк, имея instance iHosted Service, она сначала на нем вызывает StartAsync и только потом говорит, что все NotifyStarted и notificatetheApplicationLifetime, что делает его асинхронным событием и только после этого начинает обрабатывать реквесты.
1762.60 1772.08 "Игорь Лабутин" То есть, по сути, теперь просто появилась некоторая точка внутри фреймворка, которая точно и гарантированно выполнит ваш код, дождется его и только после этого начнет обрабатывать реквесты.
1772.08 1781.92 "Игорь Лабутин" Поэтому если вам нужно что-то, что нужно обязательно выполнить до прихода первого реквеста, вам в iHosted Service и используем.
1781.92 1790.56 "Анатолий Кулаков" Другой полезный классик, который тоже помог нам хорошо абстрагироваться от того хоста, где мы запускаемся, это iHosted Lifetime.
1790.56 1800.24 "Анатолий Кулаков" iHosted Lifetime существует в нескольких имплементациях, например, есть консоль host lifetime, есть systemd host lifetime, есть windows service host lifetime.
1800.24 1806.84 "Анатолий Кулаков" И в принципе, все они очень полезны для того, чтобы понять о том, когда хост поднялся и о том, когда хост собирается завершиться.
1806.84 1812.44 "Анатолий Кулаков" Это такой довольно-таки низкоуровневый классик, который используется в основном инфраструктурой, но для вашего кода он тоже вполне может быть полезен.
1812.44 1822.88 "Игорь Лабутин" Ну, вообще, на самом деле, всякие такие штуки, которые позволяют поймать начало-окончание каких-то событий в вашем фреймворке, это очень полезно.
1822.88 1824.60 "Игорь Лабутин" К ним можно много чего подключить.
1824.60 1834.56 "Игорь Лабутин" И следующая статья, я когда увидел ее заголовок, думал, интересно, структурное логирование вроде в надкоре есть давно-недавно в SP-надкоре.
1834.56 1837.40 "Игорь Лабутин" Потому что назывался она Structured Logging for Startup Messages.
1837.40 1855.68 "Игорь Лабутин" И оказалось, что это все крутится вокруг стартовых семи строчек, которые ваше SP-надкор приложение пишет про то, что Using Launch Settings from определенный путь, что у вас за environment, development или production, откуда берет контент для статик файлов и на каких портах оно слушает.
1855.68 1858.60 "Игорь Лабутин" Это очень полезная информация, но, к сожалению, она пишется прямо в консольку.
1858.60 1871.32 "Игорь Лабутин" И если мы, например, в каком-нибудь докере собираем структурные логи из консольки, то ваши последующие логи от запросов будут собраны нормально, а эти первые 7 строчек портят все.
1871.32 1877.12 "Игорь Лабутин" Их надо либо ручной отфильтровывать, либо их нужно как-то обрабатывать специально, и это плохо.
1877.12 1885.92 "Игорь Лабутин" Поэтому теперь эта штука пишется в нормальном хорошем формате, их можно засопрессить даже по возможности.
1885.92 1892.16 "Игорь Лабутин" И, в общем, стало все хорошо, и у Майкрософта теперь все пишется правильно и структурно.
1892.16 1898.08 "Анатолий Кулаков" Еще одна классная вещь, которую ввели в Core 3, это Local Tools.
1898.08 1901.48 "Анатолий Кулаков" Мы с вами как-то уже обсуждали про такое нововведение как Global Tools.
1901.48 1907.40 "Анатолий Кулаков" Я напомню, это утилиты командной строки, которые можно подставить с помощью стандартной команды .NET.
1907.40 1914.48 "Анатолий Кулаков" Эти утилиты можно поставить глобально для всей вашей системы и, соответственно, запускать из любой точки вашей операционной системы.
1914.48 1921.70 "Анатолий Кулаков" Но многие люди столкнулись с такой проблемой, что утилиты глобально для всей операционной системы иногда немножко конфликтуют.
1921.70 1940.64 "Анатолий Кулаков" Например, если вы поставили стандартный build tool, который называется Cake, для вашего одного проекта и написали под него какие-то скрипты, то в следующей версии Cake могут выйти какие-то breaking changes, которые уже не совместимы с вашим текущим проектом, но новый проект собирается уже под новую версию Cake.
1940.64 1950.08 "Анатолий Кулаков" И, соответственно, на одном компьютере, на котором установлены Global Tools для сборки одной версии, будут несовместимы одновременно с обоими проектами.
1950.08 1954.54 "Анатолий Кулаков" Они будут собирать или первый проект, или более новая версия будет собирать второй проект.
1954.54 1958.86 "Анатолий Кулаков" И подобные проблемы решили довольно-таки ожидаемым способом.
1958.86 1960.98 "Анатолий Кулаков" Появились так называемые Local Tools.
1960.98 1964.06 "Анатолий Кулаков" Local Tools привязаны к вашему конкретному проекту.
1964.06 1974.18 "Анатолий Кулаков" И если ваш проект собирался какой-то определенной версией Cake, то он все время будет собираться этой версией, независимо от того, что глобально установлено на компьютере.
1974.18 1981.06 "Анатолий Кулаков" Local Tools добавляют новую команду к .NET, которая называется New Tools Manifest.
1981.06 1983.66 "Анатолий Кулаков" Эта команда создает JSON-файлик.
1983.66 1992.42 "Анатолий Кулаков" В этом JSON-файлике прописываются все Local Tools, которые вы установили, их конкретные версии и откуда их можно взять.
1992.42 2009.86 "Анатолий Кулаков" Соответственно, этот файлик будет теперь лежать в вашем репозитории, и любой разработчик, который скачает ваш репозиторий, он может внутри вашего проекта смело пользоваться любыми Tools и быть 100% уверенным, что они возьмутся в правильной версии, с правильного места и отработают правильно.
2009.86 2011.42 "Анатолий Кулаков" На этом серия статьи завершается.
2011.42 2019.14 "Анатолий Кулаков" Если вас интересуют подробности по тем темам, которые мы осветили, то смело обращайтесь к Эндрю, у него много еще чего найдется для вас интересного.
2019.14 2032.78 "Игорь Лабутин" Да, я действительно последние несколько недель обнаружил, что довольно часто посылаю линки на его статьи коллегам в контексте обсуждения всяких нововведений о S/P/NET.
2032.78 2035.58 "Игорь Лабутин" И как-то да, огромное количество полезного материала.
2035.58 2037.18 "Игорь Лабутин" Покажите блог, очень здорово.
2037.18 2042.22 "Анатолий Кулаков" Я думаю, для меня это было самое лучшее открытие из авторов в этом году.
2042.22 2051.42 "Анатолий Кулаков" В общем, я его обнаружил довольно-таки поздно и с радостью перечитал многие его и старые статьи, и теперь слежу довольно активно за его новыми работами.
2051.42 2058.86 "Игорь Лабутин" Да, давайте теперь поговорим про, наверное, нашу сегодня последнюю тему, но тема на самом деле довольно интересная.
2058.86 2066.30 "Игорь Лабутин" А именно, в блоге Endepend появилась статья про 4 предсказания будущего .NET.
2066.30 2072.06 "Анатолий Кулаков" Эти предсказания, именно по мнению авторов, никак не скоррелируют с Microsoft?
2072.06 2084.34 "Игорь Лабутин" Это на самом деле мнение человека по имени Патрик Смачья, не уверен, как произносится правильно фамилия, но это тот, кто на самом деле начал когда-то давно писать Endepend.
2084.34 2085.34 "Анатолий Кулаков" О, отлично.
2085.34 2087.70 "Анатолий Кулаков" Спекуляция, предсказания, гадания на кофейной гуще.
2087.70 2098.98 "Игорь Лабутин" Да, от одного из авторов достаточно хорошего тула, который наоборот позволяет навести порядок, понять структуру вашего кода и так далее.
2098.98 2100.46 "Игорь Лабутин" Самое то для предсказаний.
2100.46 2113.62 "Игорь Лабутин" Но тем не менее, у нас есть 4 предсказания, которые не имеют в каком-то смысле срока, то есть не сказано, когда они могут сбыться или не сбыться, но интересно посмотреть на будущее.
2113.62 2128.58 "Игорь Лабутин" И первое это про .NET Standard, про то, что он, конечно, у нас есть, у нас вышла версия 2.1, но вопрос, нужны ли вообще нам будущие версии .NET Standard при условии, что все идет в .NET 5 и не будет ничего другого.
2128.58 2145.06 "Анатолий Кулаков" Да, действительно, с точки зрения того, что в пятой версии .NET Microsoft снова все объединяет под одной крышей, под одной версией, под одним фреймворком, судьба .NET Standard видится довольно-таки мутной, то есть непонятно, зачем он будет больше нужен.
2145.06 2147.66 "Анатолий Кулаков" И здесь я, в принципе, согласен с автором.
2147.66 2149.42 "Анатолий Кулаков" Скорее всего, его будут закапывать.
2149.42 2158.34 "Анатолий Кулаков" И еще один интересный факт в том, что последняя версия большого фреймворка 4.8, она не получила поддержку .NET Standard 2.1.
2158.34 2162.70 "Анатолий Кулаков" То есть, казалось бы, должна, но почему-то авторы этого не сделали.
2162.70 2168.62 "Анатолий Кулаков" Может быть, потому что понимали, что зря тратить усилия не нужно и стандарт уже катится к своему закату.
2168.62 2175.06 "Игорь Лабутин" Я, пожалуй, не соглашусь про то, почему она, может быть, даже должна была.
2175.06 2177.70 "Игорь Лабутин" Мне на это интересно посмотреть с другой стороны.
2177.70 2196.30 "Игорь Лабутин" Если Microsoft точно знала, что .NET Standard 2.1 не будет поддержан .NET Framework 4.8, а по сути только .NET Core, насколько я понимаю, сейчас поддерживает .NET Standard 2.1, то зачем нам вообще .NET Standard, зачем нам стандарт, который поддержан одним-единственным представителем?
2196.30 2198.54 "Игорь Лабутин" То есть, в принципе, можно было...
2198.54 2202.30 "Анатолий Кулаков" Потому что пятый .NET еще появится неизвестно когда.
2202.30 2203.66 "Анатолий Кулаков" Пилить нужно уже сейчас.
2203.66 2210.06 "Анатолий Кулаков" И 2.1 может быть вполне поддержан и Xamarin, и Unity, и какими-то, может быть, другими инструментами.
2210.06 2211.06 "Игорь Лабутин" Окей.
2211.06 2214.06 "Игорь Лабутин" Ну, то есть, возможно, мы увидим еще какие-нибудь 2.2, 2.3 там.
2214.06 2220.66 "Игорь Лабутин" Но, действительно, может быть, .NET Standard 3 или чего-нибудь такого уже и не случится.
2220.66 2221.66 "Игорь Лабутин" Поглядим, посмотрим.
2221.66 2233.10 "Игорь Лабутин" Я думаю, что в течение 2020 года, когда начнет очерчиваться, что же мы увидим в .NET 5, мы, наверное, начнем понимать, что будет за .NET Standard.
2233.10 2234.90 "Игорь Лабутин" Я думаю, Microsoft нам про это явно скажет.
2234.90 2240.78 "Игорь Лабутин" Второе предсказание, оно звучит довольно давно, но не в виде предсказания, а в виде желания.
2240.78 2247.94 "Игорь Лабутин" И предсказание звучит так, что Visual Studio will run on .NET 5 or 6 и в 64-битном процессе.
2247.94 2259.54 "Игорь Лабутин" То есть, как только Microsoft сделает пятый .NET или, может быть, шестой, потому что именно шестой будет LTS, то к тому моменту студию наконец-таки на него переведут и заодно сделают 64-битный.
2259.54 2265.94 "Игорь Лабутин" Это то, чего все давно ждут, особенно, наверное, те, кто ставит в Darius Sharper или много-много других тяжелых экстенджеров.
2265.94 2269.66 "Игорь Лабутин" Но вопрос, насколько вообще это вероятно.
2269.66 2281.26 "Анатолий Кулаков" Я помню, что с тех пор, как Microsoft запустил форму фидбэка на UserVoice, это пожелание было самым популярным и самым широко наголосованным, и самым комментируемым, и самым желанным.
2281.26 2284.86 "Анатолий Кулаков" То есть, об этом хотят больше, чем о любой другой фиче Visual Studio.
2284.86 2298.50 "Анатолий Кулаков" Насколько это будет возможно, непонятно, потому что авторы Visual Studio уже много-много лет кричат, что это невозможно, что там все пропитано комами, что там настолько большая завязка на битность, что намного легче плюнуть и переписать все заново.
2298.50 2310.02 "Анатолий Кулаков" Но с другой стороны, в принципе, от авторов ReSharper мы слышали те же самые отмазы, когда просили ReSharper портировать под Linux или сделать отдельную студию для написания кода.
2310.02 2330.70 "Анатолий Кулаков" Как мы видим, что все это, в принципе, возможно, и вполне может быть, что .NET 5 плюс кроссплатформенная команда плюс то, что они сейчас вынуждены поддерживать под Linux и Mac некого уродца, который называют почему-то Visual Studio под Mac, и там действительно не хватает полноценной нормальной Visual Studio.
2330.70 2339.86 "Анатолий Кулаков" То есть, все эти факты уже назрели для того, чтобы перенести большую нашу любимую студию под .NET Core и запустить ее все-таки кроссплатформенно.
2339.86 2341.50 "Игорь Лабутин" Ну, будем надеяться, что так произойдет.
2341.50 2357.66 "Игорь Лабутин" На самом деле, как мне кажется, частично, может быть, какой-то тренд в эту сторону есть, потому что Microsoft сейчас очень много, я так понимаю, вносит из студии во внешние процессы, и по сути сама студия становится просто оболочкой и возможностью подключить туда экстенджины.
2357.66 2369.18 "Игорь Лабутин" Поэтому, может быть, существенно изменится механизм работы экстенджинов, может быть, именно здесь будет наибольшая боль, но действительно, посмотрим, что будет через год-два.
2369.18 2378.30 "Анатолий Кулаков" Я думаю, у них просто не было выбора, поэтому они вынесли свой, например, Rostlin в отдельный процесс, потому что он банально не помещался в те рамки, которые требовала 32-битная студия.
2378.30 2385.70 "Анатолий Кулаков" То есть это не то, чтобы они как фичу закладывали, это, скорее всего, латание багов, но это вполне может быть действительно путь к параллельной архитектуре.
2385.70 2393.38 "Игорь Лабутин" Да, и может быть, к концу 2020 года они поймут, что у них 80% функциональности уже вынесено отдельно, и осталось переписать только оболочку с экстенджинами.
2393.38 2399.06 "Игорь Лабутин" Хотя есть и другая сторона медали, потому что Visual Studio оболочка, она же используется кучей продуктов.
2399.06 2404.18 "Игорь Лабутин" То есть там какая-нибудь SQL Management Studio, она тоже использует Visual Studio, этот Shell.
2404.18 2411.58 "Игорь Лабутин" И вот насколько он широко используется, и насколько тяжело вот эти интеграции куда-то отрезать, тут надо смотреть.
2411.58 2419.90 "Анатолий Кулаков" С другой стороны, тебе не обязательно все эти интеграции тоже портировать под этот Netcore, они вполне могут остаться как бы на предыдущей версии и никуда не денутся.
2419.90 2424.02 "Анатолий Кулаков" Для SQL Studio вполне достаточно тех возможностей, которые у нее есть сейчас.
2424.02 2427.62 "Анатолий Кулаков" А в будущем, наверное, можно будет использовать новый кроссплатформенный Shell.
2427.62 2429.62 "Анатолий Кулаков" Меня здесь больше, знаешь, что волнует?
2429.62 2437.18 "Анатолий Кулаков" Что, по сути, Microsoft, если она пойдет все-таки этим путем, что опять же официально не объявлено, она начнет конкурировать сама с собой.
2437.18 2452.10 "Анатолий Кулаков" Она начнет конкурировать с Visual Studio Code, который тоже превращается в такого своеобразного монстра, который с виду представляет из себя какой-то легковесный Shell, но в него наставляются плагины, и он способен поддержать практически любой язык программирования, ныне существующий.
2452.10 2458.22 "Анатолий Кулаков" Эта штука, она уже кроссплатформена, она уже сейчас запускается в браузере в виде Visual Studio Code Online.
2458.22 2464.46 "Анатолий Кулаков" И она уже на голову впереди большой Visual Studio, если мы говорим про кроссплатформенность.
2464.46 2467.46 "Анатолий Кулаков" И вот здесь интересный вопрос встает.
2467.46 2469.82 "Анатолий Кулаков" Вряд ли Microsoft пойдет конкурировать со своим детищем?
2469.82 2479.02 "Игорь Лабутин" С одной стороны, да, но с другой стороны, если мы берем там Mac либо Linux, я согласен, что там код безальтернативен, если вы внутри Microsoft продуктов именно.
2479.02 2484.30 "Игорь Лабутин" Понятно, что есть другие IDE других компаний, но если вы выходите от Microsoft, то вот вам код.
2484.30 2507.22 "Игорь Лабутин" Но на Windows, насколько я, так скажем, представляю по моим каким-то внутренним представлениям, код там тоже популярен, либо если вы не пишете на каком-то совсем правильном языке для Visual Studio, то есть для себя я там представляю, что Visual Studio это по большому счету F#, C# и C++.
2507.22 2508.66 "Игорь Лабутин" Ну, наверное, Visual Basic.
2508.66 2513.66 "Игорь Лабутин" Да, да, да, я забыл про Visual Basic, но давай не будем.
2513.66 2525.38 "Игорь Лабутин" То есть вот три яснонанных языка, мне кажется, но если шаг влево, шаг вправо, то есть как только вы говорите про Go, не знаю, Rust и прочие странные языки, то это…
2525.38 2531.10 "Анатолий Кулаков" Python, JavaScript, TypeScript, я думаю, в обратном смысле абсолютно большинство всех других языков.
2531.10 2533.02 "Игорь Лабутин" Да, тогда можно попробовать код.
2533.02 2537.06 "Игорь Лабутин" То есть, ну, представим, что студия станет честно кроссплатформенной.
2537.06 2546.66 "Игорь Лабутин" Ну, возможно, те, кто, те дотнетчики, которые сидят на Linux либо на Mac, собирают все из консоли, как отправят Visual Studio Code, смогут перейти на полноценную Visual Studio.
2546.66 2547.66 "Игорь Лабутин" Это да.
2547.66 2550.50 "Игорь Лабутин" Но Python, JavaScript и все остальные языки никуда не денутся.
2550.50 2553.98 "Игорь Лабутин" Я не думаю, что это конкуренция сама с собой.
2553.98 2560.18 "Игорь Лабутин" Это больше как, да, легковесный, относительно легковесный редактор и все-таки тяжелая студия.
2560.18 2565.50 "Игорь Лабутин" Студию ты не думаешь, что сможешь запускать, просто написав там vs.probel.
2565.50 2567.34 "Игорь Лабутин" Откроем ли мы текущую директорию в студии?
2567.34 2573.62 "Анатолий Кулаков" Ну, с другой стороны, проекты на C# и Visual Studio Code компилятся и чувствуют себя более-менее комфортно.
2573.62 2580.06 "Игорь Лабутин" Но все-таки там функциональности поменьше, рефакторингов поменьше и прочее, поэтому...
2580.06 2581.06 "Анатолий Кулаков" Именно так.
2581.06 2588.66 "Анатолий Кулаков" Но здесь вопрос в том, что стоит дороже, как бы написать Visual Studio новую с нуля кроссплатформенную или добавить больше функциональности к существующей оболочке типа VS Code?
2588.66 2589.66 "Игорь Лабутин" Это вопрос.
2589.66 2600.30 "Игорь Лабутин" Возможно, они просто добавят кучу функциональностей к VS Code, позволят туда подключать экстенджеры типа ReSharper, и будет у тебя VS Code с ReSharper практически как Visual Studio, в том числе и на винде.
2600.30 2601.30 "Анатолий Кулаков" Хорошо, поживем и увидим.
2601.30 2607.26 "Анатолий Кулаков" Я думаю, ближе к релизу дотнет пятого будут какие-то утечки или какие-то анонсы, так что давай посмотрим.
2607.26 2608.98 "Анатолий Кулаков" А что дальше у нас из предсказаний есть?
2608.98 2616.70 "Игорь Лабутин" О, дальше на самом деле мы частично, косвенно эту штуку, можно сказать, затронули, а именно, что в дотнете появится кроссплатформенный UI-фреймворк.
2616.70 2622.50 "Игорь Лабутин" Либо WPF таки сделают кроссплатформенным, либо что-то подобное, основанное на XAML.
2622.50 2627.38 "Анатолий Кулаков" Насколько я помню, официальные анонсы о том, что WPF никогда не будет кроссплатформенный, они были.
2627.38 2651.94 "Игорь Лабутин" Более того, есть цитата Ричарда Ландера от примерно декабря прошлого года, с 2018-го, про то, что сделать WPF кроссплатформенным это очень долго и дорого, и если бы это было сделать достаточно просто, мы бы, условно говоря, давно бы этого сделали, либо это бы давно было в планах и было бы все понятно, что мы в эту сторону движемся.
2651.94 2665.06 "Игорь Лабутин" Сейчас про это речи точно не идет, и дело даже не в том, как я понимаю, что WPF сильно завязан на Windows API, либо еще на что-то, а именно просто в масштабах.
2665.06 2671.10 "Анатолий Кулаков" Если они соберут заделывать кроссплатформенную DE, этот вопрос у них, безусловно, встанет, и они должны будут что-нибудь придумать.
2671.10 2687.90 "Игорь Лабутин" Да, но у них есть, как минимум, у нас сейчас есть два кроссплатформенных, так скажем, проекта, которые можно попытаться использовать в качестве UI, это Xamarin Forms, точнее, и Avalonia, которая даже XAML-based же, да ведь она?
2687.90 2699.54 "Анатолий Кулаков" Да, да, Avalonia это полностью XAML-based, и я представил, будет довольно смешно, если Microsoft купит Никиту Цыканова вместе с Avalonia и официально будет ее поддерживать.
2699.54 2703.06 "Анатолий Кулаков" В принципе, интересно было развитие событий, но не будем загадывать.
2703.06 2716.90 "Игорь Лабутин" Если мы продолжаем говорить про кроссплатформенность, то у нас есть еще одна платформа в современном мире, которая как-то обычно не используется в той же степени, как там, когда мы говорим про Linux, Windows и так далее, а именно браузеры.
2716.90 2723.94 "Игорь Лабутин" По большому счету, можно сказать, что это новая платформа в некоторых степени, и очень много приложений делается исключительно для браузеров.
2723.94 2728.54 "Игорь Лабутин" И вот тут четвертое предсказание, оно про Blazor.
2728.54 2751.78 "Игорь Лабутин" Blazor, который вообще родился как, так скажем, практически пэдпроджект одного из сотрудников Microsoft, и был впервые представлен в июле 2017 года аж, как-то незаметно-незаметно добрался до такого хайпа, что теперь ему предсказывают вообще прям светлое будущее.
2751.78 2760.10 "Игорь Лабутин" Тут нет какого-то конкретного измеримого предсказания, просто Blazor is promised to a bright future, то есть технология, которая не умрет в ближайшее время.
2760.10 2767.02 "Анатолий Кулаков" Blazor – это способ писать на C# под браузеры с помощью WebAssembly.
2767.02 2770.98 "Анатолий Кулаков" А если у него такое безоблачное будущее, давай представим, куда его можно внедрить-то.
2770.98 2772.94 "Анатолий Кулаков" Ну, допустим, ту же самую кроссплатформенную DE.
2772.94 2774.54 "Анатолий Кулаков" Можно написать на Blazor?
2774.54 2775.54 "Игорь Лабутин" Можно.
2775.54 2780.10 "Игорь Лабутин" На Blazor вообще все, что можно сделать в браузере, можно теперь писать на Blazor.
2780.10 2782.30 "Анатолий Кулаков" А в браузере, в принципе, можно сделать все.
2782.30 2795.86 "Анатолий Кулаков" Если взять вообще канвас и начать рисовать на него самостоятельно, то можно сделать, начиная от трехмерных игр и кончая акселевскими таблицами, обычными формочками, сайтиками и что угодно.
2795.86 2804.94 "Игорь Лабутин" Да, и вместо того, чтобы делать это на неудобном или нелюбимом JavaScript или TypeScript, можно это делать на хорошем, знакомом, удобном C#.
2804.94 2813.74 "Анатолий Кулаков" Я тоже, когда наблюдаю за Blazor, вижу довольно-таки большую кучу коммитов, активностей, community, хайпа, курсов и так далее.
2813.74 2823.58 "Анатолий Кулаков" То есть действительно видно, что продукт очень сильно развивается, я не удивлюсь, если это окажется самым быстро развивающимся направлением в Микрософте, так и продуктом Микрософта.
2823.58 2827.46 "Анатолий Кулаков" Поэтому я согласен, что в принципе, сделают это безоблачное будущее.
2827.46 2842.38 "Анатолий Кулаков" Правда, пока непонятно, какое, насколько и куда, потому что никаким конкурентам, никаким любозначимым конкурентам ни React, ни Angular, ни Vue он не является еще и пока как-то не сильно претендует.
2842.38 2845.26 "Анатолий Кулаков" То есть куда эта дорожка заведет, это довольно-таки интересно.
2845.26 2851.02 "Игорь Лабутин" Я думаю, что это будет сильно зависеть от того, что они будут делать с точки зрения перформанса и размера.
2851.02 2864.46 "Игорь Лабутин" Все-таки пока, как бы мы не ругали JavaScript и все остальное, его интерпретация, компиляция и все остальное делается браузером и браузер достаточно передать только исходник, который достаточно невелик.
2864.46 2873.34 "Игорь Лабутин" А в случае с V8 нужно передавать уже скомпилированную DLL, которые пока, мягко говоря, не маленькие.
2873.34 2877.14 "Игорь Лабутин" Это одна проблема, вторая проблема - это скорость работы.
2877.14 2895.46 "Игорь Лабутин" С одной стороны, мы получаем практически нативный код, то есть работу со скоростью обычного дотнета, но проблема в том, что WebAssembly, как правило, не используют для каких-то вычислений либо еще чего-то, а основная функциональность - это взаимодействие с UI.
2895.46 2905.74 "Игорь Лабутин" И вот эта часть, я так понимаю, что именно в WebAssembly стандарте не очень сильно проработана или реализована сейчас конкретно для C# части.
2905.74 2914.38 "Игорь Лабутин" Тут я не очень знаю, я не очень сильно работаю с фронтендом, но слышал много проблем с доступом к собственному браузеру.
2914.38 2917.78 "Анатолий Кулаков" Да, то есть тут проблема существует в взаимодействии с DOM.
2917.78 2925.98 "Анатолий Кулаков" И действительно взаимодействие с DOM можно, но все это делается через интероп с JavaScript скриптовых функций, то есть все это выглядит абсолютно некрасиво и ужасно.
2925.98 2930.58 "Анатолий Кулаков" Эта часть пока самая больная, но на дне работает.
2930.58 2937.82 "Игорь Лабутин" Я бы сказал, что будущее Blazor очень сильно зависит от итогового удобства.
2937.82 2949.30 "Игорь Лабутин" То есть хороший фреймворк должен быть таким, чтобы на нем было легко сделать простые вещи и чтобы на нем можно было сделать сложные вещи, независимо от того, как сложно они сделаны.
2949.30 2956.78 "Игорь Лабутин" И вот сейчас кажется, что на нем сделать простые вещи все-таки пока не легко, несмотря на весь хайп вокруг него.
2956.78 2968.86 "Анатолий Кулаков" Здесь меня очень воодушевляет подход Microsoft в том, что Blazor это с первых же дней open source, с первых же дней прислушивается к комьюнити, очень широко смотрит на существующие там JavaScript решения.
2968.86 2980.10 "Анатолий Кулаков" И поэтому есть все шансы того, что у него будут приняты правильные какие-то архитектурные принципы, правильные архитектурные решения, которые позволят ему все-таки в будущем занять свою нишу.
2980.10 2981.10 "Игорь Лабутин" Ну и посмотрим.
2981.10 2989.62 "Игорь Лабутин" Я думаю, что мы этот выпуск запомним и где-нибудь через полгодика или годик вернемся к этим предсказаниям и посмотрим.
2989.62 2998.06 "Анатолий Кулаков" Кстати, да, где-то через полгода собираются зарелизить Blazor и там мы уже посмотрим, что конкретно они обещают и как его позиционируют.
2998.06 3003.02 "Анатолий Кулаков" Тут нужно сказать, чтобы не путаться, что существует Blazor с сервер-сайт.
3003.02 3006.38 "Анатолий Кулаков" Эта штука, она уже зарелизлена и уже работает.
3006.38 3012.18 "Анатолий Кулаков" Это прозрачное исполнение кода на вашем сервере и передача значений по сигналу R в ваш браузер.
3012.18 3018.02 "Анатолий Кулаков" То есть такая имитация буйной деятельности в браузере с вычислениями на сервере.
3018.02 3029.14 "Анатолий Кулаков" Но в принципе все, когда говорят Blazor, все-таки подразумевают client-site, то есть прямое исполнение C# кода в Assembly, уже прямое исполнение в браузере без всякого сервера.
3029.14 3034.94 "Анатолий Кулаков" И в принципе все ждут именно эту часть и всем интересно, что именно из нее получится.
3034.94 3044.78 "Игорь Лабутин" Да, современный Microsoft на самом деле радует чуть ли не каждый месяц новыми штуками, новостями, какими-то открытиями новых кусочков кода.
3044.78 3056.14 "Игорь Лабутин" Поэтому я думаю, что за те полгода год, а я думаю, что горизонт вот этих предсказаний это минимум год, потому что ни 64-битная студия, ни кроссплатформенные UI за месяц не пишутся.
3056.14 3064.26 "Игорь Лабутин" Так что мы через годик вернемся к этой теме в конце 2020 года и посмотрим, куда мы пришли с этими четырьмя идеями.
3064.26 3073.62 "Анатолий Кулаков" Если, конечно, наш подкаст не закроется, а чтобы наш подкаст не закрылся, вам его нужно активнее слушать, активнее советовать друзьям и активнее рекомендовать.
3073.62 3077.98 "Анатолий Кулаков" И на сих благословленных нотах давай, наверное, закругляться?
3077.98 3079.34 "Игорь Лабутин" Да, я думаю, давай.
3079.34 3080.74 "Игорь Лабутин" На сегодня, наверное, хватит.
3080.74 3083.26 "Игорь Лабутин" Будем ждать новых релизов от Microsoft.
3083.26 3086.62 "Игорь Лабутин" Наверняка что-нибудь новенькое, интересное появится уже в ближайшие месяцы.
3086.62 3093.66 "Игорь Лабутин" Но мы не будем ждать несколько месяцев, и я надеюсь, что мы все-таки в следующий раз с вами услышимся чуть-чуть пораньше.
3093.66 3094.66 "Анатолий Кулаков" Да, будем собираться.
3094.66 3108.78 "Анатолий Кулаков" Наш подкаст можно найти на сайте radio.dotnet.ru, а также подписывайтесь на группу dotnet.ru в Вконтакте, там у нас регулярно выходят какие-то интересные новости, обсуждения и прочие веселые штуки.
3108.78 3109.78 "Анатолий Кулаков" До новых встреч, пока!

