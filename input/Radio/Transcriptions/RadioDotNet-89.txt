0.00 15.38 SPEAKER_00 Здравствуйте, дорогие друзья, в эфире Radio.net, выпуск номер 89. И в студии у нас постоянный ведущий Анатолий Кулаков.
15.38 25.40 SPEAKER_00 И Игорь Лабутин, всем привет. А также у нас есть куча помогаторов, скоро их список будет длиннее, чем длительность нашего подкаста, я думаю, как раз сегодня замерим.
25.40 30.84 SPEAKER_00 Большое спасибо, друзья, что вы прибавляетесь, что вы делаете движуху и активность в нашем закрытом чатике.
30.84 46.84 SPEAKER_00 Александр, Сергей, Владислав, Шевченко Антон, Лазарев Илья, Гурий Самарин, Виктор, Руслан Артамонов, Александр Ерыгин, Сергей Бензенко, Александр Лапердин, Ольга Бондаренко и Дмитрий Сорокин. Всего большое спасибо всем, а также тем, кто помогает нам, но не был сегодня назван.
46.84 98.24 SPEAKER_00 Если вы не знаете, про что я говорю, заходите на наш сайтик на Boosty и посмотрите, как вы можете поддержать любимый подкаст. Так, из хорошего, CFP на Dotnext продолжается, ждём ваших докладов, ждём ваших заявочек, там собирается уже отличная аудитория. Даты есть, это, по-моему, сентябрь, начало сентября и Москва. Поэтому уже можно планировать свои выходные, своё лето и подготавливать классные докладники, потому что тем в принципе у Дотнета много. Ну, за исключением, наверное, сегодняшней недели, потому что как-то неделька выдалась не очень темная. Да, не то, что неделька, вообще мы же готовимся не только по результатам одной недели. А считай, с прошлого подкаста тем, на самом деле, довольно мало, но, тем не менее, есть что новенькое. Как обычно, специально для нашего подкаста вышел новый превью Дотнет Эспайра.
98.24 110.42 SPEAKER_00 Я думаю, нам подкаст нужно переименовывать в Эспайр Дотнет или что-нибудь в этом духе, потому что он у нас просто хедлайнер всех тем, последний много выпусков. Ну, похоже, действительно над ним работает много народа и работает активно.
110.42 115.74 SPEAKER_00 Ну, или, по крайней мере, может быть, немного, но активно, и поэтому действительно по нему есть о чём рассказать.
115.74 134.26 SPEAKER_00 С него тогда, пожалуй, и начнём. Это довольно большое обновление. Как обычно, всё это ещё превью, поэтому надо понимать, что здесь опять поломали часть опишек, у части опишек поменялось поведение, добавили какие-то новые опишки. Те опишки, которые были добавлены в превью третьим, поменяли свой смысл.
134.26 142.46 SPEAKER_00 Короче, обновляйтесь очень аккуратненько и будьте готовы к тому, что всё не то, что там перестанет работать, а даже перестанет собираться.
142.46 144.26 SPEAKER_00 Разработчики развлекаются как могут.
144.26 157.78 SPEAKER_00 Ну, как раз превью это позволяет делать, и это прикольно, на самом деле, мне кажется. Давно им Гринфилда такого не давали. Знаешь, когда ты пилишь Дотнет, там 20 лет уже, Легаси, там платформы, всё такое, а тут раз из чистого листа проект. Красота же?
157.78 164.66 SPEAKER_00 Да вообще зашибись. Наверное, они очень довольны. И поскольку они были очень довольны, они сделали следующие вещи.
164.66 182.42 SPEAKER_00 Во-первых, как мы помним, Aspire это штука для локальной оркестрации ваших сервисов. И для того, чтобы запускать, например, в том числе какие-нибудь контейнеры, которые у вас могут быть в качестве зависимости, базы данных, ещё что-нибудь, естественно вам нужен какой-нибудь, ну, рантайм для контейнеров.
182.42 237.78 SPEAKER_00 И до превью 4 это был только докер, теперь поддержали ещё и подман. Причём Дотнет Аспир будет автоматически определять, что у вас есть, подман или докер. Если оба есть, то будет выбран докер, но можно через переменное окружение сказать, не-не-не, используй подман. А если докера нет, а подман есть, то будет использоваться подман. Так что если вы фанат подмана, то теперь Aspire тоже можно для вас использовать. Вами использоваться может он. Дальше дэшборд. Дэшборд это штука, которую вы видите, собственно, и, наверное, одна из главных таких вау-частей Aspire. Этот красивый дэшборд со всеми метриками, трейсами и всем остальным. Очень важное изменение, которое произошло в превью 4, это то, что дэшборд теперь можно запускать абсолютно независимо от всего остального Aspire. Он при этом наружу, это просто докер-контейнер, который можно запустить, наружу вытащить два порта. По одному, собственно, будет доступен UI-кик, по другому будет доступен OpenTelemetry.
237.78 258.38 SPEAKER_00 Собственно, этот самый endpoint, куда вам нужно настроить все ваши приложения, чтобы слали метрики, трейсы и всё остальное. И всё, и ваш дэшборд будет показывать, в общем-то, метрики, трейсы, логи и всё остальное для вашего внешнего, по отношению к Aspire, приложения.
258.38 266.10 SPEAKER_00 Насколько я понимаю, это был самый частый запрос, который только происходил от сообщества, да? Давайте нам отдельный контейнер с прекрасным дэшбордом.
266.10 430.14 SPEAKER_00 Да, ну вроде как дали, всё работает, всё хорошо. Ну, не так, давай так. Наверняка что-нибудь не работает, но, по крайней мере, я видел не один успешный кейс того, что вот, да, там, премьер, всё такое. Всё работает, кроме того, у Aspire есть отдельный репозиторий, называется dotnet/aspiresamples, это премьеры приложений всяких разных с dotnet Aspire. В частности, там есть теперь пример приложения со standalone дэшбордом, где вы запускаете отдельное приложение, которое никак не связано с Aspire, и оно шлёт метрики в отдельный дэшборд. Дальше, в дэшборде добавили навигацию с клавиатуры. Ну, там понятно, что не абсолютно всё полноценно с клавиатурой поддержано, но всякие основные действия с клавиатурой теперь делать можно и там быстренько переключаться между разными видами. И для метрик, если вам хочется, например, посмотреть не только их в графическом виде, но и в табличном виде, то теперь есть этот самый табличный вид. Иногда бывает полезно. А по части работы с базами данных, я уже в прошлый раз рассказывал, как добавляют новые экстенджин методы, чтобы, например, добавить какой-нибудь pgadmin автоматический, то есть там docker-контейнер, к нему сайдкаром ещё один docker-контейнер, в котором, собственно, запускается pgadmin. Такую же штуку добавили теперь для MySQL и для Mongo. Соответственно, это Mongo Express и для MySQL, конечно же, phpMyAdmin, какой же ещё, так скажем, какой же ещё клиент использует для MySQL, это до сих пор phpMyAdmin. Кроме того, добавили новые экстенджин методы, которые выглядят как enrich, дальше название провайдера и dbContext, то есть вы теперь можете сказать enrich SQL Server dbContext, и в этом случае у вас появятся, так скажем, провайдеры-специфичные функции в этом самом dbContext, он там сможет настраивать специфичные штуки для конкретно этого провайдера. Кроме того, исправили работу миграции Entity Framework, потому что если вы когда-нибудь пробовали, допустим, создавать, запускать и так далее миграции Entity Framework, то для того чтобы, когда вы запускаете .NET, EF, Migrate, что-то там, на самом деле запускается по факту ваше приложение, но в некотором специальном режиме, и вот если ваше приложение было построено с помощью .NET Aspire, где у нас всякие Service Discovery и вот это всё, то такой специальный режим работы с миграциями EF Core не работал, потому что не мог найти connection строку в базе данных, она же через вот это все, Service Discovery должна находиться, вот это всё, но не находилось, теперь это пофиксили, теперь работает, можно пользоваться.
430.14 443.26 SPEAKER_00 С контейнерами, если вы работали, вот там как раз поменялось методы немножко, переименовались какие-то, удалились, по-моему, даже, так что посмотрите внимательно.
443.26 488.22 SPEAKER_00 Команда поняла, кроме того, что бывает такое, что некоторые параметры вашего приложения должны быть кастомизируемы на этапе диплоймента, ну, такое бывает, нужно, чтобы для теста и для прота у вас были разные просто какие-то значения какого-то параметра, просто хотя бы значения, и теперь в конфигурации можно задавать такие параметры, причем они, если вы строите диплоймент-манифест, а я напомню, что Aspire можно просто запустить приложение, а можно запустить вот этот вот Aspire Host в режиме, когда он сгенерит JSON-чик манифеста, и вот когда он генерирует JSON-чик манифеста, он у вас спросит все нужные параметры, которых ему не хватает из дефолтной конфигурации, а какие значения задать при генерации того или иного манифеста.
488.22 498.90 SPEAKER_00 Дальше, для улучшения, так скажем, со стороны программерской точки зрения, появилось некоторое количество новых классов и методов.
498.90 513.42 SPEAKER_00 Во-первых, появилась штука под названием Distributed Application Execution Context, которая позволяет понять вообще, в каком режиме вы сейчас запускаетесь, вы сейчас запускаетесь для того, чтобы поднять приложение локально или для того, чтобы тот самый сгенерить манифест.
513.42 517.42 SPEAKER_00 Возможно, у вас будет по-разному даже логика кода основана на этом.
517.42 537.38 SPEAKER_00 А также в extension-методах раньше был метод только s что-нибудь, а теперь есть методы run s, publish s, ну и остался соответственно просто s что-нибудь, которые позволяют как раз-таки менять немножко поведение в конфигурации для разных кейсов паблиша или запуска.
537.38 541.62 SPEAKER_00 Так, что у нас еще?
541.62 547.98 SPEAKER_00 Для контейнеров добавили возможность настраивать всякие свойства, то есть там ImageTag, например.
547.98 552.50 SPEAKER_00 Разделили то, как bind, собственно, папочки и вольюмы.
552.50 555.82 SPEAKER_00 Это разделение разных методов.
555.82 583.14 SPEAKER_00 Для сервисов дефолтное поведение спайра заключается в том, что если ваш сервис экспозит наружу TCP-порт, то будет автоматически создана проксия, которая ну такой типа ля как ingress в кубернет, ну это очень отдаленно это напоминает, штука, через которую собственно проксируется все, и теперь это можно отменить, если вам вдруг по какой-то причине это мешает там для очень специфических кейсов.
583.14 614.86 SPEAKER_00 Пом-пом-пом-пом-пом-пом-пом-пом, ну там какие-то изменения для ажура, какие-то изменения для вот этого формата манифеста, потому что, чтобы поддержать новые фичи, в Visual Studio добавили возможность паблиши напрямую в ажур, и в статье указано, что там есть некоторое количество non-issues, то есть вещей, которые не работают, и поэтому посмотрите внимательно, вдруг там закралась какая-то issue, которая вам будет очень нужна, поэтому тогда подождите немножко, пока ее исправят, последите на гитхабе.
614.86 626.70 SPEAKER_00 Вот, примерно такие нововведения в Preview 4, я все хочу попробовать standalone дешборд, и кажется, у меня скоро появится такая возможность, посмотрим, если попробую, расскажу.
626.70 636.30 SPEAKER_00 Да, звучит очень привлекательно, когда у тебя отдельное приложение, никак не связанное с Aspire, которое в принципе только для разработки нужно, а вот дешборд, вполне хорошенький, отдельно стоящий.
636.30 642.70 SPEAKER_00 Да, но видишь, он требует, чтобы все слалось через OpenTelemetry, поэтому там, ну получается… Ну а что у тебя не шлется через OpenTelemetry?
642.70 644.42 SPEAKER_00 По-моему сейчас и так все шлется.
644.42 647.82 SPEAKER_00 Ну логи не шлются через OpenTelemetry, логи в стедаут пишутся.
647.82 663.02 SPEAKER_00 Ну потому что в контейнерах в среднем так принято, да, и дальше оно там где-то там в кубере вокруг контейнерами всякими сайткарами собирается, со всех нужных контейнеров и так далее.
663.02 664.02 SPEAKER_00 Ну в общем, понятно.
664.02 669.50 SPEAKER_00 Ну опять же, добавишь один маленький синк одной строчечкой и он тебе будет писать плюс еще и в OpenTelemetry.
669.50 670.50 SPEAKER_00 Ну, наверное.
670.50 671.50 SPEAKER_00 Делов-то.
671.50 673.86 SPEAKER_00 Ну делов, но все-таки надо сделать, придется.
673.86 674.86 SPEAKER_00 Так лень.
674.86 675.86 SPEAKER_00 Чтобы все само работало.
675.86 676.86 SPEAKER_00 Надо же это.
676.86 677.86 SPEAKER_00 Мейджик должно быть.
677.86 678.86 SPEAKER_00 Ну да ладно.
678.86 694.34 SPEAKER_00 Помимо, собственно, превью-китерия, связанная новость, это если вы пользуетесь JetBrains Райдером, то теперь появился новый плагин для поддержки .NET Aspire, он делает следующую штуку.
694.34 706.20 SPEAKER_00 Во-первых, у вас в сервисе, ну понятно, что для .NET Aspire в Райдере тоже доступны нужные шаблоны солюшенов, шаблоны приложений, тут все так же, как вижу у студии.
706.20 749.44 SPEAKER_00 Также у вас появляется новое окошко в Tool Window, в котором вы можете посмотреть переменные окружения, метрики и на основе трейсов, насколько я понимаю, трейсы именно вот в формате трейсов, реквестов сейчас посмотреть нельзя, но на основе информации о трейсах строится примерное, ну они это называют архитектурой вашего приложения, архитектурой некоторого взаимодействия в вашем приложении, то есть показываются какие компоненты, кто куда как шлет, с какой частотой, ну и в каком количестве были посланы те или иные, по тем или иным линкам какие-то запросы, может помочь понять структуру вашего приложения, когда вы, например, изучаете какое-нибудь новое приложение, которое вам досталось.
749.44 754.28 SPEAKER_00 Предположение, что в нем, конечно, настроены все трейсы, метрики и все остальное.
754.28 804.44 SPEAKER_00 И второй момент, что в статье написано, плагин Open Source, плюс в статье описаны некоторые моменты про то, как он работает, то есть все это работает через тот самый архистратор Control Plane, Distributed Control Plane, про который мы рассказывали вам 2 или 3 выпуска назад, это Close Source штука, у которой выглядит как будто бы примерно как Kubernetes-like API, но фактически эта штука, она управляет всеми процессами, запусками, контейнерами и всем добром, но если нужно что-то дебажить, то понятно, что она сама дебажить не умеет, для этого нужна IDE, и для того, чтобы она вместе работала с IDE, есть некоторое количество endpoints, которые нужно реализовать или которые нужно использовать для того, чтобы с ней общаться.
804.44 829.28 SPEAKER_00 То есть на стороне IDE фактически нужно реализовать 3 endpoints, 1, 2, это Put и Delete для Run Session, это соответственно для получения всяких разных команд от Control Plane, и есть еще Endpoint Get Run Session Notified, который периодически, я так понимаю, Control Plane дергает, и мы туда можем всякие notifications засылать.
829.28 845.76 SPEAKER_00 Кроме того, у Control Plane вы задаете 2 переменных окружения специальных, Debug Session Port и Debug Session Token, и оно каким-то волшебным магическим образом, собственно вы можете из райдера дебажить все, что надо, получая доступ к этому через этот самый Control Plane.
845.76 854.12 SPEAKER_00 Более детально в статье особо ничего не описано, дальше есть отсылка к исходникам, то есть, ну они там довольно понятные, можно взять и посмотреть просто как это сделано.
854.12 864.76 SPEAKER_00 Вот, кроме того, там же можно посмотреть, как перехватываются всякие OpenTelemetry запросы, для того, чтобы райдер тоже умел отображать метрики и те самые трейсы.
864.76 872.80 SPEAKER_00 Так что, если хочется посмотреть чуть поглубже, как этот Espire работает изнутри, вот можно заглянуть со стороны такого плагинчика.
872.80 876.36 SPEAKER_00 Ну, отлично, хоть кто-то развивается.
876.36 885.36 SPEAKER_00 Кстати, если ты утверждаешь, что в Espire там полную мощь идет разработкой, там много людей над ним работают, знаешь, откуда эти люди взялись?
885.36 887.84 SPEAKER_00 Ну, вероятно, из Microsoft.
887.84 909.06 SPEAKER_00 Да, да, не просто из Microsoft, они, наверное, перешли из основного .NET Runtime, из .NET ASP и Entity Framework, в общем, из всех команд, судя по всему, так воодушевил всех Espire, что разработчики просто перешли из всех команд к нему, потому что вышел .NET 9 Preview 2, и мне кажется, он еще беднее, чем Preview 1, в котором не было просто ничего.
909.06 913.80 SPEAKER_00 Ну, они как малые, там, не знаю, Working on Performance и все?
913.80 923.60 SPEAKER_00 Ну вот, все по-разному, например, товарищ Entity Framework, он как всегда просто промолчал, он ничего не выпустил, вот, а все остальные что-то попытались из себя написать.
923.60 925.64 SPEAKER_00 Давайте посмотрим, что же у них получилось.
925.64 939.40 SPEAKER_00 Кстати, нужно сказать, что наконец-то начали появляться гневные комментарии по поводу нового способа анонсирования вот этих с GitHub, где каждая статья сама на себя 10 раз ссылается, и нифига не понятно, от чего же все-таки-то поменялось.
939.40 942.16 SPEAKER_00 В общем, гневные комментарии мы дождались, это хорошо.
942.16 944.40 SPEAKER_00 А эти комментарии, они в комментах к этим статьям?
944.40 947.16 SPEAKER_00 Да-да, именно так, поэтому ко всем.
947.16 948.16 SPEAKER_00 Понятно, окей.
948.16 957.08 SPEAKER_00 Типа уже люди кричат, я не пойму, куда смотреть, где изменения-то, что вы нас ссылками кормите на какую-то пургу, давайте чуть-чуть уже наконец.
957.08 964.44 SPEAKER_00 Видишь, ни у одного меня складывается впечатление, что я просто половину не нахожу изменений, потому что то, что они выдают, это какие-то крупицы.
964.44 967.96 SPEAKER_00 Ладно, хватит лирики, пойдем посмотрим.
967.96 977.08 SPEAKER_00 Итак, .NET 9 Preview 2, начнем с рантайма, там парни оптимизируют, и в отличие от моего, они реально оптимизируют, т.е.
977.08 978.08 SPEAKER_00 там занятые люди делом.
978.08 985.64 SPEAKER_00 Добавили луп оптимизацию, т.е. улучшили по сравнению с Preview 1, обратно расширили и углубили.
985.64 1012.12 SPEAKER_00 Сделали inlining, thread local, static мемберов, в общем теперь такие довольно редкие, но наверное в этом, в нативном коде часто встречается, когда ты делаешь thread local static, какое-то поле для того, чтобы обращаться к нему из нескольких потоков и при этом не тратить время на синхронизацию межпоточную, поэтому такая структура довольно полезная и наверное часто встречающаяся все-таки в низкоуровнем коде.
1012.12 1016.08 SPEAKER_00 Вот теперь она умеет inlining, что не может не радовать.
1016.08 1055.36 SPEAKER_00 Также PGO улучшил работу каста и проверки типов, т.е. PGO теперь у нас Profile Guide Optimization, он умеет советовать на основании профиля, умеет предсказывать примерно тип, который будет в том или ином условии, например в частном пробеге по циклу, каких-то непонятных типов или в тестировании типа, а вот Rigid на основании вот этой оптимизации уже умеет выбирать более быстрый путь каста ваших переменных или проверки типов ваших переменных, что очень сильно сокращает время на тот же самый каст или на ту же самую проверку.
1055.36 1075.64 SPEAKER_00 Добавилось векторных оптимизаций в ARM64, например появилась новая имплементация encode to UTF-8 метода, а также заиспользовались multi-registered инструкции, т.н. для загрузки, для сохранения строк и прочего, в общем, такие тоже мелкие улучшения.
1075.64 1081.64 SPEAKER_00 В общем, Runtime работает, в Runtime это пока все хорошо, насчет ASP.
1081.64 1105.04 SPEAKER_00 У ASP по мелочи тоже добавилось, прежде всего там у Blazor, если какие-то улучшения отметить, можно добавление в Blazor компонент конструктор инжекшена, теперь они смогут не только в Property Injection свои зависимости из регистрированных сервисов добавлять, но и как белые люди пойдут наконец-то через конструктор, как и положено.
1105.04 1138.72 SPEAKER_00 Дальше у нас у Blazor, это изменения в OpenID и AUV, в настройках OpenID и AUV, дело в том, что теперь появилась специальная опция Additional Authorization Parameters, которая позволяет вам настроить то сообщение, которое будет уходить в Identity Server, и сделать это довольно просто, через опции, как и положено настраиваться, и в это сообщение можно добавить различные query-параметры.
1138.72 1144.88 SPEAKER_00 Такое часто необходимо, когда ты взаимодействуешь с OpenID Connect и хочешь послать какую-то дополнительную информацию.
1144.88 1157.60 SPEAKER_00 Раньше приходилось подписываться на специальный event, цеплять там callback, переопределять hook, в этом hook записывать новые опции, в общем, было возможно, но не так красиво и элегантно.
1157.60 1178.84 SPEAKER_00 Здесь такую небольшую ручечку тоже добавили, в HTTP size добавили поддержку новых флажков, которые называются Enable Kerberos Credential Caching и Capture Credentials, это естественно для HTTP size, и они позволяют улучшить работу, прооптимизировать работу Windows аутентификации, как раз на основе Kerberos.
1178.84 1197.06 SPEAKER_00 Ну и последний наш любимый мальчик, это .NET MAUI, у которого можно выделить одну-единственную строчку, Release was focused on quality, т.е. парни занимаются надежностью, перформансом и качеством своего продукта уже который год, без внесения новых фич, я так подозреваю.
1197.06 1243.74 SPEAKER_00 Ну там, кстати, я вот сейчас не помню, для MAUI как раз анонса, или еще, нет, подожди, это был не MAUI анонс, для MAUI анонса был какой-то комментарий, типа мол, ну чуваки, ну давайте вы там это, может все-таки пофиксите, что у нас там не знаю, контроллы не ресайзятся, или может там вот, пофиксите, что у нас там типа, экраны не переключаются в андроиде, ну типа такие корные фичи как бы UI фреймворка, вот, и там такой чувак такой, ну вот типа если вы пофиксите вот эти там 5 пунктов, ну можно будет пользоваться уже там, вы решите по крайней мере мои проблемы, потому что сейчас этим пользоваться как-то не очень везя, но они видимо над каким-то другим квалити работают.
1243.74 1247.62 SPEAKER_00 Там ответ хоть какой-то был там, не пофикси, не пофикси, нет?
1247.62 1252.94 SPEAKER_00 Может там вообще людей как бы уже нет давно, и там чисто бота, или релиз заклипает по скрипту, да и все.
1252.94 1257.50 SPEAKER_00 Да, везде просто стандартный Redmi TXT, working on quality, точка.
1257.50 1261.34 SPEAKER_00 Да, да, quality, performance, окей, good boy.
1261.34 1262.34 SPEAKER_00 Рандомно выбирает.
1262.34 1266.26 SPEAKER_00 Над чем мы в этом превью работали, над quality или performance?
1266.26 1273.34 SPEAKER_00 Ну, в общем, такой довольно бедненький превью, опять же, никаких, ни новых фич, ни новых тулов, ни новых вообще ничего.
1273.34 1278.42 SPEAKER_00 Как бы один эспайр радует, в общем, больше у dotnet пока прогресса никакого.
1278.42 1282.90 SPEAKER_00 Ну и ладненько, обидно, конечно, но посмотрим.
1282.90 1295.62 SPEAKER_00 Дальше вышло у нас Visual Studio 17.10 review 2, тут пока тоже все не очень так, чтобы ух, но в студии не всегда у нас много всяких разных изменений, они во многом внутренние.
1295.62 1317.62 SPEAKER_00 В данном случае в разделе productivity у нас один сплошной co-pilot, то есть у нас теперь co-pilot умеет генерить дескрипшены для pull-requests, co-pilot умеет делать такую штуку, как если вы бродите по истории коммитов, то можно ткнуть в коммит, сказать "объясни" и он типа посмотрит в cng и попытается объяснить, что же там было на самом деле сделано.
1317.62 1322.22 SPEAKER_00 Ну вдруг там это в описании коммита написано, не знаю, fix bug.
1322.22 1329.90 SPEAKER_00 А он теперь сможет как бы за вас посмотреть код и, так сказать, суммировать, что же было реально сделано.
1329.90 1334.94 SPEAKER_00 Слушай, ну вот действительно, все вот эти описания коммитам, документация, это же прошлый век все.
1334.94 1340.14 SPEAKER_00 Зачем тебе вот эта документация, описания коммитам нужны, когда ты можешь каждый раз ее сгенерировать, например, на лету?
1340.14 1343.50 SPEAKER_00 Ты сгенерировал коммит, навел курсор, он тебе сгенерировал по этому коммиту, то, что там внутри, и все.
1343.50 1346.58 SPEAKER_00 Это же надо на каждый наводить, когда ты смотришь все-таки в историю.
1346.58 1351.14 SPEAKER_00 Полезно видеть прямо вот такую в пластушниковом истории, когда ты быстро можешь проглядеть глазами там.
1351.14 1355.14 SPEAKER_00 Ну опять же, при генерии, ну один раз прииндексировал, тебе всю историю показывают.
1355.14 1357.46 SPEAKER_00 Ну это дорого, вот это все, короче, не знаю.
1357.46 1358.46 SPEAKER_00 Зато надежно.
1358.46 1362.82 SPEAKER_00 У тебя никогда не будет ситуации, когда разработчик забыл написать комментарий или написал не тот комментарий.
1362.82 1364.06 SPEAKER_00 А через 5 дней обманет.
1364.06 1378.66 SPEAKER_00 Ну через 5 дней, конечно, сгенерит, но мне кажется, я боюсь, что он может упустить, так сказать, или не понять бизнес задумку этого изменения, то есть он технически-то, конечно, скажет, тут поменяли, тут добавили фабрику, тут вот заинжектили новые поля, а здесь это.
1378.66 1383.66 SPEAKER_00 Теперь мы там, не знаю, в эндпоинт, ну ладно, в эндпоинт добавили поле, это еще хоть как-то к бизнесу может относиться.
1383.66 1390.14 SPEAKER_00 А в комменте я все-таки могу написать там типа, ну там, не знаю, мы разработали фичу экспорта чего-нибудь.
1390.14 1391.82 SPEAKER_00 Ну именно бизнес терминов.
1391.82 1397.70 SPEAKER_00 Слишком хорошо мнение разработчиков, тем более их большинстве, о массе, если мы берем массу.
1397.70 1398.70 SPEAKER_00 Ну может быть.
1398.70 1399.70 SPEAKER_00 Короче, ладно.
1399.70 1410.42 SPEAKER_00 Дальше, если вы работаете с pull-реквестами на гитхабе либо в Azure DevOps, в Visual Studio теперь можно прямо комменты посылать к ним и работать с ними, я там резолвить вот это все.
1410.42 1420.54 SPEAKER_00 А также в раздел productivity отнесли новые варианты форматирования текста в Visual Studio, когда вы настраиваете фонты для разных кусочков, ну там для комментариев, не знаю, для ключевых слов.
1420.54 1428.22 SPEAKER_00 Теперь можно, например, сделать ключевые слова подчеркнутыми или перечеркнутыми, или комменты этим курсивом.
1428.22 1437.04 SPEAKER_00 Короче, теперь можно у фонтов, раньше доступен был только либо normal, либо bold, а теперь можно и подчеркнуть, и таликом, и перечеркнуть.
1437.04 1438.66 SPEAKER_00 Это прямо productivity.
1438.66 1443.90 SPEAKER_00 Я как-то пропустил в productivity, вы в студии легатуру-то поддержали у фонтов?
1443.90 1447.74 SPEAKER_00 Я не видел этого нигде в анонсах, но я не пользуюсь ими, поэтому не знаю.
1447.74 1448.74 SPEAKER_00 Интересно-интересно.
1448.74 1456.74 SPEAKER_00 Может быть, и да, может быть, и нет, не знаю, короче, но я даже в райдере ими не пользуюсь, поэтому я как-то не люблю.
1456.74 1472.84 SPEAKER_00 Так, довольно важные изменения, у нас даже про это есть отдельная статейка, что винформовый редактор теперь у нас, дизайнер в смысле, он теперь out of process, студия еще немножко похудеет, там есть для этого обоснование, мы поясним, почему попозже.
1472.84 1496.72 SPEAKER_00 Для SQL Server Developer Tools поддержали ARM64, для поддержки новых, даже не новых экстенджеров, я когда-то рассказывал, что теперь можно в VSConfig файлике указать нужные вам экстенджеры, и студия, открывая солюшен и увидя этот VSConfig файлик, автоматически их подхватит и предложит заинсталить.
1496.72 1502.20 SPEAKER_00 Ну, например, если вам нужно при работе с определенным солюшеном иметь какие-то определенные экстенджеры поставленные.
1502.20 1507.16 SPEAKER_00 То можно этот файлик сгенерить, заэкспортировав установленные экстенджеры.
1507.16 1508.16 SPEAKER_00 Как-то так.
1508.16 1512.04 SPEAKER_00 Не пробовал, не знаю, но написано вот ровно так это можно сделать.
1512.04 1533.88 SPEAKER_00 И в плане дебаггинга и диагностики появились в профайле визуализации для метрик с типом up-down и observable counter, а также для garbage collection событий появилась вкладочка, точнее раздел под названием GC insights, где он будет пытаться пояснить вам, почему сработал тот или иной garbage collection.
1533.88 1542.40 SPEAKER_00 Это в принципе все есть в ивентах, это все можно было посмотреть в Perfume раньше, но вот теперь это все в Visual Studio и есть.
1542.40 1549.20 SPEAKER_00 И, собственно, продолжая про Visual Studio, это про WinForms дизайнер.
1549.20 1555.44 SPEAKER_00 С WinForms дизайнером есть очень забавная штука.
1555.44 1565.40 SPEAKER_00 Смотрите, студия стала 64-битной у нас сейчас, и поэтому WinForms дизайнер, ну, ожидаемый, естественно, тоже стал 64-битным.
1565.40 1572.48 SPEAKER_00 И это, как ни странно, проблема, потому что довольно много легофи-компонентов, они что, правильно, 32-битные.
1572.48 1587.64 SPEAKER_00 Поэтому если, как там условно, ReSharper пытался держать часть своих компонентов снаружи студии ради того, чтобы держать их 64-битными, то WinForms дизайнер держит out-of-process свой редактор, чтобы он был 32-битным.
1587.64 1591.68 SPEAKER_00 Фу, вот такого я еще не слышал, это хорошо, да.
1591.68 1600.24 SPEAKER_00 Потому что действительно есть довольно много старого софта, который использует легофи-компоненты, которые работают только на 32-битных штуках.
1600.24 1632.40 SPEAKER_00 Поэтому теперь при открытии солюшенов, в котором есть, соответственно, компоненты, по которым Visual Studio понимает, что кажется, что нужно будет здесь 32-битное что-то, она автоматически предложит теперь открыть это все в out-of-process дизайнере, и надо понимать, что в студии эти 2 дизайнера будут сосуществовать, то есть будет и in-process дизайнер, он более полнофункциональный, но будет и out-of-process дизайнер, который конкретно для 32-битных компонентов будет использоваться.
1632.40 1639.76 SPEAKER_00 Он не настолько прям крутой-крутой, как был, допустим, какая у нас студия была 32-битная последней?
1639.76 1640.76 SPEAKER_00 20?
1640.76 1641.76 SPEAKER_00 Да я что-то не помню уже.
1641.76 1650.12 SPEAKER_00 Возможно, она была тоже 22-й, вероятно, но какая-нибудь 15-я точка что-нибудь, они же давно уже 22-е.
1650.12 1662.44 SPEAKER_00 Ну короче, если вам нужен полнофункциональный редактор для 32-битных компонентов, пользуйтесь какой-нибудь условно старой студией 32-битной, потому что там он будет более feature-complete, так скажем.
1662.44 1691.44 SPEAKER_00 Здесь они прямо говорят, что если у вас есть какой-нибудь там, они называют highly-customized control designer, то есть всякие кастомные дизайн-тайм штуки, то они могут быть не поддержаны, они будут стараться работать над тем, чтобы поддержать как можно больше, но они прямо говорят, что не будет то, что они называют feature-parity с in-process дизайнером, но как бы если есть большой запрос от кастомеров, будут добавлять.
1691.44 1714.64 SPEAKER_00 Поэтому если вас работа с 32-битными компонентами останавливало от переезда на новую 64-битную студию, то в принципе это сейчас шанс попробовать, открыть, посмотреть в превью студии и понять работают ли ваши 32-битные компоненты или нет, если работают, кажется это хороший кейс переезда на новую студию, потому что новая студия приятнее развивается и все дела.
1714.64 1729.56 SPEAKER_00 Если же выяснится, что ваши компоненты по какой-то причине 32-битные не могут быть отредактированы в этом новом out-of-process дизайнере, напишите в Microsoft, может они что-то допилят и починят, потому что WinForms команда кстати в отличие от MAUI вполне себе активно работает.
1729.56 1733.28 SPEAKER_00 Видишь, даже выпилили целый дизайнер наружу.
1733.28 1742.28 SPEAKER_00 Да-да-да, вынести целый процесс и все так настроить там между студией и общением, в общем точно WinForms развивается намного сильнее, чем MAUI.
1742.28 1743.68 SPEAKER_00 Ну, это же прекрасно.
1743.68 1753.60 SPEAKER_00 Слушай, лигатуры студия поддерживает давно, я посмотрел, естественно для нее надо поставить какой-нибудь фейер-код или другой шрифт, поддерживающий лигатуры.
1753.60 1759.04 SPEAKER_00 Я давно жду лигатур в стандартном консолос-шрифте, вот чего мне не хватает.
1759.04 1760.04 SPEAKER_00 Я понял.
1760.04 1761.04 SPEAKER_00 Студия тут, конечно же, ни при чём.
1761.04 1764.36 SPEAKER_00 Я жду, конечно, от Microsoft, когда там консолос добавят.
1764.36 1766.08 SPEAKER_00 А они развивают консолос?
1766.08 1769.80 SPEAKER_00 Мне кажется, что они вот как его один раз делали, так его и не трогают с тех пор.
1769.80 1774.08 SPEAKER_00 Ну как развивают, да, ну потому что буквы новые в мире не появлялись, какой смысл развивать?
1774.08 1777.40 SPEAKER_00 Ну не знаю, переживать там, как красивенького добавить.
1777.40 1780.04 SPEAKER_00 Да он идеальный вообще, мой самый любимый шрифт.
1780.04 1782.64 SPEAKER_00 Ну я тоже на консолосе сижу, конечно.
1782.64 1790.84 SPEAKER_00 Ну поскольку мне лигатуры не нужны, я как-то с ними пробовал один раз, два раза, ну в смысле, да, недельку посидеть.
1790.84 1798.88 SPEAKER_00 И что-то я не проникся лигатурами, я вот не понимаю этих красивых там, больше либо равно, не знаю, глаз не цепляется за них.
1798.88 1806.24 SPEAKER_00 Ну я тоже не привык, не пользуюсь, ну хотелось бы, чтобы были, ну надо, чтобы ты пользовался, чтобы возможность такая была.
1806.24 1807.88 SPEAKER_00 А, да, то есть надо понимать, что если что, я могу включить.
1807.88 1808.88 SPEAKER_00 Ну окей.
1808.88 1819.28 SPEAKER_00 Да-да-да, что самого-самого плохого, когда ты женат, не то, что у тебя нет много женщин, а в том, что у тебя нет возможности иметь много женщин, так и здесь.
1819.28 1828.00 SPEAKER_00 Ну в общем, ладно, да, посмотрим, может когда-нибудь Майкрософт тоже, как и JetBrains, ещё один такой шрифт сделает, там уже будут лигатуры наконец-таки.
1828.00 1840.92 SPEAKER_00 Да не надо ещё один, лучше пусть это доделают, ещё один они сделали, у них же отдельный шрифт есть для Windows терминала своего, там отдельный шрифт, там отдельные лигатуры, даже с поддержкой анимированных эмоджи всех цветов кожи, в общем, там вот туда мы напихали всего подряд.
1840.92 1841.92 SPEAKER_00 Вот его и используй для года.
1841.92 1843.68 SPEAKER_00 Не хочу я, мне не нравится, я хочу консолус.
1843.68 1846.24 SPEAKER_00 Будет со смайликами вот этим всем там.
1846.24 1853.48 SPEAKER_00 Я с Курьер Нью переходил очень долго, знаешь, когда вот ещё был в этих первых, ну в ранних студиях там ещё самый первый, это Курьер Нью.
1853.48 1854.48 SPEAKER_00 Ну да, конечно.
1854.48 1855.48 SPEAKER_00 Гений Шрифт, в общем.
1855.48 1860.72 SPEAKER_00 Вот с него я долго переходил на консолус, теперь наконец-то свыкся с консолусом, а ты мне ещё предлагаешь какую-то хипстерскую хрень.
1860.72 1862.80 SPEAKER_00 Нет, мы на старом, на своём.
1862.80 1863.80 SPEAKER_00 Ладно.
1863.80 1868.36 SPEAKER_00 Вернёмся к вопросу через пару лет.
1868.36 1873.12 SPEAKER_00 Да, давай, отвечёмся от этих микрософтовских унылых фреймворков.
1873.12 1878.30 SPEAKER_00 Хочется притащить новый инструментик, называется husky.net.
1878.30 1888.88 SPEAKER_00 Это инструмент, который позволяет вам работать с хуками вашего гита, т.е. наверняка вы знаете, что у вас у всех есть гит, без этого сейчас уже совсем никуда.
1888.88 1895.44 SPEAKER_00 Вот, и у гита есть хуки, т.е. это так называемые триггеры по которым происходят какие-то действия.
1895.44 1906.80 SPEAKER_00 Например, можно отвалидировать то, что вы пытаетесь сейчас закоммитить в репозиторий, или там запустить форматирование, или в общем всё, чем ограничена ваша фантазия, но связано при этом с гитом.
1906.80 1909.84 SPEAKER_00 И для примера у гита есть четыре типа хуков.
1909.84 1914.72 SPEAKER_00 Во-первых, это client-side-hook, который ориентирован на коммиты.
1914.72 1917.88 SPEAKER_00 Это тот хук, который запускается во время git-коммита.
1917.88 1927.40 SPEAKER_00 Группа даже хуков, которые запускаются, когда вы набираете команду git-commit или жмакаете кнопочку commit, в зависимости от того, каким git-клиентом вы пользуетесь.
1927.40 1937.92 SPEAKER_00 И этот хук срабатывает у вас локально на компьютере, т.е. это происходит ещё до того, как какие-то изменения попадут на ваш сервер контроля версии.
1937.92 1941.44 SPEAKER_00 Также есть клиентский хук, который срабатывает на емейлы.
1941.44 1949.84 SPEAKER_00 В общем, если кто не знал, изначально гит разрабатывался так, чтобы забирать из емейлов дифы и накатывать их на ваш исходный код.
1949.84 1953.52 SPEAKER_00 Но этим пользуется, по-моему, кроме Линукса уже никто, наверное.
1953.52 1957.12 SPEAKER_00 Ну, в каких-то красноглазых мирах Линукса, наверное, этим пользуются.
1957.12 1958.12 SPEAKER_00 Ладно.
1958.12 1964.28 SPEAKER_00 В нормальной среде, мне кажется, я не видел ни разу живого человека, который пользуется емейлами для того, чтобы поддерживать актуальность своего git-репозитория.
1964.28 1971.92 SPEAKER_00 Также на клиенте у нас есть гук, у нас есть хуки, которые связаны не с коммитами, а с чем-то другим.
1971.92 1978.56 SPEAKER_00 Например, когда вы делаете rebase, вы тоже можете повесить на это какой-то триггер и перехватить rebase и с ним чего-то сделать.
1978.56 1983.20 SPEAKER_00 И еще один интересный тип хуков есть – это сервер сайт хуки.
1983.20 1996.36 SPEAKER_00 То есть это тот хук, который, например, срабатывает после того, как вы закоммитили это все, ушло на сервер, и там запускается специальный хук, который позволяет вам, например, зареджектить этот коммит, который вы пытаетесь залить.
1996.36 2006.24 SPEAKER_00 Например, на сервере запустить какую-то проверку и сказать «нет, вы ввели плохой комментарий, Charg5 умеет лучше, заберите свой коммит обратно и больше его не присылайте в таком виде».
2006.24 2009.80 SPEAKER_00 Ну, это тоже можно сделать с помощью хука.
2009.80 2012.96 SPEAKER_00 Нам интересны больше client-site хуки.
2012.96 2020.76 SPEAKER_00 Давайте рассмотрим именно их и, наверное, на коммиты, потому что самый частый случай, самый популярный хак хуки – это как раз на коммиты.
2020.76 2022.76 SPEAKER_00 Здесь можно выделить четыре хука.
2022.76 2029.44 SPEAKER_00 Это pre-commit хук, который, соответственно, вызывается до коммита, и вы можете там чего-нибудь сделать, что-нибудь проверить.
2029.44 2040.64 SPEAKER_00 Дальше, prepare-commit-message – это хук, который формирует дефолтное сообщение о том, какой месседж прикрепится к вашему коммиту.
2040.64 2050.50 SPEAKER_00 Вот как раз, наверное, идеальное место для того, чтобы сюда засунуть чат GPD, который проанализирует ваши файлики и выдаст вам дефолтный месседж уже какой-то актуальный и красивый.
2050.50 2057.48 SPEAKER_00 Дальше у нас есть commit-message – это случается же после того, как юзер ввел свой commit-message, что он там одобрил.
2057.48 2067.12 SPEAKER_00 То есть вы можете перехватить то, что ввел пользователь и каким-то образом, например, проверить, ввел ли он что-то, скажем слово, fix или не ввел, или, может быть, добавить какую-то дополнительную информацию.
2067.12 2078.40 SPEAKER_00 И есть post-commit – это хук, который происходит уже, когда коммит успешно произошел, все хорошо, все остальные триггеры проверили, в общем, все зафиксировалось.
2078.40 2087.92 SPEAKER_00 Обычно такой хук версирует какие-нибудь нотификации, то есть отправить email, что мы закоммитили новую версию, или перезапустить билд, или еще какую-нибудь глупость сделать.
2087.92 2089.80 SPEAKER_00 Вот, что же такое huskinet?
2089.80 2100.00 SPEAKER_00 Huskinet – это инструмент, который позволяет вам удобно подцеплять новые триггеры на эти хуки и писать пайплайны.
2100.00 2101.92 SPEAKER_00 Давайте подробнее рассмотрим, как он работает.
2101.92 2103.72 SPEAKER_00 Прежде всего, его нужно установить.
2103.72 2115.16 SPEAKER_00 Делается это стандартной командой dotnet tool install husky, и он устанавливается, как обычный global tool в вашей репозитории или в ваш компьютер, смотря, какие параметры вы укажете.
2115.16 2119.12 SPEAKER_00 Дальше вам необходимо научить husky работать с вашим приложением.
2119.12 2120.72 SPEAKER_00 Это команда husky install.
2120.72 2135.32 SPEAKER_00 В этот момент он создает себе в руте специальную папочку, которая называется .husky, и в этой папочке он начинает складывать свои конфигурации, то есть все триггеры, как они настроены, что они могут вызывать, и так далее.
2135.32 2147.12 SPEAKER_00 Например, с помощью команды точно так же husky at pre-commit, и через -c задав команду, вы можете просто-напросто команду повесить на какой-то pre-commit хук.
2147.12 2157.04 SPEAKER_00 В этот момент в директории .husky создается файлик pre-commit, и там полностью будет скрипт того экшена, который вам нужно выполнить.
2157.04 2184.04 SPEAKER_00 Например, если вы откроете этот скрипт, pre-commit хук, и запишите в этот скрипт три магические строчки - dotnet build, dotnet format и dotnet test, то на каждый commit в вашем GTA будут запускаться эти команды, то есть у вас проверится, что проект билдится, у вас проверится, что проект отформатирован со всеми сандартами, и у вас запустятся тесты, и проверится, что все тесты проходят.
2184.04 2187.68 SPEAKER_00 Если хоть одна из этих команд зафейлится, у вас коммит отменится.
2187.68 2191.68 SPEAKER_00 Таким образом можно себя защитить, чтобы в репозитории не заливали всякую чушь.
2191.68 2221.30 SPEAKER_00 Но здесь есть небольшие тонкости, например, dotnet формат по умолчанию, если ее задать без каких-либо параметров, она модифицирует файлы, то есть если у вас файл не соответствует каким-то вашим настройкам, например, допустим в editor-config, скобочку кто-то не на той строчечке оставил, dotnet формат вам эту скобочку перенесет, отформатирует файлик правильно, и, казалось бы, все хорошо, но сделает она это уже после того, как сформирован тот пакет файлов, тот пакет изменений, который сейчас будет коммититься.
2221.30 2233.04 SPEAKER_00 То есть, по сути, то, что она отформатирует, оно не войдет в этот пакет коммита, то есть вы закоммитите старую версию, а файлики, которые dotnet формат починил, они останутся у вас лежать незакоммиченными.
2233.04 2247.40 SPEAKER_00 Казалось бы, это легко можно исправить, вызвав после dotnet формата команду, которая называется git add ., которая просто добавит все, что сделал dotnet формат, добавит к текущему коммиту и только после этого закоммитит.
2247.40 2270.92 SPEAKER_00 Но здесь не все так просто, потому что git add . добавляет вам абсолютно все файлы, а вы иногда хотите коммитить не все, а только какие-то пачку изменений, поэтому лучше всего как раз использовать git формат со специальной опцией, которая называется verify no changes . Эта опция не модифицирует файлы, она лишь проверяет их, что они соответствуют тем договоренностям, которые установлены в этом репозитории.
2270.92 2283.76 SPEAKER_00 И если вдруг какие-то файлы не соответствуют договоренности, она соответственно тоже блочит коммит и отменяет операцию коммита, при этом рассказывая вам, что ей не понравилось и как это все надо исправить.
2283.76 2290.20 SPEAKER_00 Исправить довольно легко, просто запустите git формат без всяких опций и она вам все сама исправит, в большинстве своем.
2290.20 2300.04 SPEAKER_00 Вот, это все просто хуки, пользоваться ими в таком виде можно, но есть более полезные свойства, это pipeline, который также поддерживает хаски.
2300.04 2310.68 SPEAKER_00 Пайплайн - это просто-напросто описание шагов или параметров этих шагов, в общем, описание команд, которые будут происходить на тех же самых хуках, на тех же самых триггерах.
2310.68 2323.56 SPEAKER_00 Для этого вам достаточно в папке с конфигурацией .haski создать файл, который называется taskrunner.json и в стандартном формате, может быть вы его видели в Visual Studio Code, описать таски, которые должны происходить.
2323.56 2332.76 SPEAKER_00 Например, таску можно дать имя, но самое интересное это команда, которую нужно запустить и аргументы, которые будут передаваться в эту команду, еще дополнительные всякие мелкие настройки.
2332.76 2346.32 SPEAKER_00 После того, как вы эти таски описали, вы их можете вызывать непосредственно из команды строки с помощью команд haski_run указав имя таска или haski_run_group указать, например, имя группы и запустить при этом несколько тасков.
2346.32 2356.56 SPEAKER_00 В общем, это все мелочи, самое главное интересное, что haski, естественно, поддерживает запуск триггеров, которые написаны на дотнете.
2356.56 2360.60 SPEAKER_00 Она поддерживает все шарп скрипты и файлы, csx файлы так называемые.
2360.60 2390.20 SPEAKER_00 Все очень просто, вы опять же можете запустить напрямую через haski.exec, передав его в скрипт, который вы хотите запустить или же добавив его в вышеописанный pipeline, то есть с помощью таска, точно так же описав exec, описав файлик, в котором написан csharp код, который нужно запустить и на каждый хук или в зависимости на какой вы, на каждый commit или на тот хук, который вы подписались, у вас будет вызываться ваш csharp скрипт файл.
2390.20 2392.12 SPEAKER_00 Ему, естественно, вы можете передать аргументы.
2392.12 2404.00 SPEAKER_00 В аргументах, например, можно передать тоже commit message, который ввел пользователь или те файлы, которые у нас сейчас застейджены, например, чтобы не сканировать все файлы, а только те, которые, например, пользователь изменил.
2404.00 2422.44 SPEAKER_00 Это все можно передать параметрами и скрипт с помощью стандартной перемены args, соответственно, может все это считать, проанализировать, запустить какие-то действия и принять решение, позволять коммиту дальше происходить или сообщению к коммиту дальше цепляться или все это откатить с какой-нибудь ошибкой.
2422.44 2435.24 SPEAKER_00 Если вы захотите закоммитить ваш коммит и ваше сообщение и при этом хотите пропустить все вот эти verify, все проверки, все хуки, все триггеры, почему-то вы так можете сделать.
2435.24 2444.16 SPEAKER_00 Для этого достаточно к команде git commit добавить аргумент no verify, и он скипнет абсолютно все, что там написано.
2444.16 2459.44 SPEAKER_00 Вот такая хорошая инструментик, еще раз поддерживает C# скрипты, является кроссплатформенной, поэтому вы не можете писать хуки не как обычно пишут гитхуки на баше, на их обычно там пишут или на каком-нибудь винкомд, но только под виндой или еще что-нибудь.
2459.44 2471.92 SPEAKER_00 Так как у нас есть дотнет, мы как белые люди можем писать это кроссплатформенно на C#, поэтому поддерживаются и macos, и linux, и windows, естественно, и скрипты, соответственно, если вы напишете на C#, будут поддерживаться абсолютно везде.
2471.92 2481.40 SPEAKER_00 Поддерживаются всякие переменные окружения, которые там переменные гита, переменные, которые пользователь может сам вводить и прочее, в общем, гибкость тут абсолютно беспредельная.
2481.40 2493.60 SPEAKER_00 Поэтому если вам нужны client-side хуки с хорошим пайплайном, с нормальной поддержкой, с приличным языком, то вот husky-sharp довольно интересный инструмент, можно на него смело посмотреть.
2493.60 2507.96 SPEAKER_00 Интересно, если я добавил эту штуку, мой, а, блин, это же client-side, да, то есть по факту тот склон, сейчас, что-то я забыл, если я при этом склонирую репозиторий, то я же хуки не получу.
2507.96 2515.48 SPEAKER_00 Эти хуки заливаются в папочку .husky и заливаются на сервер, то есть все, кто их склонирует, по сути, client-side хуки получат.
2515.48 2520.88 SPEAKER_00 Естественно, можно пойти у себя их локально удалить, в общем, от этого никто не застрахован, для этого уже есть сервер сайт-хуки.
2520.88 2531.08 SPEAKER_00 Да, вот, я как раз про то, что тебе, во-первых, от того, что ты склонировал папочку .husky, ты не получил tool, как я понимаю.
2531.08 2533.68 SPEAKER_00 То есть тебе .net tool install все равно надо сказать локально.
2533.68 2544.44 SPEAKER_00 Ну .net tool install, если вы используете его не глобальный, а локальный, он тебе создаёт в репозитории манифест, .net tool манифест какой-то там.
2544.44 2548.80 SPEAKER_00 И в этом манифесте прописано, какие tools используются в данной репозитории.
2548.80 2559.00 SPEAKER_00 Поэтому, если ты склонируешь, ты получишь вот этот манифест вместе с клоном репозитория, и поэтому .net tool догадается, что ты какой-то tool используешь, скорее всего, он его даже сам скачает.
2559.00 2571.44 SPEAKER_00 Ну вот вопрос, кто его триггернёт, чтобы скачать, хотя, если все команды, там у тебя запускаются с помощью гита, то есть прежде всего git hook запускается самим гитом.
2571.44 2572.44 SPEAKER_00 Это понятно.
2572.44 2573.44 SPEAKER_00 Когда ты его дёргаешь.
2573.44 2581.92 SPEAKER_00 И вот сам гид, он уже будет запускать у тебя .net husky, а .net husky проверит, что такой инструмент зарегистрирован в манифесте, но не установлен, и в этот момент его скачает.
2581.92 2583.92 SPEAKER_00 Ух ты какой, хитрый.
2583.92 2584.92 SPEAKER_00 Хитрый, да.
2584.92 2593.08 SPEAKER_00 Я, кстати, не видел упоминания насчёт серверного hook'а, но теоретически ничего не мешает на husky написать и серверный hook.
2593.08 2596.48 SPEAKER_00 Странно, что документации не упомянули, может, почему-то и вырежут.
2596.48 2603.64 SPEAKER_00 Я думаю, что тут будет уже вопрос интеграции, ну где ваш сервер-гита крутится, да, и… ну хотя, в принципе, это command line, какая разница?
2603.64 2608.12 SPEAKER_00 Опять же, да, если это платформа command line, ему всё равно, где он крутится.
2608.12 2611.68 SPEAKER_00 Поэтому, мне кажется, как раз довольно он туда хорошо вписывается.
2611.68 2614.72 SPEAKER_00 Может, просто посчитали, что это сама собой разумеющаяся.
2614.72 2618.00 SPEAKER_00 Ну либо такая редкость, что кто-то .net потащит на сервер-гита.
2618.00 2629.88 SPEAKER_00 Не, ну хорошая тема, допустим, если вы не хотите нагружать вас сервер, у вас там сервер очень нагруженный, вы хотите нагрузку, например, по компилу, по тестированию, по форматированию оставить на машинах разработчиков.
2629.88 2634.48 SPEAKER_00 Ну пожалуйста, заводите hook, машины разработчиков напрягаются, но зато сервер шикардос.
2634.48 2641.72 SPEAKER_00 Ну и опять же, на сервере, ну, валидировать-то, ну хотя да, валидировать, типа reject коммит, прямо с сервера.
2641.72 2642.72 SPEAKER_00 Ну тратить время.
2642.72 2646.56 SPEAKER_00 .net формат много-то не кушает, хотя, смотря, кодовая база какая.
2646.56 2651.60 SPEAKER_00 Да-да, ты представляешь, там у тебя кодовая база, там 500 проектов и всё такое, .net формат там будет кушать ого-го, миллионы минут.
2651.60 2666.96 SPEAKER_00 Но опять же, если у тебя стоит клиентский hook, то очень маленькая вероятность, что на сервере что-то произойдёт, т.е. тебе там намного меньше надо ресурсов тратить, так как уже все файлы будут отформатированы хорошо, все тесты, скорее всего, и так пройдут, ну т.е. там больше такая предсказымость появляется.
2666.96 2673.28 SPEAKER_00 Ну или как бы договориться с разработчиками, они вроде тоже люди, должны понимать, что не надо удалять локальные хуки.
2673.28 2674.28 SPEAKER_00 Это благо.
2674.28 2676.44 SPEAKER_00 Угу, ну да, логично.
2676.44 2677.44 SPEAKER_00 Ладненько.
2677.44 2689.30 SPEAKER_00 Сегодня действительно у нас новостей мало, поэтому мы перейдём к разделу «Кратко о разном», и тут у нас тоже не так много новостей или ссылочек, которые попались на глаза.
2689.30 2698.80 SPEAKER_00 Во-первых, попалась на глаза, ну даже не Иши, это в разделе «Discussions» проекта Авалония сообщение о том, что они таки покидают .net foundation.
2698.80 2707.84 SPEAKER_00 Не знаю, кто там остался ещё, помимо майкрософтских проектов, но потихонечку оттуда как-то все плюс-минус покидают.
2707.84 2711.48 SPEAKER_00 Мы обсуждали Аку, по-моему, да, кого там ещё можно вспомнить?
2711.48 2714.52 SPEAKER_00 Ака была… Уно, Уно, по-моему, тоже вот туда ушёл.
2714.52 2716.32 SPEAKER_00 Да-да-да, и вот эти тоже.
2716.32 2731.48 SPEAKER_00 И там довольно такой обстоятельно написанная статья, ну точнее объяснение, что они ждали, что они получили, почему ушли, что всё это значит, ну там типа что поменяется для пользователей, ну кратко, в общем, ничего, понятное дело.
2731.48 2733.52 SPEAKER_00 Так погоди, а почему ушли-то самое главное?
2733.52 2734.52 SPEAKER_00 Что случилось-то?
2734.52 2773.88 SPEAKER_00 Ушли, потому что… Ушли, потому что это абсолютно бесполезный мембершип, то есть когда они туда входили, было плюс-минус понятно из манифеста Дотланд Фундейшн, что скорее всего условно там каких-то инвестиций, да, денег, грубо говоря, ждать не приходится, но вроде бы были какие-то намёки, обещания про то, что, возможно, с Фундейшеном будет попроще пушить свой проект, ну там не знаю, какой-нибудь помощь в продвижении, да, какой-нибудь там, не знаю, документация, ещё что-нибудь в таком духе, но в итоге не получили ничего, то есть оттого, что у них есть шильдик, что они состоят в Дотланд Фундейшн, они не получают ничего.
2773.88 2776.60 SPEAKER_00 Поэтому, а зачем тогда?
2776.60 2778.68 SPEAKER_00 Ладно, а теряли-то они тогда что?
2778.68 2781.84 SPEAKER_00 Ну если ничего не получали, ничего не теряли, ну пусть сидят ровно.
2781.84 2822.96 SPEAKER_00 С терянием там такая штука, что там немножко, насколько я помню, опять же из как раз таких вот уходов уна и других были какие-то же непонятки с тем, где там code ownership, если ты в Дотланд Фундейшн, ты обязан использовать микрософтовский этот, не сертификат, как он, короче этот agreement, когда ты контрибьютишь в репозиторий, ты должен именно подписываться, он должен подписываться у бота Майкрософта, вот это всё, короче там, наверное, ты теряешь того, что ты сидишь в фундейшне, ты теряешь некоторую, ну так сказать, единоличную власть над проектом, давай так скажем.
2822.96 2823.96 SPEAKER_00 Такую независимость, да?
2823.96 2824.96 SPEAKER_00 Ну такую типа, да, независимость.
2824.96 2843.08 SPEAKER_00 То есть она вроде в мелочах, она вроде техническая независимость, но ты, может, помнишь историю, да, когда там типа под видом бота, который там как раз вот эти вот contributions, да, approved, они там типа часть репозиторий к себе в организацию перевели, что-то было какое-то такое года полтора-два назад, мне кажется.
2843.08 2849.72 SPEAKER_00 Да-да, там какой-то чувак, по-моему, коммиты начал делать в те репозитории, в которых там не имел права делать, что-то такое там, не понятно вообще было.
2849.72 2856.08 SPEAKER_00 Ну да, в общем, в таком духе, поэтому в общем, ну ушли и ушли, как бы, ну и ладно.
2856.08 2863.48 SPEAKER_00 Вторая статья уже более техническая, я её на самом деле хотел сначала взять как основную статью в выпуск, но прочитав, понял, что я не готов это рассказывать.
2863.48 2887.64 SPEAKER_00 Статья от Кристофа Назара, это один из наших любимых, так сказать, копателей в дебрях дотнета и не только в дебрях дотнета, они сейчас с Конрадом Кокосо и Кевином Госсо, ещё двумя любителям копания в дебрях дотнета, работают над вторым изданием книжки Конрада про дотнет memory management, и в частности разбираются, что ж там наворотили в гармошке коллекторе, наворотили там довольно много всего.
2887.64 2898.92 SPEAKER_00 И в частности, в этой конкретной статье Кристоф рассказывает про то, как внутри устроена некоторая информация о статистике, которую собирает гармошка коллектора и как её можно вытащить наружу.
2898.92 2929.08 SPEAKER_00 Там довольно много всякого разного C++, ну не то что прямо кода-кода, но там всякие примеры кусочков структур на C++, того, как это всё эмитит свои венты, как это всё можно затягивать из дотнета, ну и в результате он написал некую дотнетную Тулзу, которая, если вам интересно, как работает гармошка коллектора, возможно, вам будет интересно либо посмотреть, как она устроена, либо даже просто поиспользовать как Тулзу, позапускать на ваших дотнетных проектах, посмотреть, какие события она будет вам эмитить.
2929.08 2934.96 SPEAKER_00 Так что если интересуетесь гармошкой коллектором, посмотрите в эту статью, там довольно интересно.
2934.96 2939.44 SPEAKER_00 Слушай, надо у Кокоса спросить, он Майони не приглашал в соавторы?
2939.44 2941.28 SPEAKER_00 Раз там у них такая вечеринка пошла.
2941.28 2949.96 SPEAKER_00 Ну, можно будет спросить, по-моему, нет, по-моему она у него там типа редактор-ревьюер, но не соавторы.
2949.96 2956.56 SPEAKER_00 Ну ладно, мне кажется, если бы её добавили прямо на книжку, было бы ещё интереснее, ещё бы интереснее второе издание смотрелось.
2956.56 2965.16 SPEAKER_00 Ну, возможно, может, ну знаешь, там как бы Госса, Назара и Кокоса тоже не самая плохая компания.
2965.16 2969.24 SPEAKER_00 Да-да-да, согласен, там как бы уже второго Тома не пришлось бы нам ждать.
2969.24 2975.36 SPEAKER_00 Она и так книжечка была немаленькая, мы там перед переводом пахтели довольно долго, а если ещё эти двое прибавятся.
2975.36 2979.52 SPEAKER_00 Скоро, боюсь, пахтеть на следующем, если будут переводить.
2979.52 2980.52 SPEAKER_00 Да-да-да.
2980.52 2991.94 SPEAKER_00 Так, я хочу вам рассказать тоже, интересно, у меня толза валялась давно, ну как, не так уж давно, когда у нас появился атрибут специальный про, как же он назывался?
2991.94 2992.94 SPEAKER_00 А!
2992.94 2993.94 SPEAKER_00 Unsafe Accessor атрибут.
2993.94 2996.20 SPEAKER_00 Сначала, давай сначала.
2996.20 2999.92 SPEAKER_00 Хочу вам рассказать про прекрасную толзу, которая называется PrivateProxy.
2999.92 3019.60 SPEAKER_00 PrivateProxy – это специальный инструмент, который основан на Source-генераторах, который генерирует вам строго типизированный обёртку, строго типизированный класс, дающий доступ ко всяким приватным полям, то есть, пропертям, методам, конструкторам, короче, ко всем приватным мембрам какого-то другого класса.
3019.60 3026.62 SPEAKER_00 Это стало возможным благодаря введению, недавно мы про него тоже рассказывали, такого атрибута как Unsafe Accessor.
3026.62 3029.04 SPEAKER_00 Если интересно, послушайте, прикольный атрибут, вкратце.
3029.04 3039.60 SPEAKER_00 Unsafe Accessor позволяет вам на уровне, по-моему, даже самого рантайма, доступиться как раз к приватным свойствам, мембрам и так далее, без накладных расходов.
3039.60 3048.56 SPEAKER_00 То есть, без преобразования в строку, без рефлекшена, без инвоков, еще какой-то чудо-магии, просто дается вызов на функцию и она вызывается.
3048.56 3053.44 SPEAKER_00 То есть, это самый максимальный, самый быстрый, самый правильный путь, как вызываются абсолютно все методы публичные.
3053.44 3055.76 SPEAKER_00 В общем, вот этот атрибут просто творит чудо.
3055.76 3067.08 SPEAKER_00 А данная библиотека просто-напросто помогает вам сгенерить с помощью Source-генератора такой враппер, такую обёртку, которая позволяет вам к любым приватным полям любого класса давать вот такой вот доступ.
3067.08 3077.48 SPEAKER_00 Строго типизированная, поддерживается абсолютно все, что можно, статики, филды, проперти, методы, все, что угодно.
3077.48 3082.72 SPEAKER_00 High performance, strongly typed, private accessor, короче, все как положено.
3082.72 3092.08 SPEAKER_00 Хорошая библиотечка, ее позиционируют как библиотеку для тестов, то есть, чтобы, например, в тестах могли тестировать свои приватные методы или приватные поля.
3092.08 3097.32 SPEAKER_00 Опять же, опустим, насколько это хорошо или плохо, может быть, некоторым людям иногда это надо.
3097.32 3112.12 SPEAKER_00 Но авторы говорят, библиотечка очень хорошая, никаких зависимостей в ронтаймах она не оставляет, так как все написано на Source-генераторах и никаких дополнительных магий не применяется, то ее можно тащить и в вашу основную функциональность, если вы почему-то этого хотите.
3112.12 3115.76 SPEAKER_00 В общем, пожалуйста, пробуйте, смотрите, любуйтесь, может пригодиться.
3115.76 3116.76 SPEAKER_00 Прекрасно.
3116.76 3123.72 SPEAKER_00 Ну и на этом мы будем завершать наш суперкороткий выпуск, это, наверное, наш рекорд в плане длины выпуска.
3123.72 3126.76 SPEAKER_00 Мы уложились в час.
3126.76 3129.72 SPEAKER_00 Экспериментальный, можем назвать его экспериментальный выпуск.
3129.72 3131.72 SPEAKER_00 Мы уже экспериментировали с самым длинным, а это теперь будет самый короткий.
3131.72 3137.48 SPEAKER_00 Пока это будет самый короткий, может быть, с исключением какого-нибудь первого пилота, я не помню, короче.
3137.48 3140.44 SPEAKER_00 Были у нас выпуски, короче, часа, по-моему, не было.
3140.44 3158.40 SPEAKER_00 Но тем не менее, мы успели посмотреть на Aspire Preview 4, DotNet 9 Preview 2, Visual Studio 1710 Preview 2, узнали, куда движется винформовый дизайнер в 64-битном мире, и посмотрели на Pre-Commit Hooky с библиотечкой, ну или с Toolon, точнее, хаски DotNet.
3158.40 3170.96 SPEAKER_00 Примерно так, на этом, наверное, на сегодня всё, мы будем очень ждать, что за ближайшие пару недель что-нибудь интересное произойдёт в мире ДотНета, и мы про это обязательно вам расскажем, ну или придётся что-нибудь искать.
3170.96 3173.16 SPEAKER_00 Или придётся уже наконец-то самим писать, да?
3173.16 3174.16 SPEAKER_00 А, ну можно так, конечно.
3174.16 3175.96 SPEAKER_00 Хватит читать, давай создавать контент.
3175.96 3188.32 SPEAKER_00 А вы напишите заодно на ютубчике или в комментариях, где вы до нас дотянетесь, напишите, насколько вам нравятся такие мелкие выпуски, может действительно зря мы там по 2 часа сидим, и часовые выпуски намного интереснее, а может даже ещё меньше захочется.
3188.32 3205.68 SPEAKER_00 Вообще пишите нам много всего интересного, особенно если вы наткнулись на какую-то хорошую статью или инструмент, у нас есть почта, у нас есть комменты, мы всегда читаем, всегда всем отвечаем, поэтому шары, репосты, комменты, лайки, звёздочки, сердечки, что там у вас ещё есть, всё присылайте, мы всё любим.
3205.68 3223.56 SPEAKER_00 Да, если есть идеи тем, например, тоже закидывайте, потому что статьи статьями, новости новостями, но в принципе мы иногда, как вот в прошлые разы про всякие рестайпы и прочее, обозреваем какие-то более фундаментальные темы, тоже можем посмотреть в эту сторону, если что-то очень интересное найдётся.
3223.56 3234.88 SPEAKER_00 Ну да, и кому показалось мало, у нас есть предыдущие 88 выпусков, наверняка вы не все из них слушали, там многие темы вечные, некоторые не устаревают со временем, в общем, тоже вполне можно послушать.
3234.88 3238.68 SPEAKER_00 Да, а на этом всё, всем пока!

