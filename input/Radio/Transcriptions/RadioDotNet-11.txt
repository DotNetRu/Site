0.00 2.00 None Всем привет!
2.00 7.00 "Анатолий Кулаков" В эфире Радио.нет, выпуск 11-ый.
7.00 10.00 "Анатолий Кулаков" И в нашей студии сегодня, как всегда, Анатолий Кулаков.
10.00 12.00 "Анатолий Кулаков" И Игорь Лабутин. Всем привет.
12.00 16.00 "Анатолий Кулаков" Давно мы с вами не виделись, поэтому без лишних введений, без лишних слов, перейдем к темам.
16.00 19.00 "Анатолий Кулаков" Начнем, как всегда, с нашей любимой темы - обновление .NET 5-го.
19.00 24.00 "Анатолий Кулаков" Мы в прошлый раз очень много рассказывали про .NET Core 3, когда он вышел.
24.00 33.00 "Анатолий Кулаков" Там было очень-очень много фич, поэтому в этот раз мы решили не копить все на релиз, а потихоньку рассматривать все во время превьюшек и во время нововведений.
33.00 39.00 "Анатолий Кулаков" Одним из таких интересных нововведений, о котором раньше я почему-то не услышал, называется NativeExports.
39.00 53.00 "Анатолий Кулаков" NativeExports - это специальный механизм, специальная система, которая позволяет из вашего .NET кода заэкспортить какие-то функции, заэкспортить какие-то структуры внешнему коду, наружному, нативному.
53.00 63.00 "Анатолий Кулаков" Например, как это раньше делалось - все через COM, допустим, но не через COM, а как положено - нормально, кроссплатформенно, со всеми стандартами и так далее.
63.00 69.00 "Анатолий Кулаков" Подобным занимались такие проекты, как UnmanagedExports или DLLExport.
69.00 73.00 "Анатолий Кулаков" То есть вы просто-напросто навешиваете атрибутик над своим методом.
73.00 83.00 "Анатолий Кулаков" Естественно, можете использовать только специальные типы данных в качестве выходных параметров, которые хорошо интерпретируются между различными языками и различными платформами.
83.00 92.00 "Анатолий Кулаков" И после этого ваши DLL-ки, точно так же, как и обычные нативные DLL-ки, можно заимпортить с помощью стандартных DLL-импорт атрибутов.
92.00 94.00 "Анатолий Кулаков" Мне кажется, довольно интересная и удобная штука.
94.00 107.00 "Игорь Лабутин" Да, интересно, как они решат проблему, что если я такую DLL-ку вызвал, ей же нужно все-таки .NET Runtime, то есть, по идее, должна быть механика, которая поднимет весь этот Runtime за меня и вызовет, собственно, .NET код.
107.00 115.00 "Анатолий Кулаков" Именно для этой цели есть еще одна тема, которая в этом релизе была заанонсирована.
115.00 118.00 "Анатолий Кулаков" Называется она Native Hosted Application.
118.00 128.00 "Анатолий Кулаков" Runtime дает для нас специальную прослойку, специальный Application Layer, который внутри себя может поднять .NET и захостить все, что вам нужно.
128.00 142.00 "Анатолий Кулаков" Также в этой прослойке есть специальный Entry Point, с помощью которого вы можете запустить программу или найти в какой-нибудь экспортированную функцию в вашем .NET приложении и вызвать ее из .NET в кода.
142.00 148.00 "Анатолий Кулаков" Эта специальная штука, как мне кажется, создана как раз-таки для того, чтобы удобно .NET хостить в других приложениях.
148.00 157.00 "Анатолий Кулаков" Например, в нативных каких-нибудь аппликейшенах, или, может быть, даже в скриптовых языках, допустим, из плюсов вызвать .NET, из PHP, из Python вызвать .NET.
157.00 165.00 "Анатолий Кулаков" Если вы в игре делаете какой-то скриптовый язык, то вы обычно раньше предпочитали использовать именно скриптовый язык.
165.00 172.00 "Анатолий Кулаков" После интеграции вот этого слоя, Application Hosting Layer, в принципе, вы можете вызывать честный .NET.
172.00 176.00 "Анатолий Кулаков" И это может открыть какие-то новые перспективы для нашей любимой платформы.
176.00 185.00 "Игорь Лабутин" Да, я хочу добавить, что на самом деле в .NET 5 это не совсем прям новая-новая фича, это на самом деле развитие старой фичи.
185.00 201.00 "Игорь Лабутин" Начало этому было положено в .NET Core 3.0, когда помимо Core SLR API для хостинга вашего .NET приложения в чем-то внешнем, появилась новая API, которая называлась NetHost или HostFXR, библиотечки такие.
201.00 207.00 "Игорь Лабутин" И с помощью них было попроще немножко уже хостить приложение, но целиком только приложение.
207.00 212.00 "Игорь Лабутин" А сейчас будет поддержано, да, даже какие-то небольшие кусочки, библиотеки или компоненты.
212.00 221.00 "Анатолий Кулаков" То есть, по идее, вы можете реализовать какую-нибудь математику, какой-то алгоритм вашей сборки, отдать ее плюсовикам, плюсовики смогут ее зареференсить и заиспользовать.
221.00 222.00 None По-моему, это счастье.
222.00 225.00 "Игорь Лабутин" Да, если они сами не перепишут ее обратно на C++.
225.00 227.00 "Игорь Лабутин" C++ уже быстрее, как они могут считать.
227.00 229.00 "Игорь Лабутин" Ладно, поехали дальше.
229.00 231.00 "Игорь Лабутин" Так, что у нас еще есть?
231.00 235.00 "Игорь Лабутин" Еще у нас есть расширение кроссплатформенности в очередной раз.
235.00 241.00 "Игорь Лабутин" В namespace System Directory Services Protocols добавили поддержку Linux и macOS.
241.00 253.00 "Игорь Лабутин" И это не про директории в смысле диска, это в смысле директории Services, в смысле LDAP или Active Directory, то есть сервисы, там, коллекции пользователей или что-то такое.
253.00 255.00 "Игорь Лабутин" Теперь это все поддержано на Linux и на macOS.
255.00 262.00 "Анатолий Кулаков" Из рантайма выпилили Windows Runtime, который раньше был знаком под именем WinRT.
262.00 266.00 "Анатолий Кулаков" Это прослойка для вызова процедур на Windows 10.
266.00 270.00 "Анатолий Кулаков" Вообще непонятно, что она делала в кроссплатформенности и как в реализации .NET.
270.00 273.00 "Анатолий Кулаков" Ну, в общем, это было непонятно не только нам, но еще и авторам.
273.00 275.00 "Анатолий Кулаков" Поэтому авторы успешно ее выпилили.
275.00 277.00 "Анатолий Кулаков" И, в принципе, рады всем.
277.00 283.00 "Анатолий Кулаков" Потому что команда WinRT теперь может развивать свою прослойку независимо от основного .NET.
283.00 285.00 "Анатолий Кулаков" И чему они неимоверно счастливы.
285.00 289.00 "Анатолий Кулаков" А .NET избавился от сотен тысяч строк непонятного платформ-специфик кода.
289.00 291.00 "Анатолий Кулаков" Что тоже не может не радовать.
291.00 297.00 "Игорь Лабутин" Да, теперь это абсолютно отдельная библиотека, которая живет независимо от .NET 5.
297.00 302.00 "Игорь Лабутин" И, может быть, даже как-то из-за этого может быстрее или наоборот медленнее развиваться.
302.00 306.00 "Игорь Лабутин" Появилась поддержка Linux Alpine 3.12.
306.00 311.00 "Игорь Лабутин" Я так понимаю, что это чуть ли не основной Linux для всяких докеров, которые Microsoft использует для своих образов.
311.00 315.00 "Игорь Лабутин" И поэтому вот они обновляют в соответствии с обновлениями Linux.
315.00 316.00 "Анатолий Кулаков" Именно так.
316.00 319.00 "Анатолий Кулаков" Alpine - это минимальный Linux, который только возможно.
319.00 322.00 "Анатолий Кулаков" Он сейчас пишется и оптимизируется специально для докера.
322.00 326.00 "Анатолий Кулаков" А если я не ошибаюсь, в сжатом виде контейнер занимает 4 МБ.
326.00 327.00 "Анатолий Кулаков" Чисто Alpine.
327.00 331.00 "Анатолий Кулаков" И, соответственно, все остальное уже overhead вашего приложения.
331.00 337.00 "Анатолий Кулаков" Базовый Hello World .NET на Alpine занимает в сжатом виде, по-моему, меньше 100 МБ.
337.00 340.00 "Анатолий Кулаков" Не сказать, что просто прекрасно, но почему бы и нет.
340.00 342.00 "Анатолий Кулаков" В принципе, нормальная тема.
342.00 347.00 "Анатолий Кулаков" Поэтому сейчас все .NET, рантаймы, билды, они в основном стараются компилиться под Alpine.
347.00 349.00 "Игорь Лабутин" Конечно, потому что виндовые контейнеры.
349.00 353.00 "Игорь Лабутин" Мы тут ради интереса собрали виндовый контейнер с .NET Core приложением.
353.00 356.00 "Игорь Лабутин" Получилось около 2,5 ГБ или 3 ГБ.
356.00 357.00 "Игорь Лабутин" В общем, немало.
357.00 358.00 "Игорь Лабутин" Alpine меньше.
358.00 363.00 "Анатолий Кулаков" Именно так, когда там вносят в контейнер Windows Nano, казалось бы, Nano - это сколько у вас?
363.00 364.00 "Анатолий Кулаков" Оказывается, Nano - это гигабайты.
364.00 365.00 "Анатолий Кулаков" Вот теперь Nano.
365.00 366.00 "Анатолий Кулаков" Окей, поехали дальше.
366.00 374.00 "Игорь Лабутин" .NET 5 - это не только .NET 5 сам по себе, но и, естественно, все популярные библиотеки на нем, включая SP.NET Core.
374.00 381.00 "Игорь Лабутин" И в SP.NET Core у нас добавилась штука, которая я пока не очень знаю, зачем она нужна.
381.00 383.00 "Игорь Лабутин" Может быть, ты подскажешь.
383.00 389.00 "Игорь Лабутин" Это автоматически переконфигурируемые endpoints.
389.00 401.00 "Игорь Лабутин" То есть, Kestrel теперь следит за изменениями конфигурации и unbind'ится от каких-то существующих endpoints, если они исчезли из конфигурации, и bind'ится к новым endpoints без запуска приложения.
401.00 407.00 "Игорь Лабутин" То есть, я не могу пока придумать сценарий, зачем мне нужно менять endpoints на лету, но, наверное, что-то можно придумать.
407.00 412.00 "Анатолий Кулаков" Нет, у меня тоже никаких идей нет, и даже фантазия моя не приносит ничего интересного.
412.00 417.00 "Анатолий Кулаков" То есть, зачем нужно в рантайме от bind'иться от старого порта и перемениться на новый.
417.00 427.00 "Анатолий Кулаков" Может, есть ли специальные сервисы типа webfirewall'ов или webproxy, которые именно нужны для того, чтобы какие-то порты открывать, а какие-то закрывать динамически.
427.00 429.00 "Игорь Лабутин" Ну, порты - это одно.
429.00 434.00 "Игорь Лабутин" Мне кажется, что тут не только про порты речь, а в том числе и про какие-то, например, базовые.
434.00 446.00 "Игорь Лабутин" То есть, мы же можем передать параметр urls в s.net core приложение, и он будет слушать это как базовые урлы, и дальше уже контроллеры добавляют свои кусочки к базовому урлу.
446.00 451.00 "Игорь Лабутин" Вот я так понимаю, что он еще и базовый урл теперь может менять на лету в раутинге.
451.00 456.00 "Игорь Лабутин" Зачем это может быть нужно, я пока не очень представляю, но, наверное, зачем-то нужно.
456.00 458.00 "Игорь Лабутин" Последим, посмотрим, если придумываем, расскажем.
458.00 463.00 "Анатолий Кулаков" Да, а если у вас есть идеи, приходите в комментарии и расскажите нам, зачем же это все-таки было сделано.
463.00 471.00 "Анатолий Кулаков" О, смотри, я еще нашел наконец-то первую хорошую ласточку от того, что они все-таки грохнули в Visual Basic.
471.00 474.00 "Анатолий Кулаков" Ну, как не грохнули, не грохнули, приостановили, но все же.
474.00 490.00 "Анатолий Кулаков" Смотри, в Windows, то есть в DotNet 5 добавили в Windows Forms мега замечательную штуку, которая была в Visual Basic еще с первых начал, и многие даже на Stack Overflow рекомендуют использовать Visual Basic для этой вещи.
490.00 492.00 "Анатолий Кулаков" Ты уже догадываешься, о чем я говорю?
492.00 494.00 "Анатолий Кулаков" Пока не очень.
494.00 508.00 "Анатолий Кулаков" Очень часто, ну как часто, наверное, Desktop разработчикам требуется убедиться, что их приложение выполняется в единственном экземпляре, то есть что больше в системе их экзешник, их приложение никак не запущено.
508.00 510.00 "Анатолий Кулаков" О, да, я такое делал.
510.00 518.00 "Анатолий Кулаков" И для этого в Visual Basic существовала специальная команда, которая называлась IsSingleInstance, и они просто на старте проверяли и выходили, или не проверяли и запускались.
518.00 520.00 "Анатолий Кулаков" И это было неоднократно, прекрасно.
520.00 529.00 "Анатолий Кулаков" Почему-то C# был этим обделен, почему-то Windows Forms были этим обделены, и на Stack Overflow все советовали референсить Visual Basic, там это все сделано из коробки.
529.00 537.00 "Анатолий Кулаков" Ну, более продвинутые, конечно, кричали, давайте нам там мониторы, mutex и все такое, но как бы намного легче было юзерам заюзать Visual Basic.
537.00 544.00 "Анатолий Кулаков" Вот теперь в Windows Forms принесли, наконец, эту функциональность незабываемую, теперь вы тоже можете проверять это одним-единственным флажком.
544.00 548.00 "Игорь Лабутин" Да, надо просто поставить нужные пропертии, и все будет хорошо.
548.00 550.00 "Игорь Лабутин" Система за вас сама все сделает.
550.00 555.00 "Игорь Лабутин" Ну, почему нет? Я предпочитал руками писать mutex, мне нравилось.
555.00 556.00 "Игорь Лабутин" Поехали дальше.
556.00 562.00 "Игорь Лабутин" У нас есть еще Entity Framework Core, который тоже потихонечку обновляется и улучшается.
562.00 568.00 "Игорь Лабутин" И в этот комплект изменений вошли следующие штуки, которые, в принципе, некоторые из них весьма интересны.
568.00 582.00 "Игорь Лабутин" Во-первых, появилась поддержка Persisted Computed Columns, то есть, если вы используете Code First подход, то теперь ваш код можно разместить атрибутами так, что определенные пропертии будут помечены, как computed колонки, она будет еще и persisted в базе, соответственно.
582.00 588.00 "Игорь Лабутин" И Entity Framework будет корректно ее забирать из базы и сохранять, когда нужно, при пересчете.
588.00 615.00 "Игорь Лабутин" Дальше появилась возможность более явно указывать collations, то есть локали при различных строковых операциях, то есть, если вам нужно какое-то сравнение сделать с определенной локалью, теперь есть специальная функция расширения в C#, в namespace и в точки functions, которая позволяет вам указать ту конкретную локаль, с которой вы хотите, чтобы этот кусочек SQL выполнялся, и это будет корректно транслировано в SQL.
615.00 618.00 "Игорь Лабутин" Дальше появилось достаточно революционное, на мой взгляд, изменение.
618.00 629.00 "Игорь Лабутин" До недавнего времени вся философия Entity Framework Core, по крайней мере, заключалась в том, что если у вас есть одна link_uQuery, у вас всегда будет на выходе один SQL-запрос.
629.00 631.00 "Игорь Лабутин" По крайней мере, я других каких-то сценарий не видел.
631.00 650.00 "Игорь Лабутин" Сейчас Entity Framework Core стал умнее, и если они понимают, что у вас, например, это какие-то хитрые проекции, или вы сначала сложным образом выискиваете какие-то данные, а потом забираете из них, не знаю, челдовые записи, то теперь может быть сгенерено несколько SQL-запросов.
650.00 658.00 "Игорь Лабутин" Это, с одной стороны, здорово, потому что могут быть попроще SQL, меньше join, и все это быстрее, оптимальнее, и все такое.
658.00 660.00 "Игорь Лабутин" Но есть две потенциальных проблемы.
660.00 666.00 "Игорь Лабутин" Проблема первая, как только у вас есть несколько SQL-запросов, это означает, что растут транзакции при необходимости.
666.00 671.00 "Игорь Лабутин" Иначе у вас могут быть грязные чтения и всякие такие штуки, в зависимости от уровня изоляции, который вы используете.
671.00 679.00 "Игорь Лабутин" А второе, что надо еще больше следить за тем, какие query генерирует вам Entity Framework, и не сгенерировал ли он вам.
679.00 684.00 "Игорь Лабутин" Я надеюсь, что n query он генерировать не будет на один link_u запрос, но все-таки.
684.00 689.00 "Анатолий Кулаков" Слушай, а один link_u запрос, он же в конце концов на выходе, в результате все равно возвращает один единственный ответ.
689.00 692.00 "Анатолий Кулаков" Как там могут появиться несколько SQL-запросов?
692.00 694.00 "Игорь Лабутин" Это легко.
694.00 704.00 "Игорь Лабутин" То есть, например, если ты грузишь, не знаю, табличку, нет, давайте не кастомеров, давайте традиционный пример, там, не знаю, блоги и комментарии, блокпосты и комментарии.
704.00 712.00 "Игорь Лабутин" Ты грузишь сначала табличку блогов, можно заджойниться на табличку комментариев по там блогу ID, да, и подгрузить все комментарии разом еще.
712.00 718.00 "Игорь Лабутин" Можно сначала сделать select from blog where blog ID равен что-то, а потом select from comments where blog ID равен что-то.
718.00 719.00 "Игорь Лабутин" А потом...
719.00 720.00 "Анатолий Кулаков" Это будет две link_u выражения?
720.00 729.00 "Игорь Лабутин" Нет, это будет одно link_u выражение, оно будет там include в link_u, но никто не мешает тебе его выполнить как 2 SQL-запроса и в памяти сjoin.
729.00 733.00 "Игорь Лабутин" То есть вопрос, где будет join, в памяти или в SQL?
733.00 738.00 "Игорь Лабутин" Команда Entity Framework утверждает, что в некоторых сценариях выгоднее join в памяти, по факту.
738.00 748.00 "Игорь Лабутин" У них есть какие-то критерии, когда это нужно делать, я почему и говорю, что пока все это только первая версия этой фичи, надо смотреть, как это будет работать и какие решения будет принимать Entity Framework.
748.00 761.00 "Игорь Лабутин" У нас в нашем доморощенном ORM мы на самом деле пользуемся такой штукой, в смысле не генерацией, а мы сознательно пишем иногда несколько SQL-запросов для получения, грубо говоря, достаточно сложной хиархи.
761.00 781.00 "Игорь Лабутин" То есть первый запрос по сложной куче условий выбирает родительский объект, дальше ты получаешь просто список ID-шников этих родительских объектов, и дальше у тебя все последующие запросы для получения деталей идут, если очень грубо, в where, parent_id, in, и дальше коллекция ID-шников, ну или join на временную табличку, где эти ID-шники есть.
781.00 789.00 "Игорь Лабутин" Это позволяет сэкономить, если у тебя очень-очень-очень сложный запрос для получения родителя, ну какая-нибудь сложная фильтрация и так далее.
789.00 798.00 "Игорь Лабутин" То есть я вижу, где, допустим, мы могли бы такую применить, или где она может быть нам полезна, но надо смотреть, что будет генериться.
798.00 800.00 "Игорь Лабутин" И в каких условиях он это будет использовать.
800.00 802.00 "Игорь Лабутин" Теперь понятно. Давай, что там еще?
802.00 812.00 "Игорь Лабутин" Так, еще две вещи интересных. Во-первых, опять же, если вы используете код first, теперь можно еще и индексы нормально создавать.
812.00 823.00 "Игорь Лабутин" По-моему, можно было это и раньше делать как-то, но это требовало все-таки какого-то написания более, так скажем, C#-стайл кода, не одним атрибутчиком.
823.00 830.00 "Игорь Лабутин" Теперь атрибутчиком единственное, можно задать индекс по колонке или по нескольким колонкам, там, уникальный или еще что-нибудь в таком духе.
830.00 848.00 "Игорь Лабутин" И последняя фича - это теперь можно на стринговых попертях, то есть колонках, использовать first.default, и first.default на стрингах, как ни странно, будет транслироваться в правильный префикс поиск по строке внутри SQL.
848.00 862.00 "Игорь Лабутин" То есть по префиксу в SQL можно будет... То есть эта операция можно будет написать на C#, чтобы она транслировалась корректно. То есть они потихонечку увеличивают количество вещей, которые они могут транслировать в SQL. Ну вот, пусть.
862.00 865.00 "Анатолий Кулаков" То есть это то, что нормальные люди раньше делали через start.swift, да?
865.00 871.00 "Игорь Лабутин" Да, да, да. Почему-то у них это они выбрали first.default. Ну вот, не знаю.
871.00 879.00 "Игорь Лабутин" Возможно, это как-то... Ну, на самом деле, когда написано в C#-коде, в принципе, это выглядит достаточно разумно. Так что посмотрим, как это будет.
879.00 892.00 "Игорь Лабутин" Возможно, все поменять, опять же, не забывайте, это превью, то есть все может измениться, хотя релиз дот над пятого у нас в ноябре же запланирован, если я правильно помню. Сейчас уже июль, так что осталось не так много...
892.00 902.00 "Игорь Лабутин" В общем, до ноября осталось не так много времени, и скорее всего, скоро мы будем наблюдать уже feature freeze и будет рисоваться финальная картина того, во что выйдет дот над пятый.
902.00 910.00 "Анатолий Кулаков" Так, подожди до выливания финальной картины, потому что еще много надо устаканить, еще много надо попробовать, еще много надо поэкспериментировать.
910.00 918.00 "Анатолий Кулаков" Например, продолжает развиваться наша тема с кодогенерацией, которую мы обсуждали в прошлом выпуске. Если вы не слушали, обязательно послушайте.
918.00 921.00 "Анатолий Кулаков" Она свой новый виток получила в развитии partial методов.
921.00 934.00 "Анатолий Кулаков" Давайте немножко углубимся в историю. Во-первых, скорее всего, вам известно такое понятие, как partial классы. Ну, и то, наверное, не всем, потому что я вполне понимаю людей, которые, может быть, ни разу с ними не сталкивались.
934.00 965.00 "Анатолий Кулаков" В основном, они появились для того, чтобы помочь той примитивной кодогенерации, которая была изначально в дот-нете. Например, если мы возьмем Windows формы, то каждый из вас может в конструкторе найти прекрасный метод, который называется initializeComponents. По правде, этот метод вызывает partial класс вашей формочки, в котором дизайнер нагенерил код, создающий кнопочки, создающий лейблы, располагающие их на формочке и так далее. Ну, то есть, какой-то системный код, то есть, какой-то сгенерированный код, в котором вам необязательно разбираться.
965.00 976.00 "Анатолий Кулаков" Здесь partial классы очень хорошо выстрелили. Они были незаметной лошадкой, которая помогала платформе, помогала неким системным инструментам лучше внедрять и лучше интегрироваться с вашим приложением.
976.00 980.00 "Анатолий Кулаков" Partial методы и partial классы появились еще в 2007 году.
980.00 989.00 "Анатолий Кулаков" Если partial классы, то всем, в принципе, наверное, понятно, что один класс может располагаться в разных файликах, и поэтому таким образом можно делить функциональность.
989.00 995.00 "Анатолий Кулаков" А вот что такое partial методы, об этом многие могут не знать, потому что это использовалось совсем уж специализированными инструментами.
995.00 1001.00 "Анатолий Кулаков" Насколько я знаю, Entity Framework этим пользовался, некие WinForm Component этим пользовались.
1001.00 1004.00 "Анатолий Кулаков" Итак, зачем же все-таки нужны partial методы?
1004.00 1009.00 "Анатолий Кулаков" Это своеобразный костыль, который помогает вам избежать всех проблем кода генерации.
1009.00 1013.00 "Анатолий Кулаков" А с кодогенерацией в C# проблемы как были, так и остались одни.
1013.00 1016.00 "Анатолий Кулаков" Это то, что кодогенерация не может изменять текущий код.
1016.00 1021.00 "Анатолий Кулаков" Каким же образом добиться расширения вашего приложения, если изменять она ваш код не может?
1021.00 1026.00 "Анатолий Кулаков" А вам, возможно, нужно как-то вызывать методы, которые были сгенерены и так далее.
1026.00 1028.00 "Анатолий Кулаков" Для этого есть partial методы.
1028.00 1032.00 "Анатолий Кулаков" Partial метод объявляется точно так же, как класс с помощью ключевого слова partial.
1032.00 1038.00 "Анатолий Кулаков" И смысл его заключается в том, что его body, его имплементация, может находиться совсем в другом файлике.
1038.00 1040.00 "Анатолий Кулаков" Не в том, в котором находится декларация.
1040.00 1046.00 "Анатолий Кулаков" Это значит, что вы в своем коде можете его задекларировать, а генератор его может сгенерировать.
1046.00 1049.00 "Анатолий Кулаков" То есть наполнить какой-то данным, какой-то информацией.
1049.00 1060.00 "Анатолий Кулаков" В случае, если генератор это сделал, если он заимплементировал этот класс, то вы можете своего кода вызвать этот метод, и сгенерированный body сработает.
1060.00 1072.00 "Анатолий Кулаков" Если же никакой имплементации не было, компилятор просто-напросто удалит декларацию этого метода, этого partial метода, а также удалит вызов этого partial метода из вашего кода.
1072.00 1075.00 "Анатолий Кулаков" Или вызов этого partial метода из генерированного кода.
1075.00 1076.00 "Анатолий Кулаков" Где это может быть полезно?
1076.00 1083.00 "Анатолий Кулаков" Например, когда у вас пронициализировался какой-то компонент, генератор может также вставить метод, который называется autoComponentInit.
1083.00 1091.00 "Анатолий Кулаков" И если вы в своем коде сделаете имплементацию этого метода, то из сгенерированного кода может вызваться ваша имплементация.
1091.00 1100.00 "Анатолий Кулаков" Если вы в своем коде эту имплементацию не вставите, она просто-напросто удаляется из генерированного кода, и приложение продолжает работать, как ни в чем не бывало.
1100.00 1103.00 "Анатолий Кулаков" Это немножко похоже на condition attribute.
1103.00 1109.00 "Анатолий Кулаков" Интересно, ограничения у этого подхода, ограничения у partial методов, такие же, точно как у condition attribute.
1109.00 1112.00 "Анатолий Кулаков" Например, partial метод может возвращать только void.
1112.00 1114.00 "Анатолий Кулаков" Partial метод не может содержать auto-параметров.
1114.00 1120.00 "Анатолий Кулаков" И еще одно неочевидное ограничение - partial метод может быть только неявно приватным.
1120.00 1126.00 "Анатолий Кулаков" То есть, он не позволяет указать никакие модификаторы доступа.
1126.00 1128.00 "Анатолий Кулаков" Он по умолчанию является приватным.
1128.00 1140.00 "Анатолий Кулаков" Это нужно для того, чтобы предотвратить помещение информации о сборке, и поэтому безопасно его можно будет вырезать.
1140.00 1142.00 "Анатолий Кулаков" Итак, а теперь возвращаемся к сегодняшнему дню.
1142.00 1152.00 "Анатолий Кулаков" У нас генераторы получают новую жизнь, вдохновленные разработчики предлагают нам немножко расширить механизм partial методов, для того, чтобы сделать генераторы более мощными, более интересными.
1152.00 1155.00 "Анатолий Кулаков" И в частности, они предлагают убрать все эти ограничения.
1155.00 1159.00 "Анатолий Кулаков" Каким же образом это будет сделано, с учетом того, что нужно сохранить обратную совместимость?
1159.00 1161.00 "Анатолий Кулаков" Алгоритм следующий.
1161.00 1168.00 "Анатолий Кулаков" Если у вас не указан модификатор доступа к partial методу, то есть, это ваш старый код, то все происходит, как и раньше.
1168.00 1173.00 "Анатолий Кулаков" На него остаются те ограничения, которые я описал выше, и он удаляется, если вдруг его за не имплементили.
1173.00 1183.00 "Анатолий Кулаков" Если вы вдруг указали модификатор доступа, public, private, protected и так далее, то вы обязаны где-нибудь за имплементить этот метод.
1183.00 1186.00 "Анатолий Кулаков" То есть, или генератор, или ваш код где-то обязаны его заимплементить.
1186.00 1190.00 "Анатолий Кулаков" Иначе будет ошибка, которая будет говорить, что такой-то метод не заимплеменчен.
1190.00 1192.00 "Игорь Лабутин" Причем ошибка компиляции.
1192.00 1193.00 "Анатолий Кулаков" Это будет ошибка компиляции.
1193.00 1200.00 "Анатолий Кулаков" Соответственно, с таким подходом вы можете делать partial методы даже виртуальными, или делать partial методы, имплементирующие интерфейсы.
1200.00 1203.00 "Анатолий Кулаков" Теперь к практической точке зрения. Где же это может быть понадобится?
1203.00 1218.00 "Анатолий Кулаков" Кроме описанных мной выше, там, инитов, которые, в принципе, можно было стереть без особых проблем, например, вы можете объявить метод isMatch, передав ему аргументам какую-то строку и навесив в качестве атрибута регулярное выражение.
1218.00 1222.00 "Анатолий Кулаков" Новый генератор сможет за вас имплементировать этот метод.
1222.00 1224.00 "Анатолий Кулаков" Он сможет посмотреть на регулярное выражение.
1224.00 1233.00 "Анатолий Кулаков" Если оно сложное, то создать стандартный regular expression, вызвать inMatch, isMatch и, в принципе, сделать то, что вы ожидали.
1233.00 1251.00 "Анатолий Кулаков" Если же код или простой, или он знает, как это правильно оптимизировать, или еще что-то, он может вам прямо сгенерировать туда код на C#, который не будет вызывать сложное регулярное выражение, а какими-нибудь простыми символами, какими-нибудь простыми математическими операциями заимплементирует для вас эту логику.
1251.00 1254.00 "Анатолий Кулаков" То есть, теперь вся логика имплементации может основываться именно на генераторе.
1254.00 1261.00 "Анатолий Кулаков" И он сам, с каких-то своих личных аналитик, или из каких-то зависимостей, может думать, имплементировать и писать код за вас.
1261.00 1265.00 "Анатолий Кулаков" То есть, вам нужно только сигнатуры методов расставлять и атрибутики над ними развешивать.
1265.00 1270.00 "Игорь Лабутин" Ну, то есть, получается, что мы немножко инвертируем ситуацию по сравнению с классическими паршал методами.
1270.00 1279.00 "Игорь Лабутин" В старом случае, как ты говорил, генератор что-то генерирует в любом случае и дает нам возможность хуков путем определения тел паршал методов.
1279.00 1284.00 "Игорь Лабутин" Если мы ничего не определили, то, ну, значит, ничего не будет вызвано, будет работать стандартный сгенерированный код.
1284.00 1286.00 "Игорь Лабутин" А в данном случае мы делаем наоборот.
1286.00 1295.00 "Игорь Лабутин" Мы у себя определяем, ну, не интерфейс, а, так скажем, ожидание от каких-либо методов, а генератор нам все это генерирует.
1295.00 1302.00 "Анатолий Кулаков" Да, а генератор, основываясь на наших сигнатурах, на наших хинтах, сам может это как-то заимплементировать, загенерировать.
1302.00 1313.00 "Игорь Лабутин" Ну, осталось написать много-много полезных генераторов, и это будет библиотека розлина аналайзеров, библиотека генераторов, библиотека еще чего-нибудь и код из одних атрибутиков на C#.
1313.00 1314.00 "Анатолий Кулаков" Отличное будущее.
1314.00 1316.00 "Анатолий Кулаков" Мы получим, по идее, какой-нибудь спринг.
1316.00 1321.00 "Анатолий Кулаков" Когда ты пишешь один метод, на нем навешиваешь 30 атрибутов, и у тебя приложение начинает само работать.
1321.00 1323.00 "Игорь Лабутин" Угу, мне нравится эта идея.
1323.00 1325.00 "Игорь Лабутин" Ладно, погнали дальше.
1325.00 1336.00 "Игорь Лабутин" Помимо Тутнет 5 и всяких новостей касательно синтаксиса языка и так далее, у нас есть еще новости про наш любимый интернет протокол и все такое.
1336.00 1341.00 "Игорь Лабутин" JRPC все еще в тренде, и появилась штука под названием JRPC Web.
1341.00 1344.00 "Игорь Лабутин" Официально зарелизилась, точнее, если быть точным.
1344.00 1350.00 "Анатолий Кулаков" Именно так, чтобы понять, что в конце концов зарелизалось, для этого нужно немножко углубиться в то, что такое JRPC.
1350.00 1358.00 "Анатолий Кулаков" JRPC - это новый, новомодный, всем известный, популярный, оптимизированный протокол вызова удаленных процедур.
1358.00 1366.00 "Анатолий Кулаков" Изначально он был создан Google, это все в open-source, и сильно популяризируется уже практически всеми, в том числе и Microsoft.
1366.00 1373.00 "Анатолий Кулаков" JRPC основан на HTTP/2, и в качестве протокола для сериализации в основном используют Protobuf.
1373.00 1379.00 "Анатолий Кулаков" Есть попытки сделать что-то другое, но де-факто это Protobuf поверх HTTP/2.
1379.00 1387.00 "Анатолий Кулаков" И всем он прекрасен, он быстр, компактен, понятен, удобен, для него много инструментов и прочее, прочее, прочее.
1387.00 1394.00 "Анатолий Кулаков" За одним исключением - ваши JavaScript-приложения не могут общаться с сервером с помощью протокола JRPC.
1394.00 1406.00 "Анатолий Кулаков" Вся причина в том, что через JavaScript нет сейчас никаких API, для того чтобы на низком уровне доступиться до HTTP/2 и обработать протокол JRPC, как тот требует спецификация.
1406.00 1412.00 "Анатолий Кулаков" А спецификация требует именно этого, то есть иметь непосредственно низкий уровень к HTTP/2 протоколу.
1412.00 1415.00 "Анатолий Кулаков" Современные разработчики обычно ставят WebProxy.
1415.00 1418.00 "Анатолий Кулаков" WebProxy выполняет следующую задачу.
1418.00 1435.00 "Анатолий Кулаков" Она принимает у себя на вход JRPC, распашивает его, переводит его в более простой формат, например, HTTP/1 или, может быть, HTTP/2, но уже без Protobuf, или без загона с JRPC, и отдает это клиенту в том формате, в котором он понимает.
1435.00 1438.00 "Анатолий Кулаков" То есть получается такой своеобразный translate.
1438.00 1446.00 "Игорь Лабутин" Ну и я так понимаю, что такие прокси уже существуют, и верно ли я понимаю, что Microsoft сделал еще одну?
1446.00 1450.00 "Анатолий Кулаков" Да, именно так. В качестве такой прокси очень популярен был, например, Invoi.
1450.00 1456.00 "Анатолий Кулаков" Он умел это делать, он умел поддерживать много спецификаций от JRPC и был вполне популярен.
1456.00 1465.00 "Анатолий Кулаков" Мы вынуждены были тоже использовать какие-то сторонние вещи, сторонние прокси для того, чтобы свой код гонять через JRPC на single-page application.
1465.00 1467.00 "Анатолий Кулаков" Теперь ситуация немножко изменилась.
1467.00 1470.00 "Анатолий Кулаков" Появился JRPC ASP.NET Core Web.
1470.00 1475.00 "Анатолий Кулаков" Это пакет, который сейчас является частью JRPC.NET.
1475.00 1490.00 "Анатолий Кулаков" Этот проект, по сути, делает для вас отдельную middleware, которая интегрируется в ваш авиапайплайн и делает всю ту же работу, которую делают стандартные JRPC Web прокси, но только уже на вашем приложении.
1490.00 1495.00 "Анатолий Кулаков" То есть вам не нужно ставить какой-то дополнительный сервис, какой-то дополнительный контейнер перед вашим приложением.
1495.00 1502.00 "Анатолий Кулаков" Оно способно обслуживать и другие клиенты, которые не поддерживают этот протокол напрямую, прямо на ваших портах.
1502.00 1533.00 "Игорь Лабутин" То есть получается, что мы пишем ASP.NET Core приложение и выставляем его наружу с помощью JRPC, и при этом с помощью этого пакета мы добавляем еще один слой middleware где-то в серединке, который сделает нам дополнительную трансляцию, и если к нам пришел кто-то, кто не знает нативного JRPC и HTTP/2, то он может прийти по такому JRPC Web протоколу, и мы его сконвертируем в нормальный JRPC, который понимает нашу речь в дальнейшем и пайплайн.
1533.00 1534.00 "Анатолий Кулаков" Да, именно так.
1534.00 1547.00 "Анатолий Кулаков" Соответственно, вы можете использовать один протокол обмена данными между вашими серверами, которые напрямую будут ходить через JRPC, или даже с веб-приложениями, сингл-пейдж аппликейшенами, которые раньше его не понимали, но для них будет теперь этот новый транслятор.
1547.00 1554.00 "Анатолий Кулаков" Еще этот подход, он дает возможность не только сингл-пейдж аппликейшены на JavaScript поддерживать, но и, например, Blazor.
1554.00 1559.00 "Анатолий Кулаков" Blazor очень прекрасно теперь сможет работать с сервером по этому оптимизированному протоколу.
1559.00 1565.00 "Анатолий Кулаков" Другим интересным клиентом может быть Xamarin, который не является ни веб-приложением, ни серверным приложением, а обычным десктоп-приложением.
1565.00 1577.00 "Анатолий Кулаков" Он теперь тоже может использовать JRPC, и то есть у вас такой получается оптимизированный, очень быстрый, очень компактный протокол между всеми частями, между всеми цепочками ваших приложений.
1577.00 1579.00 "Игорь Лабутин" Вообще звучит нормально.
1579.00 1593.00 "Игорь Лабутин" То есть Microsoft пытается сделать что-то, кажется, похожее на то, что они сделали с JSON-сериализацией, то есть сделать некоторый стандартный, относительно легковесный вариант тулинга от самого Microsoft.
1593.00 1598.00 "Анатолий Кулаков" Да, именно так, чтобы не завязываться на какие-то сторонние прокси, компоненты и так далее.
1598.00 1601.00 "Игорь Лабутин" Ну, прекрасно. Давай посмотрим, куда все это выльется.
1601.00 1611.00 "Игорь Лабутин" И вообще, с одной стороны, JRPC вроде как был такой хайп-хайп-хайп, он сейчас тоже вроде хайп-технология, так скажем, но при этом слышно про неё поменьше, как мне кажется сейчас.
1611.00 1618.00 "Игорь Лабутин" То есть то ли она перешла в фазу, все пробуют практически, смотрят, какие грабли есть, или... ну, поглядим.
1618.00 1625.00 "Анатолий Кулаков" Наверное, да, первая волна early adopters уже прошла и наелась, а вторая волна как раз сейчас подтягивается.
1625.00 1633.00 "Анатолий Кулаков" Кстати, из тех, кто подтягивается, есть несколько ограничений у JRPC, которых нужно знать.
1633.00 1638.00 "Анатолий Кулаков" Во-первых, этот протокол не поддерживается в EAS и в Azure App Services.
1638.00 1645.00 "Анатолий Кулаков" Причина в том, что EAS тоже не даёт такого низкоуровневого доступа к JRPC и сам этот протокол пока никак не обрабатывает.
1645.00 1659.00 "Анатолий Кулаков" Вторая проблема заключается в том, что несмотря на наличие клиента, то есть клиентской части, которая способна даже через вот этот Translate Proxy принимать упрощенный JRPC протокол, версии этого клиента в зависимости от них имеет .NET Standard 2.1.
1659.00 1666.00 "Анатолий Кулаков" Это обозначает, что вашим большим приложением, которое написано на .NET Framework, никогда не видать взаимодействия с JRPC.
1666.00 1676.00 "Игорь Лабутин" Ну, только если вы его не напишете сами или не воспользуетесь какой-нибудь совсем-совсем странной библиотекой, там, нативными либами от Google или чем-нибудь таким.
1676.00 1679.00 "Игорь Лабутин" Этот вариант всё ещё остаётся.
1679.00 1682.00 "Анатолий Кулаков" Да, да, я имею в виду, конечно же, только официальную поддержку Microsoft.
1682.00 1690.00 "Анатолий Кулаков" То есть Microsoft не планирует поддерживать JRPC, ни клиент, ни сервер, естественно, в большом .NET Framework. Он оставляет это только для .NET Core.
1690.00 1700.00 "Игорь Лабутин" Печально, но с другой стороны, может быть, и с учётом того, сколько всего сейчас тащится в .NET Core, в принципе, большая часть приложений действительно, наверное, получится мигрировать туда.
1700.00 1707.00 "Анатолий Кулаков" Это такой своеобразный способ, наверное, форсировать переход на новый Core, на новый Framework, даже не на Core, а на .NET 5 теперь.
1707.00 1710.00 "Игорь Лабутин" Да, ну и сэкономить своё время на разработку.
1710.00 1719.00 "Игорь Лабутин" Мне, скажем так, нравится в современном подходе, мне кажется, у Microsoft над всякими такими штуками работают объективно не очень большие команды.
1719.00 1725.00 "Игорь Лабутин" Если посмотреть на какой-нибудь .NET Framework или похожий, там команда порядка десятка человек всего.
1725.00 1734.00 "Игорь Лабутин" То есть всякие такие новые движухи, они тащатся не большой-большой-большой командой в десятки человек, а небольшими коллективами, и это прикольно.
1734.00 1743.00 "Анатолий Кулаков" И не только коллективами, а интересно, что сейчас начали появляться такие маленькие проекты. Разумеется, внутри Microsoft раньше они тоже были, просто мы о них ничего не знаем.
1743.00 1746.00 "Анатолий Кулаков" А сейчас это всё выносится наружу. То есть много таких экспериментальных проектов.
1746.00 1754.00 "Анатолий Кулаков" И в частности на Build'е был анонсирован, не анонсирован, а показан публике большой проект, который называется TIE.
1754.00 1765.00 "Анатолий Кулаков" Это как раз-таки один из таких маленьких, показательных и интересных инструментиков, который призван заинтересовать разработчиков и дать какой-то начальный фидбэк тому, насколько идея интересна или нет.
1765.00 1767.00 "Анатолий Кулаков" Давайте подробнее на него посмотрим.
1767.00 1778.00 "Анатолий Кулаков" Project TIE - это прежде всего инструмент, который сделан для разработчиков, то есть применение в development среде, для тестирования, а также он может быть использован для развертывания ваших проектов.
1778.00 1781.00 "Анатолий Кулаков" Он оптимизирован под .NET Core.
1781.00 1791.00 "Анатолий Кулаков" Это обозначает, что он знает всю структуру ваших проектов, он знает, как что компилируется, он знает, как что тестируется, где какие проекты в Solution находятся.
1791.00 1795.00 "Анатолий Кулаков" И он ориентирован в основном на разработчиков, как я уже упомянул.
1795.00 1798.00 "Игорь Лабутин" Это действительно штука, которой очень не хватало.
1798.00 1826.00 "Игорь Лабутин" Если вы разрабатываете маломальские, большое приложение, состоящее из какого-то количества сервисов или микросервисов, или хотя бы даже разных компонентов, живущих в разных контейнерах, то поднять их всех одновременно, допустим, для локального девелопмента, это требовало либо каких-то пару шелл скриптов, либо каких-то других средств, которые правильно все это соберут или даже хотя бы просто поднимут.
1826.00 1833.00 "Анатолий Кулаков" У меня практически на каждом проекте был баттничек, который запускал нужные мне проекты и который не запускал нужные мне проекты.
1833.00 1839.00 "Анатолий Кулаков" Я так подозреваю, что теперь, после появления Тая, я смогу от подобных баттничек наконец-то избавиться.
1839.00 1841.00 "Игорь Лабутин" Да, я очень хочу это все попробовать руками.
1841.00 1849.00 "Игорь Лабутин" Сейчас из-за локальных релизных планов это не удалось сделать прямо сейчас, но я очень надеюсь в ближайшие несколько недель этим заняться.
1849.00 1861.00 "Игорь Лабутин" И идея в том, что действительно, если у вас есть несколько сервисов, которые вы хотите поднимать, то бывает такое, что, например, вам нужно их поднимать в разных комбинациях, не всегда нужны все.
1861.00 1863.00 "Игорь Лабутин" Иногда вы работаете над одним кусочком, иногда над другим.
1863.00 1874.00 "Игорь Лабутин" В моем случае это действительно был там либо комплект разных баттничков, либо баттничек с огромным количеством аргументов, которые нужно было вспоминать, запоминать и подглядывать каждый раз, чтобы вспомнить, какую комбинацию я хочу запустить.
1874.00 1878.00 "Игорь Лабутин" В TAI это все делается просто, сейчас мы к этому все вернемся.
1878.00 1892.00 "Игорь Лабутин" Он действительно поддерживает .NET Core, и это означает, что на самом деле в самом простейшем случае вы туда указываете даже не ваши исполнимые файлы, которые нужно поднять или сервисы, а вы указываете прямо CSProject.
1892.00 1908.00 "Игорь Лабутин" То есть он конфигурится простым, так скажем, файликом, и вы просто указываете ему там комплект ваших CSProject и все работает само, он сам будет собираться, сам будет мониториться на предмет изменений, и в общем все будет шоколадно, это прекрасно.
1908.00 1920.00 "Игорь Лабутин" Еще можно теги расставить на ваших проектах и поднимать вот то, что я говорил, я хочу сейчас все, что относится к сервису А, теперь я хочу все, что относится к сервису Б, и он будет сам понимать, когда что нужно поднять.
1920.00 1922.00 "Игорь Лабутин" Прямо звучит как сказка, надо пробовать.
1922.00 1926.00 "Анатолий Кулаков" Именно так. Ну, то есть, как вы поняли, это такая запускалка ваших проектов.
1926.00 1935.00 "Анатолий Кулаков" Ее отличительной особенностью является не только в том, что она может запускать ваши проекты, но и в том, что она может обеспечивать вам полностью работоспособную инфраструктуру.
1935.00 1944.00 "Анатолий Кулаков" То есть поднимать сервисы не только те, которые находятся в вашем Source Control, но и, допустим, поднимать контейнеры, если вам для вашей работы нужен какой-то известный контейнер.
1944.00 1952.00 "Анатолий Кулаков" Также она может предоставлять базовые услуги и сервис Discovery для того, чтобы ваши проекты обменивались адресами между контейнерами и наоборот.
1952.00 1960.00 "Анатолий Кулаков" Если мы рассматриваем ее возможности с точки зрения диплоя, сейчас она диплоится под Kubernetes, но есть планы сделать и другие хостинги для диплоя.
1960.00 1965.00 "Анатолий Кулаков" Что она может делать? Она может автоматически делать контейнеры из вашего .NET приложения.
1965.00 1984.00 "Анатолий Кулаков" Она может генерировать Kubernetes-манифесты и Kubernetes-конфигурации, Kubernetes-ресурсы. И она может использовать разработческие настройки, те конфигурации, которые вы настроили под себя на вашей машине или на вашем сервере для того, чтобы перевести их, перемапить в термины ресурса Kubernetes и развернуть уже непосредственно там.
1984.00 1990.00 "Анатолий Кулаков" Этот инструмент представляет собой Global Tools, то есть его элементарно установить. Это обычный экзешничек.
1990.00 1997.00 "Анатолий Кулаков" И после установки он, в принципе, не требует никаких конфигураций для базовой работы и достаточно просто набрать в консоли TIE-RUN.
1997.00 1999.00 "Анатолий Кулаков" Он сам просканирует текущую директорию.
1999.00 2002.00 "Анатолий Кулаков" Естественно, набирать это надо в директории с вашим солюшеном.
2002.00 2012.00 "Анатолий Кулаков" Сам просканирует текущую директорию, найдет там запускабельные проекты, если нужно скомпилирует их и запустит в каких-то дефолтных настройках, которые можно будет потом в конце поменять.
2012.00 2015.00 "Анатолий Кулаков" Интересной особенностью его является дашборд.
2015.00 2039.00 "Анатолий Кулаков" Если вы зайдете на localhost 8000, то вы увидите замечательный, миленький, минималистичный дашборд, в котором будут список всех сервисов, которые он запустил, то есть всех проектов, всех контейнеров, в котором будет список всех портов, всех урлов, куда прибандены эти сервисы, количество реплик, количество рестартов, которые были нужны для того, чтобы избежать ошибок в этих репликах.
2039.00 2042.00 "Анатолий Кулаков" А также можно будет посмотреть логи.
2042.00 2050.00 "Анатолий Кулаков" То есть специальная ссылка, про которую вы кликаете, и в вашем браузере, в лайв-стримах начинают литься логи, и вы это можете посмотреть.
2050.00 2053.00 "Анатолий Кулаков" У него есть способность в сервисе Discovery.
2053.00 2059.00 "Анатолий Кулаков" То есть, Тай не слишком загоняется какими-то там новомодными вещами или интерфейсами.
2059.00 2063.00 "Анатолий Кулаков" Основная его философия - это минималистично влиять на ваше приложение.
2063.00 2071.00 "Анатолий Кулаков" Поэтому весь его сервис Discovery заключается в том, что он передает в environment в arable нужные урлы и нужные порты.
2071.00 2073.00 "Анатолий Кулаков" То есть тех сервисов, которые он поднял.
2073.00 2092.00 "Игорь Лабутин" При этом, как ты сказал, он, конечно, все это находит автоматически, но если у вас есть что-то дополнительное, что вы хотите поменять или добавить какие-то конфигурации, то это все можно сделать в ямль файлике, и там можно описать вообще все абсолютно самостоятельно, если хочется и не хочется доверять автоискалке.
2092.00 2101.00 "Игорь Лабутин" Кроме того, мы так все говорили, что Docker, Docker или .NET Core - это все не только Docker и .NET Core, не одними все ограничивается.
2101.00 2104.00 "Игорь Лабутин" Вы всегда можете заиспользовать вообще произвольный executable.
2104.00 2111.00 "Игорь Лабутин" То есть, если у вас есть, например, какой-нибудь .NET Framework, кусочек, который нужно запускать, к сожалению, собирать его он пока не умеет.
2111.00 2116.00 "Игорь Лабутин" Есть issue на GitHub, где обсуждается, насколько это реально сделать, но, может быть, и не будет сделано.
2116.00 2120.00 "Игорь Лабутин" Но, по крайней мере, .exe файл у вас всегда есть, и вы его можете запустить.
2120.00 2133.00 "Игорь Лабутин" А также, с учетом того, что у нас есть сервис Discovery, вы, например, можете сказать, что какой-нибудь SQL Server или внешний Kafka, или еще кого-нибудь, ищите по такому-то адресу.
2133.00 2140.00 "Игорь Лабутин" То есть, добавьте какие-то external сервисы, которые не будут подниматься или опускаться, но про которые Type будет знать и будет добавлять их в сервис Discovery.
2140.00 2153.00 "Анатолий Кулаков" То есть, мы получаем такую мега-запускалку практически всего, что вам только может прийти в голову, не только в ваших проектах, который очень хорошо знает о структуре вашего Solution и всячески помогает вам настраивать конфигурацию для диплоя в том числе.
2153.00 2156.00 "Анатолий Кулаков" В качестве диплоя достаточно набрать команду tydeploy.
2156.00 2159.00 "Анатолий Кулаков" И что эта команда может сделать?
2159.00 2176.00 "Анатолий Кулаков" Она может создать докер-образы для каждого из ваших проектов, она может их запушить в докер-режистре, она может создать Kubernetes deployment и Kubernetes service для каждого проекта, если, соответственно, настроены все урлы и права, и credentials для Kubernetes.
2176.00 2194.00 "Анатолий Кулаков" Она может применить сгенерированные deployment и сервисы на какие-то ваши хосты, она автоматически сгенерит маппинги между сервисами имен и бандингами, а также она автоматически создат секреты, запушит их в Kubernetes secret service и зашифрует их нужным образом.
2194.00 2200.00 "Анатолий Кулаков" Если вдруг вам эта команда не понравилась, вы всегда можете сделать tyde-undeploy, которая, по идее, должна удалить все задеплоенные ресурсы.
2200.00 2206.00 "Анатолий Кулаков" Tyde, он очень расширяемый, то есть, у него есть такое понятие, как плагины или экстеншены.
2206.00 2215.00 "Анатолий Кулаков" Например, с помощью одной команды вы можете научить свое приложение запускаться вместе с Zipkin и получить distributed tracing.
2215.00 2220.00 "Анатолий Кулаков" Естественно, магии нет, вы должны пойти в свое приложение, установить там Zipkin, но это практически все, что вам нужно сделать.
2220.00 2226.00 "Анатолий Кулаков" Далее вы пишете в YAML-конфигурации, что хотите запускать рядом со своим проектом Zipkin-контейнер.
2226.00 2241.00 "Анатолий Кулаков" Это обозначает, что Tyde автоматически подключится к вашему приложению, соберет с него все трейсы, соберет с него всю distributed tracing информацию, которая в него есть, передаст это Zipkin-у, и вы можете зайти на URL Zipkin-а и пронаблюдать там то, как работает ваше приложение.
2241.00 2248.00 "Анатолий Кулаков" Та же самая магия, например, происходит с SICK-ом, с ELCASTEC-ом или с другими приложениями, которые вы привыкли видеть.
2248.00 2262.00 "Анатолий Кулаков" Например, если вы делаете какой-то Hello World и не хотите там развертывать SICK, для того чтобы усмотреть логи, но в глубине души понимаете, что это нужно, и это было бы неплохо, теперь вы можете в Tye просто одной строчкой написать "Хочу экстеншн SICK-а".
2262.00 2267.00 "Анатолий Кулаков" И все, больше вам ничего делать не нужно, никакого SICK-а на вашем компьютере не получится.
2267.00 2278.00 "Анатолий Кулаков" Но если вы запустите Tye Run, то можете зайти по URL на локальном хосте и пронаблюдать, как полноценный интерфейс SICK-а залогировал все, что творилось в вашем приложении.
2278.00 2280.00 "Анатолий Кулаков" Еще интересный экстеншн - это пропсы.
2280.00 2288.00 "Анатолий Кулаков" То есть это специальные щупальца, которые дергают ваши Liveness и Readiness Health-чеки у вашего приложения.
2288.00 2295.00 "Анатолий Кулаков" Это позволяет, например, Tye регулировать трафик, он не будет посылать запросы на те ноды, которые не здоровы.
2295.00 2305.00 "Анатолий Кулаков" Также он может переподнимать реплики, то есть грохать ваше приложение, если заметил, что оно работает с ошибками, если Health-чеки сообщают об этом или не отвечают.
2305.00 2317.00 "Анатолий Кулаков" Он может ваше приложение грохнуть, поднять его на другом порту, поднять коррельчеством реплик, которые вам нужно, и всячески следить за трафиком и за здоровью ваших приложений.
2317.00 2330.00 "Анатолий Кулаков" Наверное, это ближе всего похоже к Docker Compose, но такой более мощный, как мне кажется, более гибкий и оптимизированный именно под .NET, то есть под его структуру, под его проекты, под его специфику.
2330.00 2342.00 "Игорь Лабутин" Да, еще из таких новостей, которые пока еще в разработке, но должны попасть уже в следующую версию 0.4, это нативная поддержка Azure Functions.
2342.00 2353.00 "Игорь Лабутин" То есть, если вы, например, пишете Azure Functions, то вы их можете запускать локально, но для этого требуется некоторая нехилая командная строчка и поднятие соответствующего рантайма.
2353.00 2360.00 "Игорь Лабутин" Здесь это будет First Class Support, то есть можно будет просто указать свой проект с Azure Functions, и Project Eyes за вас будет поднимать всю эту кухню.
2360.00 2363.00 "Игорь Лабутин" И это, мне кажется, тоже довольно-таки прикольной штукой.
2363.00 2366.00 "Игорь Лабутин" Мы немножко пишем Azure Functions, и должно сильно упростить работу.
2366.00 2375.00 "Игорь Лабутин" Пробуйте, экспериментируйте. Это все очень экспериментальная штука, нет никаких долгоиграющих планов на тему, что да, это будет официальный тулинг, нет, это будет еще что-то.
2375.00 2382.00 "Игорь Лабутин" То есть это декларируется как experimental project без каких-либо глобальных целей.
2382.00 2384.00 "Игорь Лабутин" То есть, что получится, то получится.
2384.00 2389.00 "Игорь Лабутин" Посмотрим, куда выведет комьюнити и весь опыт использования этой штуки.
2389.00 2399.00 "Анатолий Кулаков" Поэтому пишите свои отзывы. В качестве будущего он может полностью умереть, он может быть, дальше продолжить развиваться, или его функции просто перенесут в какой-нибудь другой инструмент.
2399.00 2403.00 "Анатолий Кулаков" Все зависит от того, как будут его использовать и насколько хорошими будут отзывы.
2403.00 2408.00 "Анатолий Кулаков" Еще один замечательный инструмент, который нам может помочь в повседневной жизни, вышел недавно.
2408.00 2410.00 "Анатолий Кулаков" Анонсирован .NET Monitor.
2410.00 2418.00 "Анатолий Кулаков" Это также экспериментальный тул, который позволяет сделать легче доступ к вашей диагностической информации у вашего процесса.
2418.00 2422.00 "Анатолий Кулаков" Он может собирать всякую диагностическую информацию на различных энвайрментах.
2422.00 2426.00 "Анатолий Кулаков" Распространяется он как .NET Core Global Tool или как контейнер.
2426.00 2431.00 "Анатолий Кулаков" А вот это для таких инструментов, для локальных инструментов довольно интересный формат.
2431.00 2434.00 "Анатолий Кулаков" И на контейнере не заканчивается интересный формат.
2434.00 2442.00 "Анатолий Кулаков" Эта утилита, казалось бы, для локального сбора дампов, для локального сбора метрик, она довольно своеобразным образом выдает свои результаты.
2442.00 2445.00 "Анатолий Кулаков" Она открывает наружу REST API.
2445.00 2451.00 "Анатолий Кулаков" То есть, она открывает порт, к которому может подключиться любое приложение и с помощью понятного API запросить какие-то действия.
2451.00 2453.00 "Анатолий Кулаков" Что же это может быть за действия?
2453.00 2458.00 "Анатолий Кулаков" Например, вернуть список всех процессов, которые способен мониторить наш новый .NET Monitor.
2458.00 2459.00 "Анатолий Кулаков" Это понятно.
2459.00 2462.00 "Анатолий Кулаков" Дальше вы можете по PIDU процесса попросить сделать дамп.
2462.00 2465.00 "Анатолий Кулаков" Дамп определенного процесса.
2465.00 2467.00 "Анатолий Кулаков" Можно сделать GCDAMP.
2467.00 2471.00 "Анатолий Кулаков" Эти дампы потом можно загрузить в специализированные инструменты и там проанализировать.
2471.00 2474.00 "Анатолий Кулаков" Также интересной возможностью есть сделать TRACE.
2474.00 2477.00 "Анатолий Кулаков" То есть, вы на какое-то время запускаете специальную TRACE-команду.
2477.00 2479.00 "Анатолий Кулаков" Время, естественно, регулируется.
2479.00 2484.00 "Анатолий Кулаков" И эта команда начинает снимать CPU стэки, HTTP-реквесты.
2484.00 2487.00 "Анатолий Кулаков" То есть, она запоминает, когда HTTP-реквест начался, когда он закончился.
2487.00 2492.00 "Анатолий Кулаков" Она также может считывать логи, которые вы пишете стандартным ISP-нетлогером.
2492.00 2499.00 "Анатолий Кулаков" Она может запоминать рантайм-информацию и считывать перформанс-счетчики с помощью event-counters.
2499.00 2505.00 "Анатолий Кулаков" То есть, много-много полезной информации, которая потом может быть, в конце концов, проанализирована.
2505.00 2508.00 "Анатолий Кулаков" Анализируется она другими инструментами, не этими.
2508.00 2511.00 "Анатолий Кулаков" .NET Monitor призван только для того, чтобы снимать эти инструменты.
2511.00 2514.00 "Анатолий Кулаков" Также можно запросить логи от приложения.
2514.00 2521.00 "Анатолий Кулаков" И вам будут сыпаться в реальном времени стрим всех логов, которые есть в вашем .NET или ISP-net приложении.
2521.00 2523.00 "Анатолий Кулаков" Можно запросить URL с метриками.
2523.00 2531.00 "Анатолий Кулаков" Это тоже что-то новое и интересное, потому что URL с метриками возвращает нам метрики вашего приложения в Prometheus формате.
2531.00 2536.00 "Анатолий Кулаков" Prometheus - это сейчас стандартный инструмент практически для мониторинга.
2536.00 2541.00 "Анатолий Кулаков" Если мы говорим про Kubernetes, Mir и вот эти вот все прочие облака.
2541.00 2547.00 "Анатолий Кулаков" Как всегда, победил не лучший формат в этот раз, а победил самый популярный формат.
2547.00 2551.00 "Анатолий Кулаков" Микрософт под него прогнулась. Первый раз, кстати, она поддержала таким образом Prometheus.
2551.00 2557.00 "Анатолий Кулаков" И, наверное, мы в будущем также будем видеть более тесную интеграцию с какими-нибудь сторонними инструментами, сторонними мониторингами.
2557.00 2564.00 "Игорь Лабутин" Да. То есть я не очень пока понимаю пользу этого тула с точки зрения локальной разработки.
2564.00 2568.00 "Игорь Лабутин" И зачем он выпущен в виде .NET Core Global Tool?
2568.00 2571.00 "Игорь Лабутин" Пока мне сложно придумать сценарий.
2571.00 2574.00 "Игорь Лабутин" А вот контейнерный вариант, он полезен вот для чего.
2574.00 2585.00 "Игорь Лабутин" В принципе, почти все эти данные вы могли бы получить локально с помощью всяких .NET Counters и прочих локальных тулов, да в конце концов там Perfume, Visual Studio, ну чего угодно, CLRMD.
2585.00 2604.00 "Игорь Лабутин" Но когда у вас приложение работает в продакшене где-то далеко, в контейнере, в Kubernetes или еще где-то в облаке, то получить такую информацию из него нереально, потому что .NET Core репортит всю такую информацию через собственный EventPipe, который естественно через интернет особо не передается.
2604.00 2626.00 "Игорь Лабутин" Именно для этого этот монитор, как я понимаю, и родился, чтобы запустить его рядышком с вашим контейнером в продакшене и иметь возможность, допустим, в каком-то административном режиме, не выставляя, естественно, все эти REST API наружных на весь мир, а получить информацию о вашем процессе из реального продакшена, то есть собрать дамп из продакшена и так далее.
2626.00 2634.00 "Игорь Лабутин" То есть это полезный, как мне кажется, вариант его использования для какой-то такой удаленной диагностики.
2634.00 2638.00 "Анатолий Кулаков" В качестве Global Tool я вижу полезность в самой факте стандартизации.
2638.00 2642.00 "Анатолий Кулаков" Как ты правильно сказал, раньше было слишком много инструментов для того, чтобы сделать эти самые вещи.
2642.00 2645.00 "Анатолий Кулаков" И большинство из них, кстати, работали только под Windows.
2645.00 2654.00 "Анатолий Кулаков" Это же кроссплатформенная балалайка, и очень приятно в одном месте иметь все эти возможности с предсказуемым единым форматом, с предсказуемыми едиными поведениями и так далее.
2654.00 2657.00 "Анатолий Кулаков" То есть в этом его, скорее всего, тоже большая заслуга будет.
2657.00 2661.00 "Игорь Лабутин" Ну да, согласен. В принципе, и на самом деле не все деплоит с контейнерами.
2661.00 2666.00 "Игорь Лабутин" Возможно, где-то Global Tool будет вполне достаточным, если мы там живем на каком-то выделенном сервере.
2666.00 2671.00 "Игорь Лабутин" Почему нет? Использовать его как Global Tool и запускать сразу на весь сервер один.
2671.00 2677.00 "Игорь Лабутин" Можно и так. Но опять же, эта штука на данный момент имеет экспериментальный формат.
2677.00 2681.00 "Игорь Лабутин" Что случится с ним к релизу, особо непонятно.
2681.00 2686.00 "Игорь Лабутин" Команда говорит, что это эксперимент до тех пор, пока DotNet 5 будет выпущен.
2686.00 2693.00 "Игорь Лабутин" Что будет потом, пока молчит. Ждем конца года и посмотрим, опять же, куда все это проводится.
2693.00 2698.00 "Игорь Лабутин" Но хватит, наверное, об экспериментальных Tool'ах. Давай поговорим о классике.
2698.00 2701.00 "Анатолий Кулаков" Классически у нас остается неизменным ReSharper.
2701.00 2707.00 "Анатолий Кулаков" ReSharper анонсировал и немножко даже выпустил версию 2022.
2707.00 2709.00 "Анатолий Кулаков" Давайте посмотрим, что в нее вошло.
2709.00 2712.00 "Анатолий Кулаков" Как всегда, очень много оптимизаций, улучшений, ускорений и так далее.
2712.00 2717.00 "Анатолий Кулаков" Знаешь, что странное чувство, когда у тебя на проекте работают десятки, сотни человек.
2717.00 2721.00 "Анатолий Кулаков" Он все время делается лучше, лучше, веселее, веселее.
2721.00 2725.00 "Анатолий Кулаков" Но в основном рассказать-то, в принципе, нечего. Все становится лучше.
2725.00 2729.00 "Анатолий Кулаков" Из таких замечательных моментов мне бы хотелось выделить парочку.
2729.00 2732.00 "Анатолий Кулаков" Например, тема с юнит-тестингом.
2732.00 2735.00 "Анатолий Кулаков" Наверное, как вы давно знаете, у ReSharper используется специальный процесс.
2735.00 2737.00 "Анатолий Кулаков" Отдельный процесс для того, чтобы гонять ваши тесты.
2737.00 2745.00 "Анатолий Кулаков" Это позволяет им работать под различными фреймворками, обрабатывать хорошо изоляцию, обрабатывать хорошо параллельное исполнение, код-каверы и так далее.
2745.00 2748.00 "Анатолий Кулаков" Но в .NET Core было не так.
2748.00 2751.00 "Анатолий Кулаков" В .NET Core они были вынуждены использовать стандартный VSTestRunner.
2751.00 2753.00 "Анатолий Кулаков" Это налагало кучу проблем.
2753.00 2758.00 "Анатолий Кулаков" Потому что были проблемы с перформансом, были проблемы даже с разным поведением тестов.
2758.00 2762.00 "Анатолий Кулаков" И вообще, скорее всего, команда не привыкла использовать сторонние инструменты от Microsoft.
2762.00 2768.00 "Анатолий Кулаков" Поэтому они переписали юнит-тестRunner просто с нуля.
2768.00 2770.00 "Анатолий Кулаков" Теперь все как и раньше.
2770.00 2774.00 "Анатолий Кулаков" Теперь они умеют запускать все стандартные юнит-тесты.
2774.00 2777.00 "Анатолий Кулаков" Независимо от фреймворка, независимо от платформы.
2777.00 2780.00 "Анатолий Кулаков" Он работает красиво, предсказуемо.
2780.00 2787.00 "Анатолий Кулаков" И они анонсируют, что это хорошее время для того, чтобы каких-то импрувментов внести в запускальщик юнит-тестов.
2787.00 2789.00 "Анатолий Кулаков" У меня есть реквест.
2789.00 2791.00 "Анатолий Кулаков" Я знаю, ребята из JetBrains нас обязательно слушают.
2791.00 2797.00 "Анатолий Кулаков" Ребята, сделайте, наконец, так, чтобы имена юнит-тестов в результатах писались через пробельщики.
2797.00 2806.00 "Анатолий Кулаков" Все вот эти десятилетние потуги заставить через какие-то плагины юнит-тестовских фреймворков работать в такую элементарную функцию, кажутся просто смехотворными.
2806.00 2808.00 "Анатолий Кулаков" До сих пор это никому нормально не удалось.
2808.00 2813.00 "Анатолий Кулаков" И кажется, что единственное правильное место, где это можно сделать, это вот галочка в TestRunner.
2813.00 2821.00 "Анатолий Кулаков" Чтобы прекратились, наконец, коверкать код стандарта, чтобы прекратили, например, выдумывать всякие непонятные подчеркивания или атрибуты, или еще какую-то глупость.
2821.00 2827.00 "Анатолий Кулаков" А просто научились разбивать стандартные методы по изменению кейса на пробельщики.
2827.00 2829.00 "Анатолий Кулаков" Будет вам памятник.
2829.00 2834.00 "Игорь Лабутин" Да, посмотрим, посмотрим, прислушаются ли они к тебе.
2834.00 2836.00 "Игорь Лабутин" Погнали дальше.
2836.00 2841.00 "Игорь Лабутин" EditorConfig - штука, которая позволяет нам задавать параметры формата.
2841.00 2844.00 "Игорь Лабутин" У нас с этого начиналось, собственно, в настройке редактора.
2844.00 2850.00 "Игорь Лабутин" Но потом разрослась, и там можно задавать сейчас огромное количество вещей, там всякие правила диагностики и так далее.
2850.00 2860.00 "Игорь Лабутин" Ну вот как раз-таки ReSharper поддерживает то, что называется "Дотонет подчеркивание диагностик" правила и настраивает себя в соответствии с ними.
2860.00 2868.00 "Игорь Лабутин" Кроме того, можно указать severity всяких инспекций, чтобы, соответственно, они были хинтами, либо ошибками, либо портингами.
2868.00 2880.00 "Анатолий Кулаков" Ну и, как я и сказал, куча улучшений в Out of Process теме, которую мы уже освещали, в поддержке новых фич C# 8 и даже C# 9, Blazor, а куда же без него, и новомодной MAUYA.
2880.00 2883.00 "Анатолий Кулаков" Все это улучшается, все это есть, все это релизится.
2883.00 2889.00 "Анатолий Кулаков" Кстати, в Rider появилась поддержка настоящих полноценных GitHub pull-requests.
2889.00 2901.00 "Анатолий Кулаков" Как следовало ожидать, вы можете не только просматривать, но и ассоциировать пользователей с pull-requests, естественно, мерзнуть их, выдавать комментарии, делать ревью, принимать изменения и так далее.
2901.00 2903.00 "Анатолий Кулаков" Наверное, для кого-то это будет полезным.
2903.00 2907.00 "Анатолий Кулаков" Я как-то ни разу не использовал внешние инструменты для GitHub-овских pull-requests.
2907.00 2910.00 "Анатолий Кулаков" Мне всегда хватало родного GitHub-овского интерфейса.
2910.00 2919.00 "Анатолий Кулаков" Но я знаю, что в Visual Studio Code есть отличный то ли плагин, то ли функциональность, которая с этим хорошо справляется, и там ее очень многие хвалят.
2919.00 2922.00 "Анатолий Кулаков" Я думаю, ReShaper тоже вполне может занять эту нишу.
2922.00 2924.00 "Анатолий Кулаков" Ты, Игорь, как обычно, GitHub pull-request?
2924.00 2927.00 "Игорь Лабутин" Я обычно делаю все ручками через веб-интерфейс.
2927.00 2931.00 "Игорь Лабутин" У меня не настолько много pull-requests, которые создаю я.
2931.00 2933.00 "Игорь Лабутин" Их обычно достаточно менеджить руками.
2933.00 2937.00 "Игорь Лабутин" И я не веду ничего активного, что хостилось бы на GitHub.
2937.00 2943.00 "Игорь Лабутин" Соответственно, у меня нет необходимости именно рулить pull-requests со стороны, так скажем, мейнтейнера или автора.
2943.00 2947.00 "Игорь Лабутин" Поэтому у меня как-то нет необходимости с этим жить.
2947.00 2956.00 "Игорь Лабутин" Но, допустим, мы активно ведем работу с pull-requests в TFS, он же Azure DevOps, на котором мы живем.
2956.00 2962.00 "Игорь Лабутин" И там тоже есть какие-то возможности подергать это все из всяких экстенджеров и из студии.
2962.00 2964.00 "Игорь Лабутин" Хотя из студии пока это не полноценно.
2964.00 2969.00 "Игорь Лабутин" Но все равно все проще делать немножко, пока, по крайней мере, в браузере.
2969.00 2979.00 "Игорь Лабутин" Хотя я понимаю, что, например, какой-нибудь ревью с точки зрения диффов, подсветки кода и такого в студии, наверное, было бы приятнее.
2979.00 2981.00 "Игорь Лабутин" Но я как-то пока мне все хватает.
2981.00 2986.00 "Анатолий Кулаков" Да, нужно завести какой-нибудь проект побольше на GitHub и попробовать обязательно.
2986.00 2991.00 "Анатолий Кулаков" Дальше наткнулся я на интересный анонсик нового маркетплейса от Aaron Stennard.
2991.00 3001.00 "Анатолий Кулаков" Если кто не знает, Aaron Stennard - это CTO и фаундер компании Petabridge, которая полностью написала и занимается коммерческой поддержкой проекта akka.net.
3001.00 3002.00 "Анатолий Кулаков" У него довольно интересный блог.
3002.00 3004.00 "Анатолий Кулаков" И это статья про их новый продукт.
3004.00 3005.00 "Анатолий Кулаков" Начнем сначала.
3005.00 3010.00 "Анатолий Кулаков" Aaron очень много лет уже занимается open-source.
3010.00 3020.00 "Анатолий Кулаков" Первый его стартап прогорел, а последний стартап, который Petabridge, существует уже около шести лет и, в принципе, успешно себя показал.
3020.00 3024.00 "Анатолий Кулаков" Вся фишка заключается в том, что это стартап, который зарабатывает на open-source.
3024.00 3032.00 "Анатолий Кулаков" Очень мало примеров даже в мире существует того, как могут успешно существовать фирмы, занимающиеся open-source.
3032.00 3035.00 "Анатолий Кулаков" А в дотнете их вообще буквально единицы.
3035.00 3038.00 "Анатолий Кулаков" Какие вообще, Игорь, ты знаешь, способы зарабатывать open-source?
3038.00 3047.00 "Игорь Лабутин" Open-source? Ну, из простого в голову приходит только какая-нибудь платная поддержка либо платная реализация нужных фич.
3047.00 3065.00 "Игорь Лабутин" То есть, если я, как мейн-тренер, обычно определяю сам, что я хочу писать в продукт, но если ко мне придет какой-нибудь заказчик и скажет, вот мне очень нужна эта фича, она, в принципе, in-line с моим видением того, куда нужно развиваться и заплатит меня за это денег, я, наверное, тогда смогу ее реализовать быстрее.
3065.00 3074.00 "Анатолий Кулаков" Да, ты, в принципе, назвал самое популярное - это service model, когда ты делаешь какой-то платный саппорт, когда ты делаешь тренинги, когда ты делаешь консультации.
3074.00 3079.00 "Анатолий Кулаков" И еще существует license model, когда ты именно лицензии зарабатываешь.
3079.00 3091.00 "Анатолий Кулаков" То есть, для open-source и для community ты распространяешь свой продукт бесплатно, но если к тебе приходит коммерческий заказчик с большим мешком денег, то для него есть отдельная коммерческая лицензия, где там уже совсем не все так весело.
3091.00 3095.00 "Анатолий Кулаков" Но, в принципе, в обмен получает тот же самый какой-нибудь саппорт.
3095.00 3100.00 "Анатолий Кулаков" Еще существует managed service model - это когда ты продаешь именно сервис.
3100.00 3110.00 "Анатолий Кулаков" Например, ты можешь разрабатывать какую-нибудь базу данных, но, например, ее поддержку в Ажуре или ее предоставление как пасса ты уже можешь продавать.
3110.00 3116.00 "Анатолий Кулаков" То есть, ты продаешь сам DevOps, саму инфраструктуру вокруг своего продукта, консультного продукта.
3116.00 3122.00 "Анатолий Кулаков" AARN выделяет еще reputation model - это так называемое создание своего бренда.
3122.00 3138.00 "Анатолий Кулаков" То есть, когда ты настолько сделал популярный проект, что тебя уже узнают по фамилии, тебя уже берут на работу только из-за твоего проекта, и ты этим образом способен влиять, какие разработчики еще пойдут в эту команду, насколько эта компания будет популярна на всяких конференциях и так далее.
3138.00 3140.00 "Анатолий Кулаков" То есть, это продвижение с помощью своего бренда.
3140.00 3146.00 "Анатолий Кулаков" Пета Брич использует как раз-таки сервис-модул, когда он продает консалтинг и саппорт, и лицензию.
3146.00 3158.00 "Анатолий Кулаков" То есть, у него основная продукт - aka.net - он бесплатен и открытен, но у него есть платные продукты, которые делают мониторинг поверх aka.net, и уже их он продает за деньги и лицензирует отдельно.
3158.00 3161.00 "Анатолий Кулаков" Итак, к чему такая длинная вводная?
3161.00 3170.00 "Анатолий Кулаков" Потому что AARN на своих плечах, на своей фирме выяснил, что сделать коммерческую поддержку какого-нибудь open-source - это довольно-таки трудно.
3170.00 3177.00 "Анатолий Кулаков" Вам нужно что-то продавать, вам нужно оформлять какие-то заказы, вам нужно оформлять какие-то чеки, сделки и так далее.
3177.00 3186.00 "Анатолий Кулаков" И вы тратите уже свое время не на то, чтобы делать продукт, не на то, чтобы заниматься то, чем вам нравится, а какой-то непонятной бюрократией.
3186.00 3191.00 "Анатолий Кулаков" И он решил упростить именно эту часть для всего open-source сообщества.
3191.00 3194.00 "Анатолий Кулаков" Он анонсировал сервис SDK Bean.
3194.00 3197.00 "Анатолий Кулаков" Это marketplace для софт-вай разработчиков.
3197.00 3204.00 "Анатолий Кулаков" Он позволяет вам продавать ваш собственный open-source продукт на одном из тех условий, которые вы выберете.
3204.00 3214.00 "Анатолий Кулаков" Этот marketplace может предоставлять для клиента, допустим, стандартный Nougat интерфейс, то есть стандартный Nougat URL, который работает и зависит от коммерческих планов.
3214.00 3223.00 "Анатолий Кулаков" Допустим, этот URL может становиться автоматически доступным для кастомера, если кастомер заплатит определенную цену, которая соответствует планам.
3223.00 3230.00 "Анатолий Кулаков" Если по планам он не продлил лицензию, то этот URL отключается до тех пор, пока подписка не будет продлена.
3230.00 3233.00 "Анатолий Кулаков" Все зависит от того, какую схему монетизации вы выберете.
3233.00 3242.00 "Анатолий Кулаков" Этот сервис берет на себя полностью все моменты, связанные с транзакцией, с деньгами, с переводами, с оплатой кредитными картами, с возвращением денег и так далее.
3242.00 3244.00 "Анатолий Кулаков" Об этом ни о чем вам думать не нужно.
3244.00 3265.00 "Анатолий Кулаков" Еще одним классным преимуществом, которое ставится целью для этого проекта, является то, что перед кастомером появляется витрина понятных open source или открытых инструментов, которые он может увидеть, посмотреть, насколько им доверяют люди, насколько ими пользуются, как сильно их поддерживают и на основании этого сделать вывод, вкладывать деньги в этот инструмент или не вкладывать деньги.
3265.00 3277.00 "Анатолий Кулаков" Основные цели у SDK Bina 2 - это сделать возможным так, чтобы пользователи в любое время могли найти тот инструмент, который они бы хотели, и приобрести его на понятных условиях.
3277.00 3289.00 "Анатолий Кулаков" И вторая цель - это сделать так, чтобы разработчики могли получать деньги за тот труд, который они любят, за тот труд, который они делают, в то время, пока не спят.
3289.00 3296.00 "Игорь Лабутин" Ну, слушай, цель интересная, посмотрим, кто туда придет, посмотрим, как это будет развиваться и к чему это приведет.
3296.00 3310.00 "Игорь Лабутин" Стартап - дело хорошее, в принципе, поскольку действительно он базируется на таких достаточно стандартных штуках по лицензированию open source, которые можно построить вокруг open source, то, наверное, что-то может взлететь.
3310.00 3316.00 "Игорь Лабутин" Вопрос только, как всегда, в том, кто туда придет и насколько будет пользоваться популярностью.
3316.00 3318.00 "Игорь Лабутин" Поглядим, в пиаре, может быть, даже.
3318.00 3323.00 "Анатолий Кулаков" GitHub разразился тоже новой тулзой, которая называется GitHub Super Linter.
3323.00 3325.00 "Анатолий Кулаков" Так вот скромненько.
3325.00 3329.00 "Анатолий Кулаков" Прежде всего, linter - это инструмент для анализа исходного кода.
3329.00 3336.00 "Анатолий Кулаков" В отличие от дебаггера, он не требует, чтобы исходный код компилился, он анализирует именно синтакси.
3336.00 3346.00 "Анатолий Кулаков" Линтеры могут помочь вам в нахождении как простых опечаток, как ошибок с форматированием, так и чего-то более сложного, например, ошибок или критических багов.
3346.00 3352.00 "Анатолий Кулаков" Когда вы создаете свой репозиторий на GitHub, обычно перекрутить linter сейчас для нас является не самой простой задачей.
3352.00 3357.00 "Анатолий Кулаков" Вам нужно произвести какие-то манипуляции, нужно найти какие-то стандарты, нужно найти какие-то инструменты.
3357.00 3364.00 "Анатолий Кулаков" И у GitHub, как у компании, проблема усугубилась еще тем, что у них было огромное число языков, на которые пишутся их проекты внутри.
3364.00 3372.00 "Анатолий Кулаков" Поэтому они решили создать такой глобальный linter, который умеет сделать какую-то базовую проверку, какие-то базовые гарантии давать для множества языков.
3372.00 3375.00 "Анатолий Кулаков" И у них получилась такая довольно-таки мощная столянка.
3375.00 3385.00 "Анатолий Кулаков" Поэтому они выложили этот проект на всеобщее обозрение, на GitHub и предлагают сообществу всячески в него проинвестировать, помочь им и воспользоваться результатами.
3385.00 3393.00 "Игорь Лабутин" Да, при этом, соответственно, это получается удобная штука, позволяющая вам легко заиспользовать это дело для любых языков.
3393.00 3410.00 "Игорь Лабутин" То есть, если у вас продукт или проект на нескольких языках, вы можете заиспользовать вот этот суперлинтер и получить лучшие практики, лучшие рекомендации по каждому из языков, как бы единым пакетом, единым контейнером.
3410.00 3423.00 "Игорь Лабутин" И, возможно, поскольку это всё будет применяться на многих проектах, это позволит как-то ещё улучшить все эти гайдлайны и сделать самые правильные правила линтера для каждого из языков.
3423.00 3428.00 "Анатолий Кулаков" Вся прелесть того, что это выпустил GitHub, что этот линтер будет доступен на GitHub Actions.
3428.00 3441.00 "Анатолий Кулаков" То есть, теперь при создании нового проекта вам достаточно всего-навсего прописать одну строчечку в GitHub Actions, и линтер автоматически к вам подцепится и, может быть, даже сам сможет задетектировать язык и запустит все анализаторы.
3441.00 3444.00 "Игорь Лабутин" Прикольно. Кроме одной проблемной вещи.
3444.00 3447.00 "Игорь Лабутин" У этой штуки есть один большой недостаток.
3447.00 3449.00 "Игорь Лабутин" В нём нет поддержки C#.
3449.00 3455.00 "Анатолий Кулаков" Именно так. Есть заведён issue, где люди пытаются запустить всевозможные варианты.
3455.00 3463.00 "Анатолий Кулаков" Самым близким к реализации является ReSharper Command Line, но там почему-то всё сыпется, валится и так далее.
3463.00 3487.00 "Анатолий Кулаков" Поэтому, наверное, основная цель этого анонса - это всё-таки не порекламировать линтер, потому что для C# он не работает, а призвать людей, которые настраивали уже линтер на своих проектах, призвать людей, которые уже занимались этим вопросом, помочь сделать нормальную реализацию C# для этого GitHub Actions и помочь всем нам в будущем иметь хороший, интересный, красивый, настроенный по дефолту линтер.
3487.00 3493.00 "Игорь Лабутин" Да, приходите в высшую номер 150 в репозитории и оставляйте там свои комментарии, предложения, как это можно сделать.
3493.00 3495.00 "Игорь Лабутин" Там уже есть несколько идей.
3495.00 3500.00 "Игорь Лабутин" Некоторые из них провалились, соответственно, больше идей, больше шансов, что всё будет сделано правильно.
3500.00 3503.00 "Анатолий Кулаков" Наткнулся тут недавно на анонс новой книги от Эндрю Лока.
3503.00 3509.00 "Анатолий Кулаков" Наш постоянный слушатель точно знает, кто такой Эндрю Лок, потому что мы провели не один час обсуждая его статьи.
3509.00 3518.00 "Анатолий Кулаков" Человек очень глубоко в своём блоге копает ISP.NET Core, разбирает всякие нетривиальные вещи и очень интересно и увлекательно читается.
3518.00 3523.00 "Анатолий Кулаков" Вот почему его книга, мне кажется, будет очень полезна разработчикам.
3523.00 3526.00 "Анатолий Кулаков" Книга, которая называется ISP.NET Core in action.
3526.00 3531.00 "Анатолий Кулаков" Наверное, судя по названию, вы догадались, что Эндрю полностью раскроет все тайны ISP.NET Core.
3531.00 3539.00 "Анатолий Кулаков" Книга будет полезна не только заядлым ISP-писателям, но и начинающим разработчикам, которые только открывают для себя этот новый удивительный мир.
3539.00 3552.00 "Анатолий Кулаков" Эндрю там проходится по всему, начиная от пайплайна Middleware, MBC, Razer Framework, валидации моделей, конфигурации MDI, авторизации AI-аутентификации, диплоим, мониторингом, тестом.
3552.00 3558.00 "Анатолий Кулаков" В общем, все, что можно только представить и нужно для полноценного проекта, он там опишет.
3558.00 3563.00 "Анатолий Кулаков" Автор отличный, поэтому есть полная уверенность, что книга будет тоже прекрасная.
3563.00 3571.00 "Анатолий Кулаков" К сожалению, это только анонс в том, что Эндрю начал на ней работать, и релиз примерно предполагается весной 2021 года.
3571.00 3581.00 "Анатолий Кулаков" Но вы уже можете подписаться на ранние превью и в реальном времени смотреть, как добавляются главы, а также помогать улучшать контент для будущей книги.
3581.00 3586.00 "Игорь Лабутин" Заступно 4 главы из 21, то есть уже что-то вполне интересное.
3586.00 3591.00 "Игорь Лабутин" И заходите на сайт, подписывайтесь, смотрите, почитайте.
3591.00 3601.00 "Анатолий Кулаков" И анонс Эндрю меня натолкнул на мысль, что в принципе у нас уже появилось несколько интересных книг, которые тоже было бы, наверное, неплохо осветить.
3601.00 3604.00 "Анатолий Кулаков" Поэтому я еще отошкал парочку хороших экземпляров.
3604.00 3607.00 "Анатолий Кулаков" Естественно, книг выходит сейчас сотни тысяч и так далее.
3607.00 3612.00 "Анатолий Кулаков" Я старался сосредоточиться именно на тех авторах, которые зарекомендовали себя хорошо в сообществе.
3612.00 3622.00 "Анатолий Кулаков" То есть, которые или пишут блоги, или являются нашими непосредственными друзьями по конференциям, или пишут интересные инструменты, которые мы каждый день используем.
3622.00 3634.00 "Анатолий Кулаков" Как раз на прошедшей .NEXT конференции в Питере я узнал о Трафаэле Риалди, что он тоже выпустил книгу, свежачок от Риалди, поэтому нельзя не умолчать.
3634.00 3637.00 "Анатолий Кулаков" Называется она... Слушай, Игорь, прочитай ты, как она называется.
3637.00 3643.00 "Игорь Лабутин" "Learn C# Programming - A Guide to Building a Solid Foundation in C# Language for Writing Efficient Programs".
3643.00 3661.00 "Игорь Лабутин" Длинное-длинное название. И если посмотреть на оглавление, оно такое довольно забавное с моей точки зрения, потому что, например, одна из первых глав называется "Data Types and Operators", то есть, казалось бы, книжка для тех, кто вообще не знает, что такие типы данных, операторы, какие вообще бывают в C#.
3661.00 3669.00 "Игорь Лабутин" А в конце мы приходим к рефлекшену, мултитрейдингу, ассингт программингу, линкью и всяким таким сложным штукам.
3669.00 3675.00 "Анатолий Кулаков" Основная целевая аудитория - это как раз начинающие разработчики, которые хотят хорошо углубить свои знания в C#.
3675.00 3681.00 "Анатолий Кулаков" И зная Риалди, можно быть уверенным, что они углубят это по самому не могу.
3681.00 3705.00 "Игорь Лабутин" То есть, скорее всего, не надо ждать от этой книжки, что это второй рихтер, то есть, это не всесторонний объем и все объемлющие введения в Notenet Framework, Runtime и все сопутствующие места, но эта книга, скорее всего, даст вам хорошую базу C#, современного C#, что самое важное, который позволит достаточно легко разбираться в существующем коде и знать современные фишки языка, которые могут быть вам полезны.
3705.00 3717.00 "Анатолий Кулаков" Еще один замечательный оратор, спикер, который у нас пока не появлялся, но я очень хочу его пригласить, это Алексей Зимарев. Он выпустил книгу про DDD. Игорь, прочитай, пожалуйста, ее название.
3717.00 3722.00 "Игорь Лабутин" Ты все выбираешь книжки с длинными названиями. Сложно все читать. Давай попробуем.
3722.00 3729.00 "Игорь Лабутин" "Hands-on domain-driven design with .NET Core. Tackling complexity in the heart of software by putting DDD principles into practice".
3729.00 3736.00 "Игорь Лабутин" Очень длинная книжка и снова про DDD. У нас есть, как они там, Bluebook и какая у нас еще, красная книжка, да?
3736.00 3739.00 "Игорь Лабутин" Синяя и красная книжки про DDD? Да.
3739.00 3746.00 "Игорь Лабутин" Вот теперь будет еще одна. Если я правильно помню, она, по-моему, немножко в сторону желтенького уходит.
3746.00 3758.00 "Игорь Лабутин" И книжка, на самом деле, прикольная, в том смысле, что там считается, что классика DDD, реке Эванс, там нужно читать только какую-то ее правильную часть.
3758.00 3775.00 "Игорь Лабутин" А в этой книжке автор как раз-таки попытался собрать именно практически полезные советы и выжимку того, что нужно использовать из DDD на примере, собственно, .NET Core, и как это вообще применять в реальной жизни.
3775.00 3784.00 "Анатолий Кулаков" Как это применять, например, к новомодным архитектурам и к интерпрайс-архитектурам, к РЭСТу, к реактивным системам, к микросервисам, то есть все то, что вы слышите каждый день.
3784.00 3791.00 "Анатолий Кулаков" Безусловно, вы станете экспертом в таких баз-вордах, как Bound Context, Aggregation Root, Event Storming, Event Sourcing и Secure OS.
3791.00 3802.00 "Анатолий Кулаков" Эта книга тоже не обходит стороной. Алексей тоже знаменитый эксперт в теме DDD, поэтому я рассчитываю, что книга будет действительно глубоким и удобным чтивом, и я ее планирую прочитать в ближайшее время.
3802.00 3807.00 "Игорь Лабутин" Я читаю сейчас, поэтому да, начало неплохое.
3807.00 3817.00 "Игорь Лабутин" Пока в основном теория про то, что такое Bound Context и DDD, но дальше, судя по оглавлению, будет все очень жарко и практично.
3817.00 3820.00 "Игорь Лабутин" Так что жду с нетерпением, когда дочитаю до той части.
3820.00 3822.00 "Игорь Лабутин" Есть ли у нас еще книжки с длинными названиями?
3822.00 3825.00 "Анатолий Кулаков" С длинными нет, поэтому следующие я прочитаю сам.
3825.00 3829.00 "Анатолий Кулаков" Unit Testing Principle, Practice and Patterns от Владимира Хорикова.
3829.00 3832.00 "Анатолий Кулаков" Владимир - это один из моих любимых блогеров.
3832.00 3837.00 "Анатолий Кулаков" Он не только пишет книги, не только ведет блог, но и у него еще замечательные Pluralsight курсы.
3837.00 3845.00 "Анатолий Кулаков" Он шикарно сечет не только в тестах, но и как раз таки в DDD, и во многих других архитектурных принципах.
3845.00 3850.00 "Анатолий Кулаков" И очень хорошо, понятным языком рассказывает это в рамках своего блога.
3850.00 3859.00 "Анатолий Кулаков" Это как раз таки один из тех двух блогов, которые можно порекомендовать, как открывайте с самой первой статьи и читайте до самой последней.
3859.00 3865.00 "Анатолий Кулаков" Потому что все архитектурные выводы, все архитектурные принципы, которые там были, они до сих пор актуальны.
3865.00 3875.00 "Анатолий Кулаков" Да, многие изменились, многие усовершенствовались, во многих там были допущены какие-то ошибки, но в основном это отличный блог.
3875.00 3881.00 "Анатолий Кулаков" В основном его можно рекомендовать просто всем начинающим разработчикам, которые хотят продвинуться в сторону архитектуры.
3881.00 3885.00 "Анатолий Кулаков" Данная книга Владимиром оформлена не про архитектуру, а про юнит-тесты.
3885.00 3896.00 "Анатолий Кулаков" Но про юнит-тесты с очень фундаментальным, базовым подходом, где он разбирает не просто, как запустить какой-то тестик и посмотреть, красненький он или зелененький.
3896.00 3902.00 "Анатолий Кулаков" Он разбирает тесты именно с точки зрения того, что такое хорошие тесты, с точки зрения того, что такое плохие тесты.
3902.00 3926.00 "Анатолий Кулаков" То есть, как писать архитектуру тестов, как ее прорабатывать, каким образом рассчитывать надежность тестов, какие вообще антипаттерны и бест-практисы существуют для того, чтобы тестировать ваш код, как и правильно использовать моки, как использовать интеграционный тест, нужно ли мокать базу данных и прочие такие вещи, которые обязательно встанут перед вами, если вы начнете хорошо, качественно тестировать свой код.
3926.00 3930.00 "Анатолий Кулаков" Чтобы не было мучительно больно, очень рекомендую книгу Владимира.
3930.00 3936.00 "Анатолий Кулаков" Я просмотрел много курсов его, просмотрел много его докладов и выжимок из этой книги.
3936.00 3946.00 "Анатолий Кулаков" И с уверенностью можно сказать, что там находятся фундаментальные, довольно полезные на практике знания, которые желательно бы знать, конечно, каждому разработчику.
3946.00 3951.00 "Игорь Лабутин" В общем, да, читайте блоги, читайте книжки, всяческие, любое образование, оно полезно.
3951.00 3955.00 "Игорь Лабутин" Конкретно эти книжки действительно добавят вам знаний.
3955.00 3963.00 "Игорь Лабутин" Возможно, если вы уже продвинутый программист на C#, книжка Реальди будет не столь вам интересна, но все остальные точно заслуживают внимания.
3963.00 3977.00 "Анатолий Кулаков" В наше время все еще люди читают книги и, в принципе, несмотря на кажущуюся с моей, по крайней мере, стороны, победу всяких блогов, конференций, митапов и так далее, книги все еще актуальны.
3977.00 3986.00 "Анатолий Кулаков" А с другой интересной статистикой нас познакомит отчет от JetBrains, который называется "The State of Developer Ecosystem" в 2020 году.
3986.00 3995.00 "Анатолий Кулаков" Такой всеобъемлющий большой отчет с множеством интересных результатов, с множеством разбиений по языкам и так далее.
3995.00 4001.00 "Анатолий Кулаков" Давайте сосредоточимся как раз-таки на C#, на .NET, на то, что интересно нам.
4001.00 4002.00 "Анатолий Кулаков" Прежде всего о методологии.
4002.00 4006.00 "Анатолий Кулаков" Было опрошено около 20 тысяч разработчиков из различных 18 стран.
4006.00 4015.00 "Анатолий Кулаков" JetBrains привлекал на этот опрос своих кастомеров, привлекал рекламой, давал рекламу в различных социальных сетях и так далее.
4015.00 4022.00 "Анатолий Кулаков" То есть старался приложить максимум усилий для того, чтобы отчет получился как можно более разнообразным и правдоподобным.
4022.00 4024.00 "Анатолий Кулаков" Итак, давайте начнем с общей картины.
4024.00 4027.00 "Анатолий Кулаков" Посмотрим на цифры по всем языкам программирования.
4027.00 4029.00 "Анатолий Кулаков" Вопрос был следующим.
4029.00 4034.00 "Анатолий Кулаков" Какие языки программирования вы трогали, вы использовали за последние 12 месяцев?
4034.00 4039.00 "Анатолий Кулаков" Ну то есть можно по этой картине примерно судить актуальность языков, кто из них используется на практике.
4039.00 4042.00 "Анатолий Кулаков" На первом месте JavaScript - 70%.
4042.00 4051.00 "Анатолий Кулаков" Далее идет HTML, CSS, SQL, Python, Java, Shell, TypeScript, C++, PHP, C и на 11 месте C# с 22%.
4051.00 4053.00 "Анатолий Кулаков" Как там? Маловато, тебе не кажется?
4053.00 4072.00 "Игорь Лабутин" Ну, маловато, при том, что если как ты говоришь JetBrains делали это среди своих заказчиков, а ReSharper это довольно-таки древний продукт, можно сказать, то я бы ожидал большего участия C# разработчиков в этом деле.
4072.00 4082.00 "Анатолий Кулаков" Все-таки нужно сказать, что цель этого отчета - это именно не собрать мнение кастомеров JetBrains, это все-таки отразить глобальную картину на общем рынке.
4082.00 4089.00 "Анатолий Кулаков" То есть цель была именно такая. JetBrains никак не ассоциировал этот отчет ни с собой, ни со своими инструментами, ни с чем-то таким.
4089.00 4092.00 "Анатолий Кулаков" Поэтому это должно более-менее отражать мировые тренды.
4092.00 4098.00 "Анатолий Кулаков" Разумеется, те, кто знаком с маркой JetBrains и те, кто пользовался их инструментами, наверняка таких большинство.
4098.00 4101.00 "Анатолий Кулаков" Но не нужно забывать, что все-таки не только они здесь.
4101.00 4113.00 "Анатолий Кулаков" Из плюсов C# обогнал Go и Kotlin, но F# занял меньше 1% и барахтается где-то вместе с Delphi и CoffeeScript, что как бы не внушает доверия.
4113.00 4118.00 "Анатолий Кулаков" Еще один интересный раздел - это куда бы хотели мигрировать пользователи C# на какие другие языки.
4118.00 4122.00 "Анатолий Кулаков" Радостная новость в том, что 51% никуда не хотят мигрировать с C#.
4122.00 4125.00 "Анатолий Кулаков" И это довольно-таки высокий показатель в общем по отчету.
4125.00 4130.00 "Анатолий Кулаков" 10% хотят попробовать Go, 10% Kotlin и 10% Python.
4130.00 4132.00 "Анатолий Кулаков" Остальные языки еще меньше.
4132.00 4136.00 "Анатолий Кулаков" Ну, в принципе, наверное, ожидаемая картина, судя по тому, куда люди хотят мигрировать.
4136.00 4140.00 "Анатолий Кулаков" С другой стороны, с каких языков хотят мигрировать на C#?
4140.00 4145.00 "Анатолий Кулаков" Большинство - это C++, 6% хотят попробовать C#.
4145.00 4147.00 "Анатолий Кулаков" И с Python, тоже 6%.
4147.00 4150.00 "Анатолий Кулаков" Здесь не так уж много людей хотят воспользоваться C#.
4150.00 4154.00 "Анатолий Кулаков" Как всегда, как уже многие годы, лидером является Go.
4154.00 4158.00 "Анатолий Кулаков" На него хотят мигрировать больше всего народу со всех других языков.
4158.00 4163.00 "Анатолий Кулаков" Но судя по рейтингам, они все еще хотят и никаких практических действий для этого не применяют.
4163.00 4165.00 "Игорь Лабутин" Ну, кстати, ты не совсем прав.
4165.00 4167.00 "Игорь Лабутин" Я сейчас смотрю на эти таблички.
4167.00 4178.00 "Игорь Лабутин" Действительно, на Go хотят мигрировать довольно много, но есть один, так скажем, outlier, можно сказать, с Go хотят мигрировать на Rust довольно много народу.
4178.00 4179.00 "Игорь Лабутин" Целых 17%.
4179.00 4182.00 "Игорь Лабутин" И это прям как-то интересно.
4182.00 4184.00 "Анатолий Кулаков" С Rust ситуация еще намного хуже.
4184.00 4192.00 "Анатолий Кулаков" Rust является одним из самых любимых, самых желанных языков последних много лет, но на нем практически люди не пишут.
4192.00 4194.00 "Игорь Лабутин" Это тоже меня не удивляет.
4194.00 4197.00 "Игорь Лабутин" Это такой интересный язык, очень хочется попробовать, но негде.
4197.00 4199.00 "Игорь Лабутин" Видимо, какая-то такая ситуация.
4199.00 4208.00 "Анатолий Кулаков" Так, еще один вопрос, который, наверное, больше раскрывает картину популярности языков, это все-таки какой ваш основной язык на работе.
4208.00 4222.00 "Анатолий Кулаков" Итак, 39% используют JS, 37% - Java, далее идет Python, CSS, HTML, SQL, PHP 15%, C++ и на 8-ом месте C# с 13%.
4222.00 4226.00 "Анатолий Кулаков" То есть 13% опрошенных - это как раз-таки профессиональные разработчики на C#.
4226.00 4238.00 "Игорь Лабутин" Ну, надо понимать, что при ответах можно было выбрать до трех языков, то есть если вы пишете и фронт-энд, и бэк-энд, то вы выбрали, например, JavaScript и C#, или TypeScript и C#.
4238.00 4248.00 "Игорь Лабутин" То есть проценты в 100% точно не сложатся, но это интересно, что C# всего 13% и PHP даже больше.
4248.00 4253.00 "Анатолий Кулаков" Меня вообще поразил сам факт того, что PHP действительно все еще жив и все еще так сильно популярен.
4253.00 4256.00 "Анатолий Кулаков" 15% - это хорошо, это прям не хило.
4256.00 4267.00 "Анатолий Кулаков" Другие интересные факты, которые меня поразили, это то, что несмотря на весь хайп и популярность Go, его количество разработчиков равняется количеству разработчиков на Kotlin.
4267.00 4272.00 "Анатолий Кулаков" Они, конечно, позади C#, но все же довольно высокие позиции имеют.
4272.00 4278.00 "Анатолий Кулаков" Еще один шок для меня, который случился, это что JavaScript настолько сильно популярен TypeScript.
4278.00 4284.00 "Анатолий Кулаков" Мне кажется, все вменяемые люди уже давно перешли на TypeScript, и на JavaScript никто нормально не пишет.
4284.00 4294.00 "Анатолий Кулаков" Оказывается, это не так. TypeScript идет даже после C# на 9-м месте, а вот JavaScript практически по всем рейтингам, во всех опросах на 1-м месте по популярности.
4294.00 4297.00 "Анатолий Кулаков" Тоже интересно, почему так. Надо обратиться к коллегам по церкви.
4297.00 4302.00 "Игорь Лабутин" Да, и заставить всех перейти на TypeScript. А лучше на C#, у нас же есть Blazor теперь.
4302.00 4305.00 "Анатолий Кулаков" Теперь да, теперь нужно срочно переходить всем на Blazor и C#.
4305.00 4308.00 "Игорь Лабутин" Так, ладно, поехали дальше. Что у нас еще?
4308.00 4311.00 "Анатолий Кулаков" На какой операционной системе вы разрабатываете?
4311.00 4318.00 "Анатолий Кулаков" Здесь 60% у Windows, 50% у Linux, который, кстати, обогнал Mac OS, у которой всего 44%.
4318.00 4327.00 "Анатолий Кулаков" Судя по конференции, когда я вижу, то все практически разработчики, все хипстеры, все фуллстеки, все Microsoft-ставы, они ходят исключительно с Macbook'ами.
4327.00 4331.00 "Анатолий Кулаков" Я удивляюсь вообще, что Windows набрала 60%, наверное, это интерферосные старперы.
4331.00 4336.00 "Анатолий Кулаков" Но вот Linux, откуда у Linux 50%? Вот это вообще очень интересно.
4336.00 4345.00 "Анатолий Кулаков" Я напоминаю, что это не продакшн, на котором работают ваши приложения, а именно, какую операционную систему вы используете для разработки в основное свое время.
4345.00 4350.00 "Анатолий Кулаков" Итак, другим интересным графиком является то, на каких языках какие приложения пишут.
4350.00 4355.00 "Анатолий Кулаков" В частности, на C# веб-сайты пишут в 55% случаях.
4355.00 4360.00 "Анатолий Кулаков" На втором месте по популярности находятся маленькие утилитки, это 45%.
4360.00 4364.00 "Анатолий Кулаков" Нужно сказать, что C# - это главный язык для написания маленьких утилиток.
4364.00 4366.00 "Анатолий Кулаков" То есть, это показатель выше всех.
4366.00 4368.00 "Анатолий Кулаков" Довольно странная ниша, ты не находишь?
4368.00 4382.00 "Игорь Лабутин" Да, пожалуй, с учетом того, что только сейчас, в последнее время, мы стали ближе к пользователям разворачиваться со всякими single-file-applications и такими простыми штуками, что это действительно странно.
4382.00 4388.00 "Анатолий Кулаков" Тем не менее, если вам нужно написать маленькую утилитку, то C# - это лучший язык в мире для этого.
4388.00 4389.00 "Анатолий Кулаков" Почему бы и нет?
4389.00 4391.00 "Анатолий Кулаков" Базы данных пишут 41%.
4391.00 4392.00 "Анатолий Кулаков" Здесь не очень понятно.
4392.00 4397.00 "Анатолий Кулаков" Наверное, все-таки приложения, которые работают с базами данных, написанные на C#.
4397.00 4401.00 "Анатолий Кулаков" Дальше еще один пункт, который меня довольно-таки поразил, это System Software.
4401.00 4405.00 "Анатолий Кулаков" 31% пишут системные программы на C#.
4405.00 4410.00 "Анатолий Кулаков" И это самый высокий показатель в категории среди других языков.
4410.00 4413.00 "Анатолий Кулаков" На втором месте находится C++ с 25%.
4413.00 4417.00 "Анатолий Кулаков" Казалось бы, самый главный системный язык C++ на свете.
4417.00 4418.00 "Анатолий Кулаков" В конце концов раст.
4418.00 4422.00 "Анатолий Кулаков" Почему системные софтверы пишут на C# больше всего?
4422.00 4424.00 "Игорь Лабутин" На самом деле, ты не прав.
4424.00 4431.00 "Игорь Лабутин" Если внимательно посмотреть на табличку, то на втором месте внезапно находится SQL с 29%.
4431.00 4436.00 "Игорь Лабутин" И только потом там будет C++ с 25% и внезапно TypeScript.
4436.00 4438.00 "Игорь Лабутин" Вот это еще более внезапно.
4438.00 4441.00 "Игорь Лабутин" Что такое System Software на TypeScript, я не очень понимаю.
4441.00 4448.00 "Анатолий Кулаков" Мне кажется, это знаешь, как JavaScript разработчики начали называть себя бэкендерами, когда начали писать под ноду.
4448.00 4450.00 "Анатолий Кулаков" Это из той же оперы.
4450.00 4455.00 "Анатолий Кулаков" Они написали какую-то непонятную металитку под ноду и решили, что это называется системным программированием.
4455.00 4461.00 "Анатолий Кулаков" Нужно сначала провести курс терминологии для этих хипстеров, а потом уже опрос из них делать.
4461.00 4467.00 "Анатолий Кулаков" Другое очень интересная категория, где C# порвал всех и вырвался вперед, это GameDev.
4467.00 4471.00 "Анатолий Кулаков" Не странно, потому что Unity сейчас рулит и бибикает.
4471.00 4476.00 "Анатолий Кулаков" В порядке ему дышит C++ со своим Unreal, у него 19% популярности.
4476.00 4485.00 "Анатолий Кулаков" В тему того, что люди не очень понимают, наверное, о чем говорят, или мы с тобой, Игорь, не понимаем, что мы сейчас обсуждаем, еще хотелось бы привести пару цифр из SQL.
4485.00 4490.00 "Анатолий Кулаков" Оказывается, веб-сайты на SQL пишут 62% опрошенных.
4490.00 4491.00 "Анатолий Кулаков" Как тебе?
4491.00 4494.00 "Игорь Лабутин" Не, ну в любом веб-сайте, наверное, почти есть SQL.
4494.00 4497.00 "Игорь Лабутин" Но чтобы прям веб-сайты на SQL писать, нет, наверное, не надо.
4497.00 4503.00 "Анатолий Кулаков" На втором месте по популярности для SQL являются программы, которые работают с базой данных.
4503.00 4505.00 "Анатолий Кулаков" На втором, но на первом все-таки веб-сайты.
4505.00 4509.00 "Анатолий Кулаков" Ну и действительно, как ты сказал, маленькие утилитки 37% на SQL.
4509.00 4514.00 "Анатолий Кулаков" У меня вообще фантазия просто заканчивается, что такое маленькие утилитки на SQL.
4514.00 4520.00 "Игорь Лабутин" Ну, в общем, да, интересная статистика, она действительно непонятна в данном случае.
4520.00 4525.00 "Анатолий Кулаков" Еще для нас может быть интересна мобильная разработка, потому что у нас там есть тоже знакомые фреймворки.
4525.00 4528.00 "Анатолий Кулаков" На первом месте React Native, у него 42% рынка.
4528.00 4532.00 "Анатолий Кулаков" С 14% где-то в конце плетется Xamarin.
4532.00 4537.00 "Анатолий Кулаков" И еще один удивительный фреймворк, который мы любим и лелеем, это Unity.
4537.00 4538.00 "Анатолий Кулаков" 11% разработчиков.
4538.00 4540.00 "Анатолий Кулаков" Это, понятное дело, на нем пишут игры.
4540.00 4541.00 "Анатолий Кулаков" Ну, тоже неплохо.
4541.00 4543.00 "Игорь Лабутин" Да, ну, вполне неплохо на самом деле.
4543.00 4551.00 "Игорь Лабутин" То есть понятно, что React Native и тот же Flutter, который там на втором месте, это общеприменимый, так скажем, фреймворк.
4551.00 4555.00 "Игорь Лабутин" И, наверное, более легко используемый обычными веб-разработчиками.
4555.00 4561.00 "Игорь Лабутин" И понятно, что для писания на Xamarin все-таки нужен C#, и поэтому он, видимо, менее популярен.
4561.00 4566.00 "Игорь Лабутин" Ну, посмотрим, будет что-то лучше в месте, когда появится MAUI или нет.
4566.00 4570.00 "Анатолий Кулаков" Да, ну, хватит смотреть на остальных, давайте немножко ближе к самому C#.
4570.00 4572.00 "Анатолий Кулаков" Итак, что же творится внутри C#?
4572.00 4581.00 "Анатолий Кулаков" На опрос, какая версия C# вам используется на регулярной основе, 52%, абсолютное большинство, сказали, что это C# 8.
4581.00 4585.00 "Анатолий Кулаков" То есть это самая последняя, самая модная, самая хипстерская вещь, которая есть на рынке.
4585.00 4591.00 "Анатолий Кулаков" В спину ей дышит C# 7, с 48% опрошенных, и дальше все остальные.
4591.00 4593.00 "Анатолий Кулаков" Ну, в принципе, картина довольно-таки радостная, правда же?
4593.00 4601.00 "Анатолий Кулаков" Ну, мы используем всегда довольно последнюю версию, значит, мы не будем застаиваться где-то там на непонятных C# 5, хотя их тоже там 27% рынка.
4601.00 4605.00 "Игорь Лабутин" Не, ну, действительно прикольно, что сейчас стало попроще.
4605.00 4612.00 "Игорь Лабутин" На самом деле, мне кажется, что миграция на последующие версии и фреймворка, и студии, и языка стала как-то попроще, чем было раньше.
4612.00 4615.00 "Игорь Лабутин" То есть это сейчас уже не такой бигдил просто обновить.
4615.00 4620.00 "Игорь Лабутин" Вижу студию на очередной превью или майнер апдейт, и опачки, у тебя уже есть новая версия языка.
4620.00 4622.00 "Игорь Лабутин" Я думаю, что это сильно помогает переходу.
4622.00 4626.00 "Анатолий Кулаков" Именно так. А вот какой большой бигдил - это обновить на новую версию фреймворка.
4626.00 4629.00 "Анатолий Кулаков" И вот здесь цифры говорят сами за себя.
4629.00 4638.00 "Анатолий Кулаков" 75% продолжают жить на большом .NET фреймворке, 68% на .NET Core, и 13% используют Mono.
4638.00 4651.00 "Анатолий Кулаков" В принципе, переходить на .NET Core становится с каждым днем все легче и легче, а также нужнее и нужнее, но все-таки основная масса никуда не торопится, и 75% всех проектов пишутся еще на стричке .NET фреймворка.
4651.00 4654.00 "Игорь Лабутин" Не, ну надо понимать, что на самом деле чиселки не такие уж и разные.
4654.00 4662.00 "Игорь Лабутин" То есть 75% для .NET фреймворка и 68% для .NET Core, кажется, намекают на то, что большинство народу используют то и то.
4662.00 4668.00 "Игорь Лабутин" То есть все находятся где-то посерединке перехода, имея половину продукта на .NET фреймворке и половину на .NET Core.
4668.00 4674.00 "Игорь Лабутин" То есть я думаю, что мы будем видеть потихонечку перевес в сторону .NET Core в следующих годах.
4674.00 4676.00 "Игорь Лабутин" Ну и это нормально.
4676.00 4680.00 "Анатолий Кулаков" Дальше давай посмотрим на фреймворки, которые используются разработчиками на C#.
4680.00 4693.00 "Анатолий Кулаков" 55% OSP .NET Core, 43% опрошенных используют Entity Framework, 42% OSP .NET MVC, 31% пользуются WinForms, 26% - DubPF.
4693.00 4699.00 "Анатолий Кулаков" DubPF, кстати, не удалось вырвать победу на Desktop и у WinForms до сих пор, что довольно-таки, конечно, странно.
4699.00 4704.00 "Анатолий Кулаков" 22% используют AJA, 19% используют OSP.NET WebForms.
4704.00 4708.00 "Анатолий Кулаков" Вот еще один застарелый мамонт, который давно пора пристрелить.
4708.00 4718.00 "Анатолий Кулаков" 18% Unity 3D, 13% Xamarin, DubCF, который Microsoft отказалась портировать из-за того, что он нафиг никому не нужен, 12%.
4718.00 4726.00 "Анатолий Кулаков" Смотри, а вот и UVP, Universal Windows Platform, которая всячески пиарится и пихается в каждую дырку, 6%.
4726.00 4729.00 "Анатолий Кулаков" Вот он явно никому не нужен, вот его бы закопали лучше.
4729.00 4733.00 "Игорь Лабутин" Все так, а остальное, ну да, живет как-то.
4733.00 4745.00 "Игорь Лабутин" Немножко странно, что действительно всего 12% на WCF, но либо, видимо, многие уже успели переползти на REST и JRPG, либо действительно это не так часто используется, хотя слышно про него много.
4745.00 4749.00 "Анатолий Кулаков" Итак, тот же самый вопрос, какую операционную систему вы используете для разработки?
4749.00 4753.00 "Анатолий Кулаков" Предыдущий наш график был в общем по рынку, то есть среди всех опрошенных.
4753.00 4757.00 "Анатолий Кулаков" Давайте же посмотрим, что предпочитают разработчики именно на дотнете, разработчики C#.
4757.00 4761.00 "Анатолий Кулаков" 92% Windows. Очевидно.
4761.00 4765.00 "Анатолий Кулаков" 14% это macOS, все-таки хипстеры наступают.
4765.00 4772.00 "Анатолий Кулаков" Linux - 7%. Ну здесь уже картина более-менее совпадает с тем, что я наблюдаю среди коллег, уже никаких таких шоков нет.
4772.00 4788.00 "Игорь Лабутин" И мне, кстати, кажется, что здесь ожидать сильный рост доли, скажем, Linux может быть и нет смысла, потому что Microsoft сделала прекрасный WSL 2, который отлично позволяет запускать практически Linux внутри Windows.
4788.00 4792.00 "Игорь Лабутин" И мне интересно, что буду в этом случае указывать в таком вопросе.
4792.00 4797.00 "Игорь Лабутин" Скорее всего, все-таки Windows, поскольку Linux у меня есть, по сути, бесплатно внутри Windows.
4797.00 4813.00 "Анатолий Кулаков" Наверное, да. Эта интеграция уже настолько прозрачная, что многие пользователи уже могут даже не осознавать, что они используют Linux. Они просто скопировали со стека в какую-то командочку, запустили ее в Visual Studio Code, и все почему-то сработало. Вот тебе и весь WSL.
4813.00 4816.00 "Игорь Лабутин" Да. Что-нибудь еще у нас есть про C# части?
4816.00 4822.00 "Анатолий Кулаков" Да. Какую среду разработки? Самое интересное, какую среду разработки используют C# разработчики?
4822.00 4826.00 "Анатолий Кулаков" Visual Studio - 65%. JetBrains Rider - 20%.
4826.00 4830.00 "Анатолий Кулаков" Visual Studio Code - 11%. Оказывается, на C# под Visual Studio Code пишут.
4830.00 4833.00 "Анатолий Кулаков" Какой ужас. Visual Studio for Mac - бедные люди - 2%.
4833.00 4841.00 "Анатолий Кулаков" Здесь явно не выделен ReSharper. Было бы очень интересно посмотреть на цифры Visual Studio без ReSharper и Visual Studio с ReSharper.
4841.00 4850.00 "Анатолий Кулаков" Вот это меня вопрос очень сильно волнует, потому что я наблюдаю, что существует и тот, и тот лагерь, но абсолютно не имею понятия в их размерах, в их соотношении.
4850.00 4871.00 "Игорь Лабутин" Мне кажется, сейчас есть тренд, что с последними версиями Visual Studio иногда народ действительно начинает отказываться от ReSharper, потому что, ну, смотря кто какие фичи использует, но какие-то фичи появляются в студии и становятся их достаточными для какой-то минимальной разработки без удобства ReSharper, ценой того, что как бы все летает немножко побыстрее.
4871.00 4877.00 "Игорь Лабутин" Поэтому нам было бы действительно интересно посмотреть, как это влияет и как это, главное, меняется со временем.
4877.00 4884.00 "Анатолий Кулаков" Я думаю, какая-то внутренняя статистика у JetBrains по-любому должна быть, потому что они явно какую-то телеметрию собирают, надо их допытать.
4884.00 4888.00 "Анатолий Кулаков" Если нас кто-то слушает из JetBrains, прийдите, расскажите, мы все в ожидании.
4888.00 4892.00 "Анатолий Кулаков" Какие юнит-тест-фреймворки используются для тестирования вашего кода?
4892.00 4895.00 "Анатолий Кулаков" Здесь тоже у меня какой-то неприятный сюрприз был.
4895.00 4897.00 "Анатолий Кулаков" Оказывается, 37% у NUnit.
4897.00 4909.00 "Анатолий Кулаков" Мне казалось, его уже давно закопали, я не пойму, это Legacy или что это такое, потому что его ближайший конкурент XUnit, которым тестируется весь .NET Core, это 32%, второе место.
4909.00 4913.00 "Игорь Лабутин" Я тут как раз-таки сильно разделяю эту позицию того, что получилось в голосовании.
4913.00 4917.00 "Игорь Лабутин" Я всеми руками только за NUnit, XUnit мне категорически не нравится.
4917.00 4922.00 "Игорь Лабутин" К счастью, архитектурных решений и, в общем, неудобствам того, как там все многое сделано.
4922.00 4929.00 "Игорь Лабутин" У нас был некоторый зоопарк какое-то время, и XUnit, и NUnit, а сейчас все переводим на третий NUnit, и, в общем, всячески довольны.
4929.00 4933.00 "Игорь Лабутин" То есть, я вполне поддерживаю такой тренд.
4933.00 4942.00 "Анатолий Кулаков" MS-тест 20% и MS-тест 2, о котором, кстати, тоже недавно рассказывали, 9%, то есть вместе это 29% за MS-тестом.
4942.00 4947.00 "Анатолий Кулаков" Они практически догнали наших лидеров, что, согласись, неплохо.
4947.00 4952.00 "Игорь Лабутин" Да, больше всего в этой части мне нравится, я не пишу юнит-тесты в 16%.
4952.00 4954.00 "Анатолий Кулаков" Вот, вот куда нужно вкладывать основные наши усилия.
4954.00 4957.00 "Анатолий Кулаков" По пропаганде, по обучению, по книгам и курсам.
4957.00 4962.00 "Анатолий Кулаков" Заставлять писать людей юнит-тесты, потому что 16% - это просто позор какой-то.
4962.00 4964.00 "Анатолий Кулаков" Это довольно большая цифра.
4964.00 4968.00 "Игорь Лабутин" Ну, на самом деле, сильно зависит от того, какой C#-код вы пишете.
4968.00 4973.00 "Игорь Лабутин" То есть, если вы как раз-таки из лагеря тех, кто пишет маленькие тулзы, то там действительно, может, юнит-тесты особо не нужны.
4973.00 4976.00 "Игорь Лабутин" Но все равно 16% кажется довольно большой.
4976.00 4978.00 "Анатолий Кулаков" Да, именно так.
4978.00 4982.00 "Анатолий Кулаков" Хватит с C#, давай немножко чем отвлеченных в статистике посмотрим.
4982.00 4986.00 "Анатолий Кулаков" Итак, в какое время вы обычно начинаете ваш рабочий день?
4986.00 4988.00 "Анатолий Кулаков" Здесь вот я бы ни за что не догадался.
4988.00 4995.00 "Анатолий Кулаков" Оказывается, большинство, 33% опрошенных начинают свой день с 9 до 10 утра.
4995.00 4998.00 "Анатолий Кулаков" И за ними следует 27% с 8 до 9 утра.
4998.00 5004.00 "Анатолий Кулаков" То есть, если мы берем время от 8 до 10 утра, это получается 60% всех опрошенных.
5004.00 5007.00 "Анатолий Кулаков" То есть, 60% всех опрошенных до 10 утра уже начинают работать.
5007.00 5008.00 "Игорь Лабутин" Удивительно.
5008.00 5015.00 "Игорь Лабутин" Нет, у нас примерно, наверное, полпроекта где-то, минимум к этому времени уже точно в офисе.
5015.00 5017.00 "Игорь Лабутин" Ну, когда мы были еще в офисе, понятно.
5017.00 5019.00 "Игорь Лабутин" Вполне ожидаемо.
5019.00 5021.00 "Игорь Лабутин" У вас есть какие-то обязательные часы прихода?
5021.00 5031.00 "Игорь Лабутин" У нас есть, скажем так, негласное в каком-то смысле правило, что где-то с 11 до 5 в среднем назначаются митинги.
5031.00 5034.00 "Игорь Лабутин" Это то время, когда большинство народу на работе.
5034.00 5040.00 "Игорь Лабутин" Плюс с учетом того, что мы работаем с Европой, и это как-то с ними еще синхронизировано с их обычной доступностью.
5040.00 5045.00 "Игорь Лабутин" В целом нет, у нас есть те, кто любит приходить на работу в 7 и уходить, соответственно.
5045.00 5047.00 "Игорь Лабутин" Есть те, кто любит приходить на работу в 12.
5047.00 5049.00 "Игорь Лабутин" Такое тоже, конечно, бывает.
5049.00 5051.00 "Игорь Лабутин" Но основная масса где-то с 8 до 10 на работе.
5051.00 5052.00 "Анатолий Кулаков" Занятно.
5052.00 5054.00 "Анатолий Кулаков" Еще одна интересная цифра.
5054.00 5060.00 "Анатолий Кулаков" Сколько времени вы проводите на программирование ваших сайт-проектов, помимо основной работы?
5060.00 5062.00 "Анатолий Кулаков" То есть, сколько времени вы тратите на ваши хобби-проекты?
5062.00 5068.00 "Анатолий Кулаков" И получается, что 38% опрошенных тратят где-то от 3 до 8 часов в неделю.
5068.00 5072.00 "Анатолий Кулаков" То есть, это такой полноценный рабочий день чисто на хобби-проекты.
5072.00 5074.00 "Анатолий Кулаков" Что, мне кажется, довольно-таки много.
5074.00 5076.00 "Игорь Лабутин" У меня, к сожалению, не получается столько тратить.
5076.00 5078.00 "Игорь Лабутин" А хотелось бы.
5078.00 5080.00 "Анатолий Кулаков" Да, я бы тоже не отказался. Надо что-то с этим делать.
5080.00 5084.00 "Анатолий Кулаков" Какие источники информации вы используете?
5084.00 5087.00 "Анатолий Кулаков" Как раз-таки доходим до того, с чего мы начинали.
5087.00 5089.00 "Анатолий Кулаков" Большинство используют всякие форумы.
5089.00 5093.00 "Анатолий Кулаков" Reddit, Stackoverflow. Это 73% опрошенных.
5093.00 5096.00 "Анатолий Кулаков" 67% всех опрошенных используют социальные сети.
5096.00 5100.00 "Анатолий Кулаков" Согласись, очень интересный источник для профессиональной информации.
5100.00 5106.00 "Игорь Лабутин" Да, я не ожидаю видеть ответы на C# вопросы в ВКонтакте, в Facebook или еще где-то.
5106.00 5107.00 "Игорь Лабутин" Ну, почему нет?
5107.00 5111.00 "Анатолий Кулаков" Далее, агрегаторы новостей. 60%.
5111.00 5114.00 "Анатолий Кулаков" 53% книги. Вот, наконец, книги.
5114.00 5118.00 "Анатолий Кулаков" 53%. Ну, в принципе, немало в наш современный электронный век.
5118.00 5123.00 "Анатолий Кулаков" За ними идут Вики и 33% игр используют подкасты.
5123.00 5125.00 "Анатолий Кулаков" В общем, нам еще есть куда стремиться.
5125.00 5129.00 "Анатолий Кулаков" Я думаю, что мы еще не достигли вот этих 33% из всех опрошенных.
5129.00 5131.00 "Анатолий Кулаков" Но у нас есть все шансы. Будем стараться.
5131.00 5133.00 "Анатолий Кулаков" Не зря работаем. Да.
5133.00 5136.00 "Анатолий Кулаков" Какая настоящая причина того, что вы посещаете конференции?
5136.00 5139.00 "Анатолий Кулаков" Тоже многих организаторов конференции мучают такие вопросы.
5139.00 5141.00 "Анатолий Кулаков" И, наконец, мы получили все объемлющие ответы.
5141.00 5146.00 "Анатолий Кулаков" Получить знания. 90% уверены в этом или пытаются себя в этом убедить.
5146.00 5149.00 "Анатолий Кулаков" Нетвокинг. 53%.
5149.00 5152.00 "Анатолий Кулаков" Наслаждение атмосферой. 39%.
5152.00 5155.00 "Анатолий Кулаков" Интересная причина. Я пошел туда просто, чтобы атмосферой понаслуждаться.
5155.00 5159.00 "Анатолий Кулаков" То есть я не информацию получаю, не общаюсь, а вот атмосфера мне нравится.
5159.00 5161.00 "Игорь Лабутин" Да, в принципе, прикольно.
5161.00 5164.00 "Игорь Лабутин" Я на некоторых конференциях тоже по такому принципу ходил.
5164.00 5167.00 "Игорь Лабутин" Было такое. Просто прикольно потусить в толпе умных людей.
5167.00 5169.00 "Игорь Лабутин" Может, что услышишь интересное.
5169.00 5177.00 "Игорь Лабутин" Даже если ты сам не собираешься общаться и не собираешься задавать вопросы, просто потупить в дискуссионных зонах или на докладах и послушать других умных людей.
5177.00 5179.00 "Игорь Лабутин" Прикольно. Да.
5179.00 5181.00 "Анатолий Кулаков" И покататься в тревел.
5181.00 5183.00 "Анатолий Кулаков" Это 21% опрошенных. Да.
5183.00 5186.00 "Анатолий Кулаков" Другая интересная тема, которая нас непосредственно касается, это метапы.
5186.00 5190.00 "Анатолий Кулаков" 35% рассказали, что они посещают регулярно локальные метапы.
5190.00 5195.00 "Анатолий Кулаков" 22% сказали, что они никогда не посещали и не планируют посещать.
5195.00 5200.00 "Анатолий Кулаков" И 16% - что они все-таки хотят посещать, но пока еще почему-то не собрались.
5200.00 5202.00 "Анатолий Кулаков" Тоже у нас большие перспективы к росту.
5202.00 5207.00 "Анатолий Кулаков" Надо расти и окучивать тех, кто почему-то не хочет или почему-то еще не созрел.
5207.00 5209.00 "Анатолий Кулаков" Срочно приходите все на ваши локальные метапы.
5209.00 5211.00 "Анатолий Кулаков" Это интересно и познавательно.
5211.00 5213.00 "Анатолий Кулаков" Далее. Есть ли у вас домашние животные?
5213.00 5217.00 "Анатолий Кулаков" 60% призналось, что никаких домашних животных они не имеют.
5217.00 5220.00 "Анатолий Кулаков" Собаки есть у 20% и кошки есть у 20%.
5220.00 5224.00 "Анатолий Кулаков" То есть у программистов никаких любимчиков среди животных не выделяется.
5224.00 5226.00 "Игорь Лабутин" Какие-то очень ровные проценты получились.
5226.00 5231.00 "Игорь Лабутин" Такое ощущение, что спросили 10 человек, а из них 3 ответила "нет" и по одному ответила "да".
5231.00 5233.00 "Игорь Лабутин" Как-то прям так ровненько-ровненько.
5233.00 5236.00 "Анатолий Кулаков" 20 тысяч разработчиков. Не путай статистику.
5236.00 5238.00 "Анатолий Кулаков" 20 тысяч разработчиков было опрошено.
5238.00 5241.00 "Анатолий Кулаков" Я думаю, что 20% - это те, кто изучает машин ленинг.
5241.00 5244.00 "Анатолий Кулаков" Им нужно тренировать свои нейросеточки на распознавании кошечек и собачек.
5244.00 5249.00 "Анатолий Кулаков" Поэтому они завели ровно одну кошку, одну собаку и теперь могут отвечать, что у меня есть и то, и то.
5249.00 5251.00 "Игорь Лабутин" Ну да, кстати, точно. Тоже вариант.
5251.00 5254.00 "Анатолий Кулаков" Какому хобби вы придерживаетесь в ваше свободное время?
5254.00 5260.00 "Анатолий Кулаков" 58% продолжают программировать в ваше свободное время. Отлично, мужики, так держать.
5260.00 5264.00 "Анатолий Кулаков" 49% - видеоигры. Где вы находите время на это?
5264.00 5266.00 "Анатолий Кулаков" 38% слушают музыку.
5266.00 5269.00 "Анатолий Кулаков" Вот так выглядит тройка лидеров.
5269.00 5277.00 "Анатолий Кулаков" А теперь самая важная часть, самый важный пункт, который, наверное, прольет свет на многие ответы из этого вопроса.
5277.00 5280.00 "Анатолий Кулаков" Из каких стран были разработчики, отвечающие на этот вопрос?
5280.00 5282.00 "Анатолий Кулаков" Китай - 20%.
5282.00 5286.00 "Анатолий Кулаков" Соединенные государства Америки - 19%.
5286.00 5288.00 "Анатолий Кулаков" Индия - 17%.
5288.00 5289.00 "Анатолий Кулаков" Япония - 9%.
5289.00 5291.00 "Анатолий Кулаков" И Россия - 7%.
5291.00 5292.00 "Анатолий Кулаков" И дальше меньше.
5292.00 5297.00 "Игорь Лабутин" Интересно, выбиралось количество пропорционально чему-нибудь?
5297.00 5299.00 "Игорь Лабутин" Не знаю, населению или?
5299.00 5302.00 "Игорь Лабутин" Или просто потому, что так сложилось?
5302.00 5305.00 "Игорь Лабутин" Китайцы больше любят отвечать на вопросы.
5305.00 5308.00 "Анатолий Кулаков" Насколько я понял из методологии, что это просто случайность.
5308.00 5316.00 "Анатолий Кулаков" JetBrains пытались равномерно разбросать по локальным социальным сетям и по своим кастомерам всю рекламу.
5316.00 5318.00 "Игорь Лабутин" Интересно получилось.
5318.00 5324.00 "Игорь Лабутин" Ну, непонятно, насколько все эти результаты применимы конкретно к российской практике, потому что всего 7% голосовало.
5324.00 5334.00 "Игорь Лабутин" Ну, с другой стороны, может быть, мир программиста достаточно однороден, и все примерно тратят 3-8 часов в неделю на хобби-проекты по программированию.
5334.00 5336.00 "Анатолий Кулаков" Ну, вообще вопросы довольно-таки интересные.
5336.00 5342.00 "Анатолий Кулаков" Я думаю, сейчас мы немножко подкопим аудиторию и проведем что-нибудь вроде того.
5342.00 5348.00 "Игорь Лабутин" Да, я считаю, что нужна аудитория в Китае, в Штатах, в Индии, в Японии перед тем, как мы сможем проводить что-то подобное.
5348.00 5350.00 "Игорь Лабутин" Но мы будем стараться.
5350.00 5358.00 "Анатолий Кулаков" А чтобы нам подтянуть аудиторию, мы снова запускаем конкурс по раздариванию лицензий от нашего любимого JetBrains.
5358.00 5365.00 "Анатолий Кулаков" Опыт прошлого конкурса показал, что лицензии нужны, лицензии важны, поэтому мы решили повторить.
5365.00 5367.00 "Анатолий Кулаков" Условия те же самые.
5367.00 5372.00 "Анатолий Кулаков" Напоминаю, мы будем разыгрывать 3 лицензии от JetBrains на любой их продукт.
5372.00 5378.00 "Анатолий Кулаков" Первую лицензию получит рандомный человек из группы, которая залайкает этот пост ВКонтакте.
5378.00 5383.00 "Анатолий Кулаков" Вторую лицензию получит рандомный человек из группы, которая пошарит этот пост ВКонтакте.
5383.00 5388.00 "Анатолий Кулаков" Третью лицензию получит человек, который оставит свой комментарий под YouTube роликом.
5388.00 5394.00 "Анатолий Кулаков" Я напоминаю, что у нас есть еще YouTube плейлист на канале DotNet.ru, где мы выкладываем все наши подкасты.
5394.00 5400.00 "Анатолий Кулаков" Так вот, третью лицензию получит рандомный человек, который оставит любой комментарий под роликом на YouTube.
5400.00 5407.00 "Анатолий Кулаков" Пишите ваши отзывы, что вам нравится, что вам не нравится, или просто о вашей погоде, или в каком городе вы нас слушаете.
5407.00 5414.00 "Анатолий Кулаков" Нам вся информация очень интересна, потому что очень сложно работать в пустой монитор, и хотелось бы хоть какого-то фидбэка получать от вас.
5414.00 5418.00 "Анатолий Кулаков" Поэтому будем рады любым комментариям от вас. Пишите нам.
5418.00 5431.00 "Игорь Лабутин" Да, и напомним, что сегодня мы поговорили про очередные новинки DotNet 5, которые подемножку движутся к релизу, но есть еще достаточно времени, чтобы что-нибудь интересное туда анонсировать.
5431.00 5438.00 "Игорь Лабутин" То есть, все, что на данный момент известно про DotNet 5 и F-Core, а SP-NetCore мы обсудили.
5438.00 5447.00 "Игорь Лабутин" Поговорили про новые partial методы, про то, как их стараются сделать максимально гибкими и помочь source-генераторам их использовать.
5447.00 5457.00 "Игорь Лабутин" И посмотрели, что делается с жрпц-поддержкой в DotNet Stake, жрпц-вебом, и как мы сможем всем этим пользоваться из front-end приложений.
5457.00 5467.00 "Игорь Лабутин" По части тулинга мы посмотрели на новинку Project TIE для локального запуска всех ваших приложений и дипломента их куда-нибудь.
5467.00 5472.00 "Игорь Лабутин" Глянули, как мониторить ваши приложения, которые поставлены далеко в продакшен с помощью DotNet Monitor.
5472.00 5477.00 "Игорь Лабутин" Посмотрели, что новенького появилось в ReSharper, новой версии.
5477.00 5486.00 "Игорь Лабутин" И дальше углубились в темы, которые меньше связаны с кодом, а именно новый marketplace из DKB от Aaron Stennard.
5486.00 5491.00 "Игорь Лабутин" Super Linter для GitHub. Приходите помочь C# Linter.
5491.00 5495.00 "Игорь Лабутин" Книжки, JetBrains State of Developer Ecosystem отчет.
5495.00 5499.00 "Игорь Лабутин" В общем, много разнообразнейшей информации сегодня мы успели обсудить.
5499.00 5503.00 "Анатолий Кулаков" Да, за этот месяц накопилось огромное число новостей, поэтому мы получились такие длинные.
5503.00 5506.00 "Анатолий Кулаков" Постараемся больше так надолго не пропадать.
5506.00 5509.00 "Игорь Лабутин" На этом прощаемся тогда с вами. Пока.
5509.00 5516.00 "Анатолий Кулаков" Да, всем пока. Информацию о нашем подкасте вы можете найти на сайте radio.dotnet.ru.
5516.00 5521.00 "Анатолий Кулаков" Подписывайтесь на наши выпуски и пишите комментарии, участвуйте в розыгрышах лицензий.
5521.00 5523.00 "Анатолий Кулаков" До новых встреч. Пока.
