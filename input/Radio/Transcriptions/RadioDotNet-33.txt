0.00 3.08 None Здравия, други!
3.08 9.48 "Анатолий Кулаков" В эфире Радио.нет выпуск номер 33.
9.48 13.08 "Анатолий Кулаков" В студии для вас сегодня будут его бессмертные ведущие
13.08 15.32 "Игорь Лабутин" Анатолий Кулаков и Игорь Лабутин.
15.32 27.04 "Анатолий Кулаков" Всем привет! Прежде всего, большое спасибо всем, кто нас поддерживает на Patreon и Boosty, мы очень рады вашей помощи, любой, посильной, заходите, смотрите, помогайте.
27.04 34.64 "Анатолий Кулаков" И самые наши любимые патроны – Александр, Сергей, Владислав, вам огромнейшее отдельное большое спасибо.
34.64 37.96 "Анатолий Кулаков" Ну что ж, давай посмотрим, что у нас есть на сегодня.
37.96 51.92 "Анатолий Кулаков" Микрософт наконец-то ожил, начал клепать релизы, как ни в себя, то есть превьюшки, готовится к релизу Дотнет шестого и снова выдал нам пачечку статей с новинками.
51.92 67.56 "Анатолий Кулаков" Я так и думаю, хорошо, что он их выдает по чуть-чуть по очереди, потому что я как представлю, сколько нам во время релиза будет подводить итоги, сколько будет обсуждать, мы точно так подробно и так тщательно обо всем об этом не поговорим, потому что фич выходит огромная лавина.
67.56 71.60 "Анатолий Кулаков" Поэтому хорошо, что у нас есть шанс это растянуть хотя бы на пару сезонов.
71.60 76.92 "Игорь Лабутин" Ну про сезон этот ты, конечно, загнул, но на несколько выпусков мы это точно растягиваем.
76.92 88.00 "Игорь Лабутин" В этот раз вышел Дотнет 6 превью 6 и там, как обычно, довольно много изменений в самом Дотнете и в Aspen Core и в Entity Framework, и мы, как обычно, пойдем по порядку.
88.00 90.00 "Игорь Лабутин" Начнем с основного SDK.
90.00 102.04 "Игорь Лабутин" Мы в прошлый раз говорили про такую штуку как Workloads, появилась новая команда, можно написать dotnet, пробел, workload, пробел, там, install, либо list, либо еще что-то, и вот теперь появились три новых команды.
102.04 107.12 "Игорь Лабутин" Теперь можно сказать dotnet workload search и поискать workload, который можно поставить.
107.12 111.92 "Игорь Лабутин" Можно сказать dotnet workload addinstall и убрать тот workload, который вам больше не нужен.
111.92 113.52 "Игорь Лабутин" Раньше так было сделать нельзя.
113.52 117.20 "Игорь Лабутин" И самая главная команда это dotnet workload repair.
117.20 131.68 "Игорь Лабутин" Утверждается, что если у вас во время инсталляции что-то пошло не так и вам нужно что-нибудь пофиксить, или вы там, не знаю, перегрызли ноутбук посередине инсталляции workload, то вот теперь команда repair доставит вам все то, что вы забыли доставить или по какой-то причине не смогли.
131.68 136.20 "Игорь Лабутин" В общем, если какой-то workload у вас не работает, используйте dotnet workload repair.
136.20 155.12 "Игорь Лабутин" По tools, кроме workload, подтянулся еще crossgen, то есть если вы используете предкомпиляцию, то есть всякие ahead-of-time compilation либо что-то подобное, то мы, по-моему, выпуска три назад обсуждали, что такое crossgen2 и чем он круче и лучше, чем crossgen.
155.12 160.60 "Игорь Лабутин" Вот теперь наконец-таки crossgen2 полностью заменил crossgen, crossgen теперь не поставляется внутри SDK.
160.60 161.60 "Игорь Лабутин" Все пользуемся crossgen2.
161.60 163.92 "Игорь Лабутин" И по tools, как ни странно, это все.
163.92 165.52 "Игорь Лабутин" Дальше по библиотекам.
165.52 175.80 "Игорь Лабутин" По библиотекам, ну то есть по базовой библиотеке классов изменений тоже не так много, и основное изменение — это изменена логика работы threadpool.
175.80 192.20 "Игорь Лабутин" Если вы исследовали, как устроен threadpool, как он работает, то вы, наверное, знаете, что по мере того, как вы все больше и больше кидаете тасков на обработку в threadpool, threadpool на самом деле ленивый и он не будет создавать сразу много потоков.
192.20 204.16 "Игорь Лабутин" У него есть некоторая внутренняя логика, которая создает поток, по-моему, не чаще, чем раз в секунду, если я не запомню, что предотвращает резкий взрывной рост потоков, если у вас накидали очень много задачек в threadpool.
204.16 219.36 "Игорь Лабутин" Так вот, в некоторых сценариях на самом деле это бредно, и Microsoft посчитал, что есть как минимум один сценарий, где можно на самом деле создавать потоки быстрее, и это сценарий sync over async.
219.36 240.64 "Игорь Лабутин" То есть если у вас есть какая-то асинхронная операция, но вы ее ждете синхронно, вызывая какой-нибудь get result на таске, либо .wait, либо что-то подобное, и вот в этом случае вы блокируете поток в threadpool полностью, пока не закончится, и тогда такие потоки как бы можно не считать, когда вы рассчитываете, сколько надо потоков добавить в threadpool.
240.64 267.20 "Игорь Лабутин" Вот в результате сейчас логика стала такой, что если threadpool детексит, что часть его потоков заблочена на любых методах из класса task, то есть task.wait, task.getresult, ну и прочие такие вокруг них, то там включаются дополнительные heuristics на тему того, что можно фигачить потоки быстрее новые, но тоже там есть дальше экспоненциальный рост задержки в какой-то момент.
267.20 269.04 "Игорь Лабутин" Все это настраивается.
269.04 273.92 "Игорь Лабутин" Если вам очень хочется тонко настроить, для этого всего есть специальные опции через AppContext.
273.92 282.40 "Игорь Лабутин" Можно почитать в анонсе, там все четко есть линки на нужные pull-requests и на прям кусок кода, где написано, как это все конфигурить.
282.40 288.76 "Игорь Лабутин" Так что теперь по идее, если вы используете sync over sync, то threadpool будет страдать меньше.
288.76 292.48 "Игорь Лабутин" Дальше интересное изменение в рантайме.
292.48 293.92 "Игорь Лабутин" С интересным названием.
293.92 296.84 "Игорь Лабутин" Называется он w-крышечка x-memory policy.
296.84 300.96 "Игорь Лабутин" Ничего не понятно, пока не прочитаешь расшифровку от Microsoft.
300.96 303.80 "Игорь Лабутин" Это на самом деле называется write-exclusive-execute-memory policy.
303.80 308.32 "Игорь Лабутин" И это было нужно сделать ради поддержки процессоров Apple.
308.32 314.24 "Игорь Лабутин" В процессорах Apple есть такая штука, что кусочек памяти не может быть одновременно записываемым и при этом исполнимым.
314.24 320.28 "Игорь Лабутин" Потому что это прямой путь ко всяким атакам на переполнение буфера и так далее.
320.28 323.92 "Игорь Лабутин" Вы переполняете буфер, пишете туда что-нибудь и тут же это исполняете, как код.
323.92 324.92 "Игорь Лабутин" Так нельзя.
324.92 336.04 "Игорь Лабутин" И поэтому теперь в дотнете есть поддержка этой штуки, которая обязательно включается на macOS, но можно опционально ее включить и на любых других инварментах в шестом дотнете.
336.04 342.52 "Игорь Лабутин" И скорее всего в седьмом дотнете они это сделают в дефолтном значении в принципе на всех платформах.
342.52 350.72 "Игорь Лабутин" И по сути у вас любая страничка памяти может быть помечена либо как для чтения записи, это просто обычные ваши данные в памяти, либо для чтения исполнения.
350.72 351.96 "Игорь Лабутин" Это обычно код.
351.96 358.36 "Игорь Лабутин" Интересно, пока не знаю, как будет происходить всякие emit кода во время рантайма.
358.36 362.64 "Игорь Лабутин" Скорее всего, конечно, там все это поддержано, надо просто почитать внимательно, как это сделано.
362.64 363.64 "Игорь Лабутин" Не разбирался.
363.64 369.12 "Игорь Лабутин" Ну и последнее изменение в большом нашем SDK - это код.gem.
369.12 373.56 "Игорь Лабутин" Там, как обычно, огромное количество изменений.
373.56 379.08 "Игорь Лабутин" И в частности они довольно сильно работают над тем, что называется Dynamic Profile Guided Optimization.
379.08 391.96 "Игорь Лабутин" То есть это штука, которая позволяет оптимизировать определенный сценарий работы вашего приложения путем сбора некоторой статистики и дальше предоптимизации преджита вашего кода в соответствии с этой статистикой.
391.96 395.20 "Игорь Лабутин" Вот сейчас вокруг этого довольно много работы идет.
395.20 399.36 "Игорь Лабутин" Ну и помимо этого, тоже довольно существенные изменения в код.gem происходят.
399.36 403.20 "Игорь Лабутин" Все ради перформанса, все ради скорости и так далее.
403.20 411.84 "Игорь Лабутин" Так что, если вам интересна тема кода.gem и что там делается, читайте внимательно, там есть подробнейший список ссылок на все ищешь на GitHub.
411.84 414.44 "Игорь Лабутин" И на этом, в основном, SDK на самом деле все.
414.44 423.84 "Игорь Лабутин" Чувствуется, что релиз потихонечку к нам приближается, осталось сколько, месяца три до него, и список GNG все меньше и меньше, что ожидаемо.
423.84 429.04 "Анатолий Кулаков" Что же у нас происходит как раз в SPNet, рвет ли там Blazor всех подряд?
429.04 432.04 "Игорь Лабутин" Вот как раз в SPNet получилось очень забавно.
432.04 437.12 "Игорь Лабутин" Я когда читал, первым я читал про SDK, и было понятно, окей, изменений мало или близко.
437.12 452.48 "Игорь Лабутин" Но открыв статью про SPNet Core, там прям огромное количество изменений, но они все, такое ощущение, что какие-то такие логические кусочки, завершающие те или иные штуки, которые мы уже обсуждали и которые команда Microsoft уже сделала.
452.48 455.52 "Игорь Лабутин" То есть каких-то существенных больших изменений, мне кажется, нету.
455.52 459.92 "Игорь Лабутин" Есть только мелкие, удобные или логические вещи.
459.92 460.92 "Игорь Лабутин" Действительно Blazor.
460.92 465.60 "Игорь Лабутин" В Blazor первой новостью идет то, что улучшили существенно, улучшили accessibility.
465.60 476.76 "Игорь Лабутин" То есть теперь все элементы, ну или может быть не все, но многие, более аккуратно работают со скрин-ридерами, и соответственно ваше Blazor-положение будет более accessible.
476.76 490.92 "Игорь Лабутин" И вторая штука про Blazor это то, что если у вас есть Blazor-компоненты, и она принимает какие-то параметры, то теперь можно их пометить, что они required, и тогда они будут просто обязательно при использовании этого компонента.
490.92 493.32 "Игорь Лабутин" Дальше, что еще?
493.32 498.04 "Игорь Лабутин" О, тоже в сторону Blazor улучшили interop с JavaScript.
498.04 507.52 "Игорь Лабутин" Если у вас были массивы байтов, которые вы хотели передавать из JavaScript в ваш Blazor и обратно, то раньше это делалось с помощью Base64 строчек.
507.52 524.00 "Игорь Лабутин" Теперь, соответственно, byte_array в C# будет преобразовываться в uint8_array в JavaScript, таким образом будет избегаться сериализации Base64, JSON и так далее, и это должно быть действительно улучшено в скорости.
524.00 532.16 "Игорь Лабутин" Не очень знаю, зачем вам может потребоваться передавать именно byte_array, но, наверное, это частый кейс, там, картинки какие-нибудь рисовать, не знаю.
532.16 537.28 "Игорь Лабутин" Продолжая тему frontend, обновили темплейт Angular до Angular 12.
537.28 541.68 "Игорь Лабутин" И дальше начинается бэкэндная часть.
541.68 544.88 "Игорь Лабутин" Вы, наверное, много читали и слышали про minimal APIs.
544.88 565.68 "Игорь Лабутин" Это то, над чем сейчас, мне кажется, работает основная команда ispnet core, или, я бы сказал, наиболее видимая часть работы ispnet команды — это всякие minimal APIs, когда вы можете минимальными средствами написать там точкам map.get и вашу лямбдочку без указания на всех атрибутов и так далее.
565.68 568.36 "Игорь Лабутин" Это было и в прошлом подкасте, и, по-моему, в позапрошлом.
568.36 572.28 "Игорь Лабутин" Теперь, соответственно, завезли туда еще и open API поддержку.
572.28 589.76 "Игорь Лабутин" То есть теперь вы можете написать в вашем configure services методе addSwaggerGen, а потом в configure методе написать useSwagger и useSwaggerUI, указав, соответственно, url, по которому должен быть SwaggerUI доступен, и он сам соберет в том числе все эти minimal API endpoints, а не только контроллеры.
589.76 592.64 "Игорь Лабутин" И все это красиво покажет, как обычно.
592.64 596.76 "Игорь Лабутин" И они там продолжают дальше работу над тем, чтобы все нужные атрибуты поддержать.
596.76 599.36 "Игорь Лабутин" С minimal API связана еще одна штука.
599.36 613.36 "Игорь Лабутин" Раньше, ну не то что раньше, вам иногда нужно внутри даже такой минимальной лямбды указать, что вы хотите использовать какую-то зависимость из вашего контейнера зависимости.
613.36 623.96 "Игорь Лабутин" Традиционно это можно было сделать, указав, собственно, интерфейс и написав, ну или класс, и написав перед ним атрибутик from services, подсказывая тем самым рантайму, что нужно это взять из контейнера зависимости.
623.96 633.64 "Игорь Лабутин" Теперь можно этот атрибут не указывать, потому что Microsoft добавил новую штуку, новый интерфейс под названием очень странным isServiceProvider.
633.64 651.52 "Игорь Лабутин" В котором есть метод, который на удивление называется isService, и теперь, соответственно, можно спросить у контейнера вот этим интерфейсом, с помощью этого интерфейса, является ли указанный тип сервисом внутри этого контейнера, то есть зарегистрирован ли он.
651.52 664.28 "Игорь Лабутин" Раньше это можно было сделать по идее через getServices, ну типа получить все сервисы и проверить, что там есть какой-нибудь нужный, а теперь можно просто проверить на уровне, а есть ли регистрация для такого типа, и если есть, тогда уже, честно говоря, getServices.
664.28 667.24 "Игорь Лабутин" Если нет, ну делать что-то, что вы делаете, если.
667.24 672.04 "Анатолий Кулаков" То есть я правильно понимаю, что это метод, который в некоторых контейнерах называется isRegister?
672.04 673.04 "Анатолий Кулаков" Да.
673.04 675.84 "Анатолий Кулаков" Зарегистрирован или нет, проверить, это такой сервис?
675.84 682.80 "Игорь Лабутин" Да, и основной комментарий к SPNetCore новости про PreviewShade как раз таки, блин, ну что же за имя-то вы выбрали?
682.80 694.84 "Игорь Лабутин" Можно было там isServiceProvider, isRegistered, isRegistration, ну короче, все что угодно, но ServiceProvider и Service это как-то странное название.
694.84 697.60 "Игорь Лабутин" Ну, что выбрали, то выбрали, в принципе до релиза еще есть время поменять.
697.60 698.60 "Игорь Лабутин" Пошли в более.
698.60 703.80 "Анатолий Кулаков" Действительно, как будто есть что-то еще, да, кроме не сервиса.
703.80 714.16 "Игорь Лабутин" Ну да, то есть как-то по мне просто интерфейс по сути называется как будто, то есть, интерфейс isServiceProvider isService имеет метод isService.
714.16 715.64 "Игорь Лабутин" Прям как-то странно.
715.64 719.56 "Игорь Лабутин" Ну, то есть не могли ничего придумать, кроме как просто имя метода запендить.
719.56 720.56 "Игорь Лабутин" Непонятно.
720.56 722.28 "Игорь Лабутин" Ладно, пошли поглубже.
722.28 723.76 "Игорь Лабутин" Поглубже это в Kestrel.
723.76 735.60 "Игорь Лабутин" Мы обсуждали, по-моему, подкасты три назад про то, что Kestrel стал практически полностью конфигурируемым с точки зрения опций, так вот оказалось есть еще одна штука, которую нельзя было раньше конфигурить, теперь можно.
735.60 745.48 "Игорь Лабутин" Можно теперь сконфигурить сокет, на котором Kestrel ждет ваших коннектов, ну в смысле клиентских коннектов, то есть сокет, на котором вызывается, собственно, Accept.
745.48 758.04 "Игорь Лабутин" Его можно теперь сконфигурить через лямбдочку, причем в этой лямбдочке можно вообще самому создать сокет и вернуть этот сокет после нужных вам опций, и Kestrel будет на этом сокете все же делать дальше.
758.04 771.12 "Игорь Лабутин" А можно вызвать стандартный helper метод статический createDefaultBoundListenSocket и уже результирующий сокет его как-то подключить, как вам нужно, и потом его вернуть, чтобы дальше на нем все Kestrel слушал.
771.12 780.48 "Игорь Лабутин" То есть если вам какие-то очень специфичные опции нужны, типа там длины очереди ожидания или еще чего-нибудь такого на сокетах, то вот это вам туда.
780.48 786.60 "Игорь Лабутин" Теперь есть изменения в сторону логинга, ну даже это не логинг, а диагностика всяких.
786.60 793.08 "Игорь Лабутин" Как вы знаете, в Kestrel, ну вообще в pipeline ISP.net core есть такая штука, как Request.
793.08 821.64 "Игорь Лабутин" Собственно, когда приходит реквест, то если у вас есть хоть один Diagnostics Listener для логинга стандартного framework, то тогда хостинг создаст Activity, ну стандартный систем Diagnostics Activity, который дальше будет тащиться через все middleware и таким образом ассоциироваться со всеми вашими логмесседжами, которые вы посылаете из этого реквеста, из обработчиков этого реквеста.
821.64 841.80 "Игорь Лабутин" Так вот теперь этот Activity можно получить через IHTTP Activity Feature, то есть если он там есть, то тогда к нему можно, например, добавить какой-нибудь там тег или еще что-нибудь такое, и это все попадет в, будет просоцировано со всеми вашими логмесседжами.
841.80 845.08 "Игорь Лабутин" Так что один из способов теперь такое сделать.
845.08 851.76 "Игорь Лабутин" И эта штука тут же начала использоваться для следующей вещи, если у вас есть какое-нибудь SignalR соединение.
851.76 854.32 "Игорь Лабутин" SignalR соединения, очевидно, обычно живут очень долго.
854.32 860.88 "Игорь Лабутин" Это тоже реквест, но он может быть очень долгий, long polling там, вот это все.
860.88 870.24 "Игорь Лабутин" И если вы, допустим, настраиваете какой-нибудь мониторинг ваших реквестов, то очевидно, что такие реквесты нужно как-то отделять, потому что, ну они долгие, но это нормально, что они долгие, они так должны быть.
870.24 879.08 "Игорь Лабутин" И вот как раз теперь через эту фичу, через IHTTP Activity Feature добавляется специальный тег к таким реквестам, что они там long running и так должно быть.
879.08 890.24 "Игорь Лабутин" И соответственно, Azure OpenSights Monitor и любые другие похожие системы могут теперь это использовать, чтобы понять, что да, этот реквест действительно специально долгий и так должно быть.
890.24 894.52 "Игорь Лабутин" И не помечать его как слишком долгий с точки зрения каких-нибудь метриков.
894.52 895.52 "Игорь Лабутин" Так, веб-сокеты.
895.52 899.32 "Игорь Лабутин" Веб-сокеты завезли компрессию.
899.32 917.48 "Игорь Лабутин" Можно теперь принимать compressed traffic, но по дефолту это выключено, потому что если вы используете encrypted connection и при этом включаете компрессию, то есть вероятность, что ваш код становится более подверженным некоторым видам атак.
917.48 920.72 "Игорь Лабутин" Детали я уж сейчас рассказывать не буду, я не настолько специалист в атаках.
920.72 927.60 "Игорь Лабутин" Поэтому если у вас используется encryption на веб-сокет соединений, то скорее всего compression лучше не включать.
927.60 934.68 "Игорь Лабутин" Но, в общем, думайте, как обычно, много раз, прежде чем включать компрессию и encryption.
934.68 937.76 "Игорь Лабутин" Потому что на encrypted connection там есть тонкости.
937.76 953.44 "Игорь Лабутин" И последнее, что есть, это если вы используете cookie авторизацию, то у вас теперь есть специальный хендлер, он checks sliding expiration, когда вы можете закастомизировать, что происходит с куками, когда они вот-вот-вот-вот-вот готовятся заэкспариться и так далее.
953.44 955.32 "Игорь Лабутин" Там можно более точно настроить их работу.
955.32 960.36 "Игорь Лабутин" Так что если вы используете cookie authentication, гляньте, новый хендлер может быть вам чем-то поможет.
960.36 962.76 "Игорь Лабутин" Все больше новостей у нас стало про MAUI.
962.76 968.64 "Игорь Лабутин" Он потихонечку развивается, хотя я не вижу прям такого placement его вперед.
968.64 973.72 "Игорь Лабутин" То есть он есть, но как-то вот, может быть, я просто не слежу за нужными вещ...
973.72 975.20 "Игорь Лабутин" Скажем так, источниками.
975.20 978.24 "Игорь Лабутин" Но он как-то так развивается сам по себе.
978.24 979.24 "Игорь Лабутин" И развивается.
979.24 982.24 "Игорь Лабутин" Посмотрим, что будет к релизу, насколько его будет пушить в район релиза.
982.24 985.20 "Игорь Лабутин" Но по сути туда добавляют немножко фич.
985.20 987.52 "Игорь Лабутин" Туда завезли жесты, туда завезли клиппинг.
987.52 997.60 "Игорь Лабутин" То есть вы теперь можете как-то вырезать кусочки, грубо говоря, из ваших каких-то регионов с помощью геометрических фигур.
997.60 1000.52 "Игорь Лабутин" То есть вы можете там отрезать полукруг, если надо, и так далее.
1000.52 1001.88 "Игорь Лабутин" То есть заклипать это все.
1001.88 1004.64 "Игорь Лабутин" И на всех платформах поддержали нативные алерты.
1004.64 1011.56 "Игорь Лабутин" То есть вы теперь можете всякие правильные попапчики показывать и на Android, и на iOS, и на Vendah, и так далее нативненько.
1011.56 1015.68 "Игорь Лабутин" Продолжается работа с тем, чтобы привести все это к единому проекту.
1015.68 1020.64 "Игорь Лабутин" Пока, как вы помните, осталось два проекта для всего и для WinUI.
1020.64 1028.40 "Игорь Лабутин" При этом, если вы внимательно слушали нас, мы всегда говорили, для того, чтобы включить MAUI, нужно использовать NuGet-пакет.
1028.40 1033.04 "Игорь Лабутин" По-моему, в прошлом подкасте я упомянул, что теперь это делается через workload.
1033.04 1038.56 "Игорь Лабутин" И теперь это нужно сделать еще в Cessproje, нужно написать use_maui_true, объявить такую пропертию.
1038.56 1041.72 "Игорь Лабутин" Тогда оно само там как-то будет искать нужный workload.
1041.72 1055.48 "Игорь Лабутин" Тот проект, который для всего, кроме WinUI, обзавелся новой папочкой под названием Platforms, куда сложили все, так сказать, индивидуальные платформочки, чтобы они не сгромождали Solution Explorer, а были свернуты аккуратно в папочку.
1055.48 1059.44 "Игорь Лабутин" В общем-то и все пока в MAUI, то есть развитие идет, но оно такое.
1059.44 1066.00 "Игорь Лабутин" Кажется, что там довольно много внутренней работы делается, которая просто нам не видна, чтобы заставить все это нормально работать на всех платформах.
1066.00 1071.64 "Игорь Лабутин" И напоследок, Entity Framework 6, там не так много изменений.
1071.64 1077.88 "Игорь Лабутин" Они вообще очень кратенько, прям без каких-либо подробностей указаны.
1077.88 1086.76 "Игорь Лабутин" Завезли 64-битные Identity Seed Values, то есть вы можете инициализировать ваши 64-битные Identity теперь нужным числом.
1086.76 1093.44 "Игорь Лабутин" Поскольку завезли Date-only и Time-only классы в BCL, то теперь они поддержаны для SQLite.
1093.44 1096.00 "Игорь Лабутин" Там, видимо, правильные колонки есть.
1096.00 1103.32 "Игорь Лабутин" Constraints на колонках теперь, имена их проверяются на уникальности и валидируются.
1103.32 1106.88 "Игорь Лабутин" И интересная фича — это Pre-Convention Model Configuration.
1106.88 1108.68 "Игорь Лабутин" Они объясняют это следующим образом.
1108.68 1133.40 "Игорь Лабутин" Например, если вы строчки всегда храните в виде, не знаю, байт-арреев, например, в базе, по какой-то причине, странно, не знаю почему, то вместо того, чтобы во всех ваших моделях размечать эту колонку специальным атрибутом, можно теперь написать специальный конвеншен, точнее, это не конвеншен, а писать конвеншен, что все стринг-поля всех Entity используют такой-то тип для колонки.
1133.40 1137.72 "Игорь Лабутин" И Entity Framework будет автоматически его использовать для всех таких типов.
1137.72 1143.88 "Игорь Лабутин" В принципе, наверное, для каких-то случаев удобная штука, какими-то DateTime правильно хранить или еще что-нибудь.
1143.88 1148.92 "Игорь Лабутин" Вот, в общем-то, и все, что нам завезли в 6-ом Дотнете, превью 6.
1148.92 1149.92 "Анатолий Кулаков" Хороший список.
1149.92 1156.84 "Анатолий Кулаков" До релиза у нас еще, в принципе, я думаю, успеют выйти превьюшки, поэтому это еще не конец.
1156.84 1159.68 "Анатолий Кулаков" Мы еще явно увидим что-то новое и интересное.
1159.68 1164.96 "Анатолий Кулаков" Ну что ж, а за основным фреймворком поспевает редактор.
1164.96 1176.08 "Анатолий Кулаков" Хоть редактора нам в этом году не обещали, но все же он судит себе много инновационного, интересного, и мы его как всячески ждем.
1176.08 1182.16 "Анатолий Кулаков" Visual Studio 2022, которая 64 бита, тоже выпустила превью 2.
1182.16 1184.12 "Анатолий Кулаков" И что нам приготовило внутри?
1184.12 1189.56 "Игорь Лабутин" Если ты помнишь, прошлый анонс превью 1 в Visual Studio ты начинал с новых иконочек.
1189.56 1194.16 "Игорь Лабутин" В этот раз все по-другому, в этот раз мы начнем с нового шрифта.
1194.16 1204.28 "Игорь Лабутин" Microsoft теперь поставляет новый шрифт вместе с Visual Studio, это Cascadia Code, их шрифт, который они сделали и для Windows Terminal, и, я так понимаю, для новой студии.
1204.28 1212.16 "Игорь Лабутин" Соответственно, теперь оно там по дефолту, но я вот в Windows Terminal, мы еще к нему придем сегодня попозже, его попользовался, в принципе, ну такой вполне приятный шрифт.
1212.16 1219.84 "Игорь Лабутин" В райдере у меня JetBrains Mono, в студии у меня, по-моему, Consolas, если не ошибаюсь.
1219.84 1226.64 "Игорь Лабутин" Короче, у меня в каждом этом редакторе свои шрифты, ну, в принципе, Cascadia Code нормальный шрифт, более-менее норм.
1226.64 1237.48 "Игорь Лабутин" Вторая часть анонса говорит, что теперь в Visual Studio 2020-2022, конечно же, новые иконочки, они перерисовали еще часть иконочек, они стали еще круче, еще лучше, еще более аксессибл и так далее.
1237.48 1250.28 "Игорь Лабутин" Дальше, превью 2 полностью локализована, если вдруг почему-то вы пользуетесь Visual Studio не на английском, то во-первых, перестаньте это делать, во-вторых, ну если вообще надо, то она все-таки локализована, по-моему, там десяток языков перечислен.
1250.28 1252.00 "Игорь Лабутин" Короче, все нормально.
1252.00 1269.44 "Игорь Лабутин" Если вы вдруг занимаетесь C++, мы хоть подкаст про .NET, но в плюсы ей там даже мне иногда приходится заходить, там последние тулзы для плюсов, 143-я версия, новый CMake, хорошая интеграция с Windows Subsystem for Linux.
1269.44 1279.00 "Игорь Лабутин" Для .NET завезли Live Preview для XAML и VBAP, то есть если вы теперь редактируете XAML, там теперь клевый улучшенный Live Preview того, как ваша формочка будет выглядеть.
1279.00 1289.80 "Игорь Лабутин" И для VBAP то же самое, то есть если вы редактируете какой-нибудь там JavaScript или HTML и так далее, там будет клевый превьюшка, который будет показывать, как это все рендерится правильно.
1289.80 1311.08 "Игорь Лабутин" Из таких более практических вещей завезли клевую фичу Force Run, это для отладчика, то есть представьте, что вы отлаживаете какой-то код, вы поставили какой-нибудь breakpoint, не знаю, в цикле и прошли по нему там несколько раций, посмотрели все, что вам надо, а теперь вам нужно выйти из цикла, но при этом не дать исполняться функции дальше.
1311.08 1313.08 "Игорь Лабутин" Как вы обычно это делали?
1313.08 1326.76 "Игорь Лабутин" Ну, ставили breakpoint после цикла, дизейблили breakpoint внутри цикла и говорили в 5, потому что иначе, если вы просто поставите курсор куда-нибудь и скажете run to cursor, breakpoint внутри цикла все равно сработает и вас остановит.
1326.76 1336.48 "Игорь Лабутин" Теперь, соответственно, есть функция Force Run, которая говорит, что вот несмотря ни на какие breakpoints, exceptions и все что угодно, исполни код до этого места, где стоит курсор.
1336.48 1339.04 "Игорь Лабутин" И не надо дизейблить breakpoint и вот это все.
1339.04 1340.64 "Игорь Лабутин" По идее выглядит очень удобно.
1340.64 1355.68 "Игорь Лабутин" И вторая штука, мы много раз говорили про hot reload, hot reload завезен в 2022 для дотнета, в том виде, как мы это обсуждали, более того, он есть и для плюсов в каком-то виде, так что если вы пишете на плюсах, попробуйте тоже hot reload, говорят, работает.
1355.68 1366.84 "Игорь Лабутин" Это на самом деле все, что касается 2022, ждем дальнейших превью, ничего пока не сказано про экстенджины, так что пока судьба экстенджинов не истана, ну в смысле насколько быстро они начнут появляться.
1366.84 1370.84 "Игорь Лабутин" Я, кстати, не смотрел, начали ли хоть какие-то появляться, надо будет глянуть.
1370.84 1373.08 "Игорь Лабутин" Следующему превью постараемся.
1373.08 1398.64 "Игорь Лабутин" Помимо основной версии 2022 для Windows вы знаете, что существует, наверное, Visual Studio for Mac, это не совсем Visual Studio, но тем не менее, называется она теперь точно так же Visual Studio 2022 for Mac и у нее вышло Private Preview, там пока в основном больше косметические изменения, там довольно сильно переписан UI с использованием нативного macOS, UI-чика не утверждают, что это пофиксило огромное количество багов.
1398.64 1415.56 "Игорь Лабутин" Кроме того, они провели большую работу по оптимизации, так скажем, терминологии, так что если вы пишете на виндах под Visual Studio, то перейдя на Visual Studio for Mac, у вас будет, может быть, чуть-чуть другой UI, но очень похожая терминология.
1415.56 1430.32 "Игорь Лабутин" То есть раньше, я так понимаю, что там все довольно сильно различалось просто потому, что у них разные корни и происхождение, а сейчас потихонечку все сходится в единую точку, чтобы все-таки вы могли работать, ну, переходить между ними более-менее свободно.
1430.32 1432.96 "Игорь Лабутин" Хотя, конечно, по функции mvs4mac пока отстает.
1432.96 1446.68 "Игорь Лабутин" Ну и сейчас это пока еще Private Preview, для него нужно зарегистрироваться и вам, может быть, разрешат им пользоваться, но они говорят, что скоро будет Public Preview, так что если не хотите вписываться в Private, то ждите Public и там все будет.
1446.68 1449.48 "Игорь Лабутин" Вот то, что нас ждет пока про 2022.
1449.48 1453.72 "Игорь Лабутин" Про рейдер, кстати, пока новостей никаких нет, поэтому в этот раз мы, наверное, про рейдер говорить не
1453.72 1456.76 "Анатолий Кулаков" будем. Ну хорошо, давай далеко от фреймворков отходить не будем.
1456.76 1460.04 "Анатолий Кулаков" Хочется поговорить еще про System Text JSON.
1460.04 1473.96 "Анатолий Кулаков" Я напомню, может быть, кто-то пропустил, это новая библиотечка стандартная от самого фреймворка, от самого Microsoft, которая призвана заменить JSON-сериалайзеры, ну, в частности, самый популярный Newtonsoft JSON-сериалайзер.
1473.96 1483.56 "Анатолий Кулаков" И новость заключается в том, что наконец-то в DotA Net 6, в Preview 7 в нее завезли Source-генераторы.
1483.56 1494.88 "Анатолий Кулаков" Теперь эта библиотечка может похвастаться еще большим перформансом, еще больше оставить позади всех своих конкурентов благодаря вот этим магическим Source-генераторам.
1494.88 1497.56 "Анатолий Кулаков" Давайте же разберемся, что же это такое.
1497.56 1504.48 "Анатолий Кулаков" Прежде всего, уже можно попробовать, и для этого достаточно взять последний Nuget пакет System Text JSON.
1504.48 1506.24 "Анатолий Кулаков" Он доступен на nuget.org.
1506.24 1514.96 "Анатолий Кулаков" И в качестве стандартной поставки библиотечка вместе с Source-генераторами будет выходить, начиная с DotA Net 6, Preview 7.
1514.96 1532.48 "Анатолий Кулаков" Итак, как я уже и сказал, главная нововведение, главная фича этой версии в том, что они добавились к сериализатору поддержку генераторов, которые позволяют вам перенести на момент компиляции очень много всяких забот, которые раньше выполнялись в рантайме.
1532.48 1533.48 "Анатолий Кулаков" Как же это сделать?
1533.48 1540.64 "Анатолий Кулаков" Прежде всего, вам нужно объявить свой классик, который будет паршалом и который будет пронаследован от JSON-сериалайзер контекста.
1540.64 1545.04 "Анатолий Кулаков" Далее навесите атрибуты, JSON-сериалайзер атрибут над этим классиком.
1545.04 1552.56 "Анатолий Кулаков" В этом атрибуте вы можете делать всяческие настройки, рассказывать, что вам генерить нужно, что не нужно и так далее.
1552.56 1553.56 "Анатолий Кулаков" Но это уже все мелочи.
1553.56 1563.68 "Анатолий Кулаков" После этого вы сможете свой сгенерированный контекст, а тот класс, который вы пронаследуете и сделаете паршалом, он как раз таки будет являться оболочкой для Source-генератора.
1563.68 1569.84 "Анатолий Кулаков" Source-генератор нагенерирует туда очень полезных данных для вашего типа.
1569.84 1575.64 "Анатолий Кулаков" Вы у этого контекста должны указать, для какого типа вы его создаете, то есть какой тип вы хотите прооптимизировать.
1575.64 1587.68 "Анатолий Кулаков" После этого вы данный контекст сможете передать в JSON-сериализатору и уже JSON-сериализатор начнет использовать всяческую полезную информацию, которую Source-генераторы заботливо тогда сложили.
1587.68 1596.32 "Анатолий Кулаков" В частности, Source-генераторы вам сделают специальные типы, самым основополагающим из которых является JSON TypeInfo.
1596.32 1610.00 "Анатолий Кулаков" Этот тип содержит в себе мета-данные о том классе, который вы хотите научиться быстро сериализовать, а также содержит всякие статические методы доступа непосредственно к этим данным.
1610.00 1616.72 "Анатолий Кулаков" И с помощью этой мета-информации, с помощью этих статических классов как раз таки и происходит основная магия.
1616.72 1624.86 "Анатолий Кулаков" JSON-сериализатор учится ее использовать и в своей работе начинает быстрее сериализовать или быстрее загружаться.
1624.86 1665.12 "Анатолий Кулаков" В частности, есть такой режим генерации, где генератор запишет в JSON TypeInfo специальные методы, которые, используя напрямую UTF-8 JSON Writer, будут просто писать данные в код, то есть без обхода всяких reflections, без всякого type-конверта, без прочих этих глупостей, так как на момент source-генерирования, то есть на момент компиляции, у вас уже все типы известны, все менополии известны, все их отношения известны, вам не нужно вообще здесь никакой reflection, вы просто можете взять Writer и запилить туда все возможные данные, которые есть.
1665.12 1670.52 "Анатолий Кулаков" Вот это в принципе и происходит в том коде, который вы получаете в результате source-генерации.
1670.52 1675.40 "Анатолий Кулаков" Еще один класс, который порождается генератором, это JSON Serializer Context.
1675.40 1678.72 "Анатолий Кулаков" Он содержит внутри себя много вот этих JSON TypeInfo.
1678.72 1690.04 "Анатолий Кулаков" JSON TypeInfo - это описание одного конкретного класса, который вы хотите прооптимизировать, а Context - это большой dictionary, большой контекст всех вот этих маленьких оптимизаторов.
1690.04 1701.24 "Анатолий Кулаков" С помощью контекста, с помощью метода getTypeInfo вы можете по типу получить конкретный JSON TypeInfo и начать его использовать в своих сериализаторах.
1701.24 1714.64 "Анатолий Кулаков" Также добавились новые API к HTTP Client и JSON Context, которые соответственно могут теперь принимать вот эти контексты, прооптимизированные, сгенерированные контексты, и сериализатор тоже начинает работать с ними быстро.
1714.64 1730.00 "Анатолий Кулаков" То есть для того, чтобы ваши сериализаторы начали сериализовать какие-то типы быстрее, вам нужно для этих типов создать Serialization Context и зарегистрировать внутри сериализатора этот Serialization Context.
1730.00 1735.52 "Анатолий Кулаков" Вот только тогда он всю эту мета-информацию, которая у вас была сгенерена в Compile Time, уже начнет использовать.
1735.52 1740.92 "Анатолий Кулаков" Так, давайте же посмотрим, какие же все-таки фичи дают нам Source Code генераторы.
1740.92 1741.92 "Анатолий Кулаков" Зачем они нам нужны?
1741.92 1743.68 "Анатолий Кулаков" Для чего мы их будем использовать?
1743.68 1748.12 "Анатолий Кулаков" Прежде всего, самая главная фича - это увеличение скорости сериализации.
1748.12 1765.40 "Анатолий Кулаков" Как я уже сказал, в Compile Time у нас есть возможность записать строго телепезированные вызовы в райтера, который не будет боксить, не будет кастить, не будет исследовать, какие там есть поля, каких нет полей, не будет исследовать их нулябельность и прочие вот этими глупостями заниматься.
1765.40 1769.72 "Анатолий Кулаков" Вся эта информация есть в Compile Time, он просто возьмет их и запишет в стрим.
1769.72 1781.20 "Анатолий Кулаков" Это дает хороший буст по производительности и, наверное, это одна из самых главных фич, ради которых стоило делать генераторы для любого сериализатора.
1781.20 1782.20 "Анатолий Кулаков" Но это не все.
1782.20 1785.52 "Анатолий Кулаков" Есть и другие, другие интересные и полезные сайд-эффекты.
1785.52 1788.36 "Анатолий Кулаков" Например, уменьшение стартап-тайма.
1788.36 1795.88 "Анатолий Кулаков" Во время сериализации, когда вы первый раз пытаетесь засериализовать ваш класс, на самом деле под капотом происходит исследование этого класса.
1795.88 1810.72 "Анатолий Кулаков" То есть с помощью обычной рефлексии сериализатор собирает все именно полей, смотрит на них атрибутики, нужно ли их игнорировать, как их переименовать, какие типы там нужно преобразовать, какой форматор заезжать.
1810.72 1815.20 "Анатолий Кулаков" То есть очень много информации собирается с помощью рефлекшена в рантайме.
1815.20 1824.40 "Анатолий Кулаков" Вся эта информация, конечно, собирается только один раз, после этого она кэшируется и будет переиспользоваться, но вот этот первый один раз, он обычно довольно долгий.
1824.40 1830.76 "Анатолий Кулаков" Это как раз таки называется warm-up time, то есть время поднятия, время прогрева вашего сериализатора.
1830.76 1847.48 "Анатолий Кулаков" И так как вам больше все эти атрибутики, всю эту информацию именно типовые, именно полей собирать не нужно, компилятор может вам ее сообщить и заботливо сложить в метаданные, то с помощью Source-генераторов вы также можете уменьшить время прогрева вашего сериализатора.
1847.48 1855.60 "Анатолий Кулаков" Далее вот этот весь прогрев, этот сбор информации, он не только затягивает у вас время, по правде он еще сильно отъедает вашу память.
1855.60 1863.00 "Анатолий Кулаков" То есть отъедание лишнего использования памяти, это тоже такой side-эффектик, который даются Source-генераторы.
1863.00 1867.20 "Анатолий Кулаков" Дальше уменьшение использования рефлексии.
1867.20 1880.44 "Анатолий Кулаков" Рефлексия действительно не очень хорош с многих сторон, память, производительность, но и еще у него есть одна большая проблема теперь, он не дружелюбен к линкеру, к линкер анализам.
1880.44 1886.56 "Анатолий Кулаков" А линкер я напомню, это тот инструмент, который позволяет вам уменьшить размер вашего приложения.
1886.56 1896.84 "Анатолий Кулаков" То есть линкер способен проанализировать какие типы, какие сборки участвуют в вашем приложении, какие вам нужны и ненужные методы, ненужные типы, сборки просто напросто выкинуть, отрезать их и убрать.
1896.84 1904.68 "Анатолий Кулаков" Но если вы начинаете активно использовать рефлекшн, то у людей с линкером уже могут быть проблемы и он иногда может ошибаться.
1904.68 1921.36 "Анатолий Кулаков" Source-генераторы вам полностью устраняют использование рефлексии, а это значит, что ваш код становится 100% совместим с линкером и линкер сможет идеально просто оптимизировать ваше приложение без каких-либо побочных эффектов или боязни что-то потерять.
1921.36 1930.24 "Анатолий Кулаков" Вот такие у нас фичи ставились перед Source-генераторами и в принципе они все были достигнуты.
1930.24 1936.32 "Анатолий Кулаков" Разные фичи с разным успехом, но давайте об этом поговорим подробнее.
1936.32 1942.88 "Анатолий Кулаков" Итак, на данный момент JSON Serializer у нас может работать в так называемых трех режимах.
1942.88 1959.60 "Анатолий Кулаков" Первый режим вам всем давно известен, это обычное использование - старый, добрый, проверенный режим с помощью и лимитов, и рефлекшенов, и как всегда полностью поддерживает все фичи, которые у нас до этого были, полностью предсказуем, полностью понятен.
1959.60 1963.96 "Анатолий Кулаков" Source-генераторы дали нам еще два дополнительных режима, которые мы можем использовать.
1963.96 1970.48 "Анатолий Кулаков" Во-первых, это режим, который использует сгенерированную логику сериализации.
1970.48 1979.28 "Анатолий Кулаков" Это то, что я уже сказал, когда мы можем сгенерировать в райтер, который максимально эффективно будет записывать нам любой классик в стрим.
1979.28 1986.40 "Анатолий Кулаков" Второй режим - это только генераторы загенерят вам только мета-информацию.
1986.40 1994.20 "Анатолий Кулаков" Мета-информацию, которая расскажет с помощью каких способов можно обращаться к полям.
1994.20 2005.44 "Анатолий Кулаков" То есть как там были поля названы, с помощью каких аксессоров можно получить значения, как можно записать значения, но этот режим не позволяет использовать строго типизированный в райтер.
2005.44 2011.52 "Анатолий Кулаков" И на данный момент поддерживается только в райтер, то есть только сериализация.
2011.52 2018.28 "Анатолий Кулаков" Пока Source-генераторы десериализацию генерить не умеют, но это в планах, я думаю, к релизу ее все-таки добавят.
2018.28 2020.76 "Анатолий Кулаков" Поэтому не будем считать это каким-то большим минусом.
2020.76 2029.80 "Анатолий Кулаков" А вот зачем понадобились вот эти два разных режима сериализации, то есть генерация мета-данных и генерация полностью логики писателя.
2029.80 2037.84 "Анатолий Кулаков" Дело в том, что настоящий писатель, ну то есть если у вас есть строго типизированный быстрый писатель, это идеальный вариант, к этому нужно стремиться.
2037.84 2040.12 "Анатолий Кулаков" Но, к сожалению, не все можно поддержать.
2040.12 2043.24 "Анатолий Кулаков" Некоторые вещи могут задаваться в рантайме.
2043.24 2047.24 "Анатолий Кулаков" Для некоторых вещей нужна именно рантайм-информация.
2047.24 2053.80 "Анатолий Кулаков" И для таких ситуаций как раз-таки сгенерированный в компайл тайм в райтер не подходит.
2053.80 2062.20 "Анатолий Кулаков" И поэтому второй режим, который строго типизированный в райтер, он поддерживает не все фичи JSON сериалайзера.
2062.20 2068.72 "Анатолий Кулаков" То есть вам нужно специально понимать, нужны ли вам какие-то рантайм-информации или нет.
2068.72 2083.40 "Анатолий Кулаков" Но зато по всем остальным пунктам он проходит замечательно, то есть и увеличивает скорость сериализации, и стартап-время, и уменьшает использование памяти, избавляет от рефлекшена.
2083.40 2084.72 "Анатолий Кулаков" В этом плане он идеален.
2084.72 2090.56 "Анатолий Кулаков" Второй режим, когда у нас генерируется только мета-информация, позволяет нам избавиться от прогрева.
2090.56 2098.08 "Анатолий Кулаков" То есть нам уже не нужно в рантайме бегать по полям, собирать всякие атрибутики, названия полей и прочее.
2098.08 2102.48 "Анатолий Кулаков" Вот эта мета-информация как раз работает в третьем режиме.
2102.48 2115.48 "Анатолий Кулаков" То есть она у нас уменьшает время прогрева, она у нас уменьшает немножко использование рефлекшена, но при этом не увеличивает скорость сериализации.
2115.48 2125.64 "Анатолий Кулаков" Скорость сериализации остается прежней, она также работает на или митах, как и старая, но немножко быстрее прогревается сериализатор.
2125.64 2131.92 "Анатолий Кулаков" Но плюс этого метода в том, что он поддерживает абсолютно все фичи у знакомого вам G-SON сериалайзера.
2131.92 2138.12 "Анатолий Кулаков" Поэтому если вы используете какие-то страшные выкрутасы, то наверное это все-таки ваш подход, ваш выбор.
2138.12 2143.88 "Анатолий Кулаков" Ну и самое интересное, что же собственно удалось добиться с помощью всей этой магии?
2143.88 2144.88 "Анатолий Кулаков" Бенчмарки.
2144.88 2151.76 "Анатолий Кулаков" Так, сериализация простых линейных объектов отдала прирост где-то в 1,6 раз.
2151.76 2162.08 "Анатолий Кулаков" Сериализация коллекций, соответственно, чем больше коллекция, тем прирост выше, но где-то примерно в полтора раза быстрее коллекции начали сериализоваться вместе с Source-генераторами.
2162.08 2166.28 "Анатолий Кулаков" А самое главное, что теперь не происходит выделение памяти вообще.
2166.28 2184.04 "Анатолий Кулаков" Потому что Source-генераторы могут избавить вас от, во-первых, ненужных боксинговых и вызовов, а во-вторых, у них уже больше информации о сериализуемом типе и они могут уже переиспользовать пулы, они могут уже заранее посчитать каунты и записать и прочие вещи.
2184.04 2189.56 "Анатолий Кулаков" Далее, у нас увеличилась скорость прогрева.
2189.56 2197.36 "Анатолий Кулаков" Прогрев на сериализацию увеличился в более чем в два раза и при этом он в два раза меньше кушает памяти.
2197.36 2203.04 "Анатолий Кулаков" И прогрев десериализатора увеличился на 1,6 раз и в 1,4 раза он кушает меньше памяти.
2203.04 2217.12 "Анатолий Кулаков" Тот эффект, который я говорил про линкера, то есть тот факт, что у нас стало меньше рефлекшена и теперь линкер сможет ваше приложение оптимизировать намного лучше, дал прирост 0,8 мегабайт.
2217.12 2223.08 "Анатолий Кулаков" То есть 0,8 мегабайт от вашего приложения линкер теперь может отрезать более смело и безбоязненно.
2223.08 2229.92 "Анатолий Кулаков" Наверное, эта цифра будет улучшаться, но вот в первых предыдущих приложениях вот такая, чуть даже меньше мегабайта.
2229.92 2245.36 "Анатолий Кулаков" Вот такие эффекты дали Source Generator, кажется, что в типичной для них области, то есть в оптимизации сериализаторов, мне кажется, это идеальное место, где должны применяться Source Generator в принципе сам.
2245.36 2253.88 "Анатолий Кулаков" Я уже много лет практикую такой способ и пишу сериализаторы, десериализаторы, загрузчики только на код-генераторах, больше ни на чем.
2253.88 2259.56 "Анатолий Кулаков" И это показывает отличный буст во всяких high-performance high-load приложениях.
2259.56 2260.56 "Игорь Лабутин" Ну, шикарно.
2260.56 2264.28 "Игорь Лабутин" Давай от high-load перейдем к более практическим вещам.
2264.28 2265.28 "Игорь Лабутин" Терминалы.
2265.28 2269.16 "Игорь Лабутин" Я упоминал чуть раньше сегодня, что мы поговорим про Windows Terminal.
2269.16 2277.44 "Игорь Лабутин" Это не совсем напрямую относится к дотонету, но мы ж все так или иначе пользуемся чем-то, поэтому давайте немножко содронем эту тему.
2277.44 2281.48 "Игорь Лабутин" Вышел Windows Terminal Preview версия 1.10.
2281.48 2284.08 "Игорь Лабутин" Там довольно-таки немного изменений.
2284.08 2296.20 "Игорь Лабутин" Это превьюшка, потихонечку допиливают всякие разные штуки, чуть-чуть лучше допилили Quake Mode, если вы знаете, что это такое, когда терминалка вываливается сверху по какой-нибудь горячей клавише.
2296.20 2298.68 "Игорь Лабутин" Улучшили текст рендеринг.
2298.68 2315.40 "Игорь Лабутин" И довольно активно сейчас ведется работа над UI-чиком вокруг сеттингов, чтобы там правильно все, скажем так, соотнести с тем, как это реально хранится на диске и в JSON-файле, чтобы все, что поддержано в JSON, можно было как-то правильно отобразить в UI.
2315.40 2327.56 "Игорь Лабутин" Добавили возможность конфигурить кучу горячих клавиш, добавили кучу новых экшенов, ну и добавили возможность держать терминал на том языке, на котором вы хотите, а не только на языке системы.
2327.56 2331.76 "Игорь Лабутин" Вот примерно то, что вышло, если вы пользуетесь Windows Terminal Preview.
2331.76 2332.76 "Игорь Лабутин" Обновитесь.
2332.76 2337.44 "Игорь Лабутин" Я вот сейчас обновился ради интереса, посмотрел, ну в принципе терминалка терминалкой.
2337.44 2344.48 "Игорь Лабутин" Я обычно использую не его, то есть Windows Terminal есть одно свойство что ли.
2344.48 2347.48 "Игорь Лабутин" То есть у меня по крайней мере он стоит из Microsoft Store.
2347.48 2356.52 "Игорь Лабутин" Он не является UBP приложением, но ставится из Microsoft Store, и поэтому там возникают особые проблемы, если вы хотите запустить его в режиме администратора.
2356.52 2364.08 "Игорь Лабутин" Иногда приходится такое делать, чтобы там какие-нибудь поправить или запустить какие-нибудь специальные нужные мне команды с админскими правами.
2364.08 2369.04 "Игорь Лабутин" Так вот запустить там что-то из подадмина бывает иногда не тривиально.
2369.04 2375.80 "Игорь Лабутин" И вы не можете его, например, сказать, чтобы он там всегда был из подадмина, эта галочка просто не доступна.
2375.80 2391.40 "Игорь Лабутин" И существует, если почитать какие-то хабиши с Windows Terminal, там есть прям специальные скрипты, которые на паршеле патчат файлики ярлыков, бинарно патчат, байтики проставляют масочками, чтобы перевести его в режим run as admin.
2391.40 2395.96 "Игорь Лабутин" То есть поэтому он у меня стоит, я им чуть-чуть иногда пользуюсь.
2395.96 2403.96 "Игорь Лабутин" У него прикольная эта тема с сплитами, то есть что можно разделить терминальчик на несколько кусочков, и в каждом живет независимый.
2403.96 2408.36 "Игорь Лабутин" Но при этом основной, может, мой терминал все-таки не он.
2408.36 2413.36 "Игорь Лабутин" Основная моя терминалка это продукт под названием, даже не знаю, как он правильно по-русски назвать.
2413.36 2414.36 "Игорь Лабутин" Короче, это CMDER.
2414.36 2415.36 "Игорь Лабутин" Не знаю, как правильно.
2415.36 2423.52 "Игорь Лабутин" Короче, на базе, я так понимаю, ConEmu и прочих поделок вокруг этого.
2423.52 2430.36 "Игорь Лабутин" Довольно удобная штука с нормальным квейк-модом, то есть где можно внутри квейк-мода использовать несколько табов.
2430.36 2434.48 "Игорь Лабутин" То есть я его использую исключительно в таком режиме, чтобы он не мешался мне на таскбаре.
2434.48 2438.20 "Игорь Лабутин" И в целом для меня все как раз хорошо работает.
2438.20 2442.64 "Игорь Лабутин" Там как раз нормально работает микс из админских и неадминских табок.
2442.64 2447.96 "Игорь Лабутин" Поэтому обычно стараюсь жить в неадминских, но когда нужно, переключаюсь в админские табки.
2447.96 2457.44 "Игорь Лабутин" Ну внутри, конечно, тоже ради интереса скажу, что внутри у меня сейчас PowerShell 7, 7.1, сколько там сейчас последний.
2457.44 2460.04 "Игорь Лабутин" Ну вот, тоже вполне прикольно работает.
2460.04 2468.92 "Игорь Лабутин" Я перешел в итоге совсем финально на PowerShell в качестве основного моего шелла и вроде вполне пока все хорошо.
2468.92 2470.28 "Игорь Лабутин" Расскажите, что у тебя?
2470.28 2472.20 "Анатолий Кулаков" У меня не сильно тоже отличается.
2472.20 2478.16 "Анатолий Кулаков" Я использую чистую ConEmu, квейк-моди с множеством табок на всякие репозитории.
2478.16 2486.80 "Анатолий Кулаков" Очень много грешу с PowerShell, поэтому да, у меня система дефолтный интерпретатор тоже PowerShell, что сильно помогает.
2486.80 2502.80 "Анатолий Кулаков" Одно, что я могу отметить, это GitPosh, потому что Git я тоже пользуюсь исключительно из командной строки и с помощью этого расширения, который вместе с PowerShell дает прекрасную подсказку, интересную историю, разноцветные всякие помощи, хинты.
2502.80 2505.84 "Анатолий Кулаков" Интересенс тоже самый.
2505.84 2507.88 "Анатолий Кулаков" Чувствую себя прекрасно.
2507.88 2512.80 "Анатолий Кулаков" Из инструментов консоли, которые еще хочется отметить, я большой привержен из фара.
2512.80 2514.44 "Анатолий Кулаков" Вообще жить без него не могу.
2514.44 2518.76 "Анатолий Кулаков" У меня очень прокачанный и очень большой и интересный
2518.76 2523.68 "Игорь Лабутин" фар. Ну тут тогда да, PoshGit, конечно, это прикольная штука для консоли.
2523.68 2530.12 "Игорь Лабутин" У меня еще стоит экстенджер под названием OhMyPosh, который позволяет чуть лучше кастомизировать, собственно, промпт.
2530.12 2537.80 "Игорь Лабутин" Вот буквально вчера обновил его на третью версию и возился с апдейтом, там немножко поменялся стиль конфигурирования.
2537.80 2541.68 "Игорь Лабутин" Фаром я не пользуюсь уже очень давно.
2541.68 2546.00 "Игорь Лабутин" Я из другой половины мира, я из Total Commanders.
2546.00 2547.00 "Игорь Лабутин" Ужас.
2547.00 2549.68 "Игорь Лабутин" У меня тоже большой и прокачанный Total Commanders за много лет.
2549.68 2567.84 "Анатолий Кулаков" Вот если вы хотите почувствовать себя просто линуксоидом, но вынуждены сидеть под виндой, то как раз завести какую-нибудь консольную тулу, какую-нибудь коньему, помучаться в конфигах, понастраивать промптик, выучить немножко название утилит для командной строки, вот это вообще милое
2567.84 2571.56 "Игорь Лабутин" дело. Подобрать тему для консольки, это же вообще шрифтики.
2571.56 2573.68 "Анатолий Кулаков" Обязательно, тему шрифтики обязательно надо.
2573.68 2575.20 "Анатолий Кулаков" Можно угробить не один час.
2575.20 2580.04 "Анатолий Кулаков" Если у вас какие-то ассоциации с консолькой, как и из MS-DOS, то сейчас это давно не так.
2580.04 2591.36 "Анатолий Кулаков" Консольки сейчас отлично рендерят шрифты, не хуже чем Visual Studio, отлично поддерживают аллигаторы, многобитные цвета, могут выводить картинки, даже видео, если вам это сильно нужно.
2591.36 2599.32 "Анатолий Кулаков" То есть консольки сейчас очень прокаченные в плане визуальных настроек и самое главное преимущество всегда это они очень быстрые.
2599.32 2611.96 "Игорь Лабутин" Это да, хотя гитом я не всегда пользуюсь из консоли, я частенько хожу в Git Extensions, тоже микрософтская, ну нет, точнее около микрософтская тулза, написанная, я так понимаю, ребятами из Microsoft на дотнете.
2611.96 2619.08 "Игорь Лабутин" Это такой UI-ный клиент, но для таких типа а-ля гиков, типа как перфью в мире профайлеров.
2619.08 2621.36 "Анатолий Кулаков" Ну вот что-то мы все про мелочи да про мелочи.
2621.36 2631.12 "Анатолий Кулаков" Как ты, Игорь, думаешь, какое на свете самое большое, самое сложное, самое высокопроизводительное и самоотказоустойчивое дотнет-приложение?
2631.12 2636.52 "Игорь Лабутин" Ну, когда идёт речь о дотнет-больших проектах, мне приходит в голову 2 проекта.
2636.52 2640.48 "Игорь Лабутин" Это Stack Overflow и обычно речь идёт всегда про Bing.
2640.48 2642.08 "Игорь Лабутин" А, ну, Ажур ещё, кстати.
2642.08 2651.60 "Анатолий Кулаков" Ну, Ажур, наверное, сложно выделить как какое-то одно приложение, да, там, наверное, куча каких-то сервисов, но да, наверное, может быть, как-то можно там это сравнить и вытащить.
2651.60 2654.64 "Анатолий Кулаков" Stack Overflow не такой-то большой, оно крутится всего на одном сервере.
2654.64 2656.00 "Анатолий Кулаков" Это, наверное, самое большое приложение.
2656.00 2657.56 "Анатолий Кулаков" Ну, может быть, сервер большой.
2657.56 2659.00 "Анатолий Кулаков" Может быть, сервер большой.
2659.00 2661.00 "Анатолий Кулаков" Нет, давай поговорим о Bing.
2661.00 2662.96 "Анатолий Кулаков" Bing нам дал отличный повод.
2662.96 2667.64 "Анатолий Кулаков" Бен Уотсон, если кто умеет читать книжки, должен знать это имя обязательно.
2667.64 2678.40 "Анатолий Кулаков" Бен Уотсон сейчас работает как раз на бэкэнде Bing, и он разродился прекрасной статьёй, каким образом Bing мигрировал на дотнет-пятый.
2678.40 2698.08 "Анатолий Кулаков" Вот, по утверждениям самого Бена, он действительно считает Bing самым большим, сложным, высокопроизводительным и отказоустойчивым дотнет-аппликейшеном, который есть на данный момент в мире, и тем интереснее посмотреть на их результаты, на их проблемы и на их цифры.
2698.08 2704.36 "Анатолий Кулаков" Он утверждает, что миграция на дотнет-кор началась ещё с 2018 года.
2704.36 2718.56 "Анатолий Кулаков" Кстати, тут интересно заметить, что Bing Frontend, который тоже на дотнете, он переехал на дотнет-кор уже в 2018, и сейчас уже работает на дотнет-шестом превью-четыре.
2718.56 2720.68 "Анатолий Кулаков" То есть там парни вообще на передовой.
2720.68 2723.08 "Анатолий Кулаков" А как раз бэкэнд немножко затянулся.
2723.08 2726.80 "Анатолий Кулаков" Тут нужно немножко описать, что из себя представляет Bing.
2726.80 2733.64 "Анатолий Кулаков" Прежде всего это фронтенд, его мы касаться не будем, а вот бэкэнд представляет из себя такой хост.
2733.64 2744.96 "Анатолий Кулаков" В этот хост загружается куча плагинов, так сказать функций, и эти плагины разрабатывают абсолютно различные разработчики, компании, группы.
2744.96 2751.40 "Анатолий Кулаков" То есть это не уже не вочина бинга, а команды именно вот этого бэкэнда бинга.
2751.40 2758.24 "Анатолий Кулаков" Эти плагины грубируются в так называемый workflow, и все эти workflow запускаются в аппликейшен хосте.
2758.24 2762.88 "Анатолий Кулаков" Команда бэкэнд Bing делает продукт, который называется ZAP.
2762.88 2766.12 "Анатолий Кулаков" Об этом ZAP мы сейчас и будем с вами разговаривать.
2766.12 2777.12 "Анатолий Кулаков" И главная цель ZAP это как раз таки запускать вот эти workflow, которые собраны из кучи плагинов, из кучи функций, из кучи группировок, и делать это максимально быстро, максимально эффективно.
2777.12 2779.72 "Анатолий Кулаков" Вот все, что от него требуется, казалось бы.
2779.72 2782.44 "Анатолий Кулаков" Что из себя на данный момент представляет этот ZAP?
2782.44 2785.52 "Анатолий Кулаков" Это прежде всего тысячи машин.
2785.52 2805.88 "Анатолий Кулаков" На каждой машине работает порядка 900 тысяч вот этих workflow, 5,3 миллиона плагинов, процесс примерно отжирает, один процесс отжирает, это 50 гигабайт хипа, 2500 уникальных сборок у них, и джитст проходится по более чем 2 миллионам методов.
2805.88 2820.00 "Анатолий Кулаков" Типичный запрос бинга, который приходит на фронтенд, отдается к ZAP и запускается через все workflow и плагины, которые под это настроены, отрабатывает примерно на 12 тысяч нодах.
2820.00 2822.44 "Анатолий Кулаков" Один запрос, хорошая цифра.
2822.44 2829.68 "Анатолий Кулаков" Включает он в себя 2000 сетевых вызовов и отрабатывает там за сотни миллисекунд.
2829.68 2835.24 "Анатолий Кулаков" В принципе довольно, мне кажется, впечатляющие показатели для такого большого размаха.
2835.24 2852.48 "Анатолий Кулаков" Одна машина обычно обслуживает примерно 30 тысяч запросов в секунду, и они очень много собирают метрик, таймсирисов, и примерно собирают 6 миллионов ивентов в минуту, и где-то примерно на 500 миллионов таймсирисов.
2852.48 2863.88 "Анатолий Кулаков" Вот такие показатели, я думаю, действительно, если все это сравнить, то мало кто сможет состязаться с бингом в плане размаха дотнет приложения.
2863.88 2872.72 "Анатолий Кулаков" Может быть ты и прав, инфраструктура Ажура как-то к этому может приблизиться, но Ажур все-таки это какая-то другая весовая категория.
2872.72 2877.88 "Анатолий Кулаков" То есть если мы говорим про чисто прикладное приложение, то бинг скорее всего здесь вне конкуренции.
2877.88 2886.40 "Анатолий Кулаков" Итак, вот эти друзья переезжали много-много лет уже на дотнет корр, и наконец ехали-ехали и приехали.
2886.40 2888.72 "Анатолий Кулаков" Что же они собственно получили?
2888.72 2895.60 "Анатолий Кулаков" Прежде всего главная их метрика, одна из ключевых фишек, которые они обязаны демонстрировать, это задержка.
2895.60 2898.44 "Анатолий Кулаков" Задержка у них должна быть минимальная.
2898.44 2900.56 "Анатолий Кулаков" И в принципе они своего добились.
2900.56 2904.88 "Анатолий Кулаков" Задержку удалось снизить от 1% до 14%.
2904.88 2913.20 "Анатолий Кулаков" Это такая большая разница, зависит от того, какие там есть машины, какие на них приходят запросы, какие работают плагины, конфигурации и прочее.
2913.20 2922.32 "Анатолий Кулаков" Но в принципе Бен говорит, что 14% это вполне нормальное число, которое они смогли показать на уменьшение задержки.
2922.32 2928.40 "Анатолий Кулаков" Использование CPU стало на 27% меньше после перехода на дотнет корр.
2928.40 2934.20 "Анатолий Кулаков" Единственный показатель, который у них вырос, это тайминг ГЦ, время проведенное в гарбеж коллекторе.
2934.20 2954.00 "Анатолий Кулаков" Это он оправдывает тем, что они кардинально поменяли подход к использованию памяти, и плюс в дотнет корр было сильно переработано использование памяти, плюс они добавили конфигурацию после общения долгого с рантайм командой.
2954.00 2956.60 "Анатолий Кулаков" Они уменьшили размер ген 0.
2956.60 2964.84 "Анатолий Кулаков" Это позволило им дать большую пропускную способность, но при этом увеличило время, которое тратится на ГЦ.
2964.84 2969.44 "Анатолий Кулаков" Время на ГЦ у них увеличилось примерно на 0.8%.
2969.44 2983.44 "Анатолий Кулаков" Они считают, что за задержку, которую они получили, прирост скорости это вполне нормальные цифры, и они готовы на это пойти и понимают, почему этот коэффициент увеличился.
2983.44 2987.88 "Анатолий Кулаков" Во всем остальном продолжаются отличные оптимизации.
2987.88 2996.04 "Анатолий Кулаков" Например, такой важный показатель в распределенных приложениях, как конфликт блокировок, он же log contention, уменьшился на 36%.
2996.04 3001.40 "Анатолий Кулаков" Время старта может показаться странным, но это тоже для них очень важный параметр.
3001.40 3017.80 "Анатолий Кулаков" Например, они деплоются несколько раз в день, и поэтому в тот момент, когда уже деплой случился, но машина все еще прогревается, то есть она еще не начала принимать первый реальный трафик, в этот момент всегда хотелось сократить.
3017.80 3025.68 "Анатолий Кулаков" И он сократился на 25%, просто приложения стали быстрее стартовать и быстрее прогреваться, что тоже неплохой показатель.
3025.68 3031.92 "Анатолий Кулаков" Вот таких циферок они добились, им это удалось не просто так, у них были сложности.
3031.92 3032.92 "Анатолий Кулаков" Давайте посмотрим.
3032.92 3039.92 "Анатолий Кулаков" Сложности в принципе типичные, которые мы часто обсуждали, когда говорили про миграцию с большого фреймворка на корр.
3039.92 3055.92 "Анатолий Кулаков" Вообще всего у них было много плагинов, которые использовали C++ CLI, и на момент DotNet Core 2, на который они как раз переводились, DotNet Core 2 C++ CLI не поддерживал, поэтому все вызовы они перевели на PainValk.
3055.92 3065.40 "Анатолий Кулаков" И живут довольно-таки счастливо, и обратно с PainValk возвращаться никуда не собираются, ибо это бессмысленно даже после поддержки C++ CLI.
3065.40 3070.60 "Анатолий Кулаков" Также они столкнулись с тем, что некоторых частей, которые были в библиотеках, не было в Core.
3070.60 3078.00 "Анатолий Кулаков" Прежде всего это Memory Cache Library, также DotNet Remoting они потеряли, и DubCF.
3078.00 3081.60 "Анатолий Кулаков" Интересным здесь моментом было, чем они это заменили.
3081.60 3085.76 "Анатолий Кулаков" Ведь DubCF они заменили с помощью библиотечки Bond.
3085.76 3097.36 "Анатолий Кулаков" Это тоже такой транспортный протокол, транспортная библиотека от Microsoft, которая в принципе уже довольно не новая, хорошая, зрелая библиотека, но как-то она нигде не светится.
3097.36 3107.00 "Анатолий Кулаков" Я не знаю, почему они не рекламируют, может им нечем похвастаться какими-нибудь показателями скорости или размера, но я уже несколько раз ее встречал.
3107.00 3112.80 "Анатолий Кулаков" Может быть они ждут какого-то времени, чтобы она выстрелила и начнут ее рекламировать.
3112.80 3118.20 "Анатолий Кулаков" Просто интересный факт, что такая библиотека есть и используется в таком высоконагруженном сервисе как Bing.
3118.20 3123.16 "Анатолий Кулаков" Дальше они многое потеряли, переделали в HTTP функциональности.
3123.16 3132.36 "Анатолий Кулаков" Там был переписан практически в HTTP стек и они его на низкоуровнево использовали.
3132.36 3137.34 "Анатолий Кулаков" В общем там тоже у них были кое-какие наработки, пришлось немножко помучиться.
3137.34 3149.36 "Анатолий Кулаков" Они также помучились с custom assembly лоудингом, то есть они плагины загружали с помощью всяких хитрых механизмов, которые отрубила в .NET Core.
3149.36 3151.76 "Анатолий Кулаков" Надо сказать, что плагинов у них много.
3151.76 3161.80 "Анатолий Кулаков" Для примера, над переводом, миграцией этих плагинов работало параллельно 800 разработчиков со всего мира.
3161.80 3169.76 "Анатолий Кулаков" Это не только представители Microsoft, это не только представители Bing, это множество разработчиков от различных компаний, партнеров и так далее.
3169.76 3175.92 "Анатолий Кулаков" Но 800 штук только для того, чтобы промигрировать существующие плагины - это прям хорошо.
3175.92 3198.56 "Анатолий Кулаков" Они автоматически использовали инструменты анализа, которые помогали им проверить совместимость кода с .NET Core и выдать какие-то советы по оптимизации, а также сильно прокачали свою способность к общению, потому что Bing признался, что общаться и синхронизировать всех этих 800 разработчиков было очень даже непросто.
3198.56 3205.16 "Анатолий Кулаков" Нашли кучу багов в рантайм библиотеках, в сервизаторах, еще где-то зарепортили.
3205.16 3208.96 "Анатолий Кулаков" Тоже это правильный подход к тому, как надо мигрировать.
3208.96 3213.56 "Анатолий Кулаков" То есть не только себе делаешь хорошо, но еще и другим.
3213.56 3232.56 "Анатолий Кулаков" Очень сильно им недоставало перформанс-каунтеров, потому что они очень сильно следят за метриками, поэтому отсутствовало много перформанс-каунтеров на тот момент с .NET Core, отсутствовало много всяких IT-вишек и прочих средств для диагностики, на счет которых они страдали.
3232.56 3244.84 "Анатолий Кулаков" Но в принципе всему нашли замену или дождались каких-то новых инструментов, которые способны обеспечить то же самое качество отслеживаемой среды.
3244.84 3258.52 "Анатолий Кулаков" И на данный момент он говорит, что переход был полностью оправдан, они безумно счастливы, что перешли все эти дикие улучшения в производительности, в памяти, в поддерживаемости и прочего.
3258.52 3260.36 "Анатолий Кулаков" Несказанно радует всю команду.
3260.36 3264.40 "Анатолий Кулаков" Вот такой вот секс-эстория очередной про миграцию на .NET Core.
3264.40 3278.04 "Анатолий Кулаков" Теперь один из самых больших производительных и сложных сервисов на .NET, работает на .NET Core и соответственно будет быстрее уже мигрировать и на пятый, и на шестой, то есть самая сложная часть у них уже позади.
3278.04 3290.64 "Игорь Лабутин" Ну это прекрасно, когда такой большой продукт на самом деле является таким early-bird-customer, можно сказать, для фреймворка, который еще даже не зарелизен, значит скорее всего все основные баги отловят.
3290.64 3291.92 "Игорь Лабутин" Это нам полезно.
3291.92 3295.28 "Игорь Лабутин" Пойдем к более простым, наверное, темам.
3295.28 3305.36 "Игорь Лабутин" Когда вы работаете над своими проектами, у вас может возникать идея, что, или задача, во многие разные ваши csproj файлы добавить что-нибудь одинаковое.
3305.36 3319.36 "Игорь Лабутин" Например, вы переходите на .NET пятый и хотите везде поставить, что теперь вы хотите использовать последний C#, language версии 9, или вы хотите везде завязать общий NuGet пакет какой-нибудь во всех ваших csproj, или еще что-нибудь подобное.
3319.36 3329.32 "Игорь Лабутин" До SDK-стайл проектов, назовем это так, это было сделать можно, но требовало все-таки некоторых телодвижений.
3329.32 3337.56 "Игорь Лабутин" В SDK проектах стало чуть проще, возможно многие про эту фичу знают, но может быть кому-то это будет в новинку, поэтому мы про нее тоже расскажем.
3337.56 3344.04 "Игорь Лабутин" Поскольку попалась статья одного из авторов, который не знал про такую фичу, значит наверняка есть те, кто про нее не знает.
3344.04 3357.68 "Игорь Лабутин" Называется эта штука неофициально, так скажем, directory.build.props, то есть это специальный файлик, который вы можете написать, положить рядом где-то с вашим исходным кодом, и он будет влиять на то, что происходит в ваших csproj.
3357.68 3359.32 "Игорь Лабутин" Давайте разберемся поподробнее как.
3359.32 3361.40 "Игорь Лабутин" Во-первых, файликов два.
3361.40 3365.16 "Игорь Лабутин" Есть directory.build.props и есть directory.build.targets.
3365.16 3372.60 "Игорь Лабутин" Они более-менее очевидно намекают, что в первом хорошо бы определять properties, а во втором хорошо бы определять targets.
3372.60 3378.92 "Игорь Лабутин" На самом деле это не обязательно, но как правило это так используется по одной простой причине.
3378.92 3382.72 "Игорь Лабутин" Они немножко в разное время в билда используются.
3382.72 3396.08 "Игорь Лабутин" Значит если вы используете csproj и у вас он в sdk-стайле, то есть это вот новенький, который коротенький, где не перечисляются все ваши cs-файлы, то у вас автоматически будет работать следующая логика.
3396.08 3405.48 "Игорь Лабутин" Относительно того места, где находится ваш csproj, наверх по иерархии директорий, в момент билда будет искаться файлик под названием directory.build.props.
3405.48 3412.48 "Игорь Лабутин" И как только он найдется, поиск будет остановлен, а для этого файлика будет выполнена msbuild.directive.import.
3412.48 3428.04 "Игорь Лабутин" Точно так же в конце csproj ставится директива import для файлика directory.build.targets, которая позволяет заимпортить точно так же такой файлик, лежащий где-то выше по каталогам, в конец вашего csproj файла.
3428.04 3430.52 "Игорь Лабутин" И делается это вот для чего.
3430.52 3443.56 "Игорь Лабутин" В directory.build.props удобно определять, скажем так, properties, какие-то глобальные, которые вы потом сможете использовать во всех csproj файлах, потому что основное тело вашего csproj файла получается после этого импорта идет.
3443.56 3454.48 "Игорь Лабутин" А в directory.build.targets удобно переопределять или добавлять какие-то новые таргеты, потому что они импортятся после того, как заимпортились все таргеты из нудет-пакетов.
3454.48 3458.36 "Игорь Лабутин" То есть если вам нужно что-то закастомизировать, то вам как раз в directory.build.targets.
3458.36 3470.28 "Игорь Лабутин" Штука очень удобная, позволяет вынести практически, на самом деле, более-менее любые свойства и таргеты наверх и пошарить между всеми csproj.
3470.28 3474.56 "Игорь Лабутин" Мы это используем довольно активно для нескольких вещей.
3474.56 3485.48 "Игорь Лабутин" Во-первых, это позволяет проставить всем проектам всякие общие пропертии типа там warnings максимального level, всякие warnings and errors, lang version, если вы хотите.
3485.48 3487.80 "Игорь Лабутин" Это первый момент.
3487.80 3505.84 "Игорь Лабутин" Второй момент, надо понимать, что вот эти вот props, они задают какие-то пропертии, но поведение msbuild такое, что если кто-то дальше в основном csproj этот самый, такой же пропертий определит, то он будет зааверрайден.
3505.84 3507.88 "Игорь Лабутин" Это позволяет сделать забавную штуку.
3507.88 3512.36 "Игорь Лабутин" Например, у вас есть элементы package reference в обычном вашем csproj файле.
3512.36 3523.04 "Игорь Лабутин" Представьте, что у вас solution на, не знаю, десяток csproj, и вам хочется, чтобы во всех csproj, ну что обычно логично, использовался одна и та же версия noget-пакета.
3523.04 3536.32 "Игорь Лабутин" В принципе, в студии, если я правильно помню, сейчас есть solution-level package management, когда он более-менее, и в райдере тоже, который будет следить, что во всех пакета, во всех csproj все более-менее одинаковое.
3536.32 3546.68 "Игорь Лабутин" Но, во-первых, это было далеко не сразу, а во-вторых, ну, мы не всегда используем на самом деле студию, иногда csproj реактирует все руками, поэтому у нас сделано следующим образом.
3546.68 3554.76 "Игорь Лабутин" В csproj написано package reference и имену get-пакетиков, и какой, даже по-моему, атрибуты версии мы там не ставим.
3554.76 3563.04 "Игорь Лабутин" А в этом директоре build-props, в общем, там написано тоже package reference с тем же именем пакета и с версией уже.
3563.04 3571.04 "Игорь Лабутин" Таким образом, у нас получается, что во всех csproj package reference один и тот же, с одной и той же версией.
3571.04 3578.36 "Игорь Лабутин" И если нам нужно изменить версию пакета, то мы просто его меняем в одном единственном месте, и во всех проектах оно сразу меняется.
3578.36 3583.32 "Игорь Лабутин" Плюс, если есть какие-то общие пропертии, которые нам нужно задать, тоже можно менять теперь в одном месте.
3583.32 3599.36 "Игорь Лабутин" Очень удобная штука, и единственный минус этой штуки состоит в том, что поведение поиска, оно, как я сказал, довольно простое, то есть от текущего расположения csproj ищется вверх, пока не встретится один из этих файликов, и он импортится.
3599.36 3600.36 "Игорь Лабутин" И все.
3600.36 3627.68 "Игорь Лабутин" То есть, если вы хотите сделать, например, иерархию, то есть, например, на уровне solution или группы solution в условиях, у вас лежит общий, потом в каждом solution свой, или там в папочках внутри solution еще какие-то свои, например, для обычных проектов или для тестов у вас немножко разные, то там все-таки придется вот в этом directory build_props руками ставить импорт более высокоуровневого проекта, такого же файлика, потому что автоматически из-за вас это сделано не будет.
3627.68 3633.56 "Игорь Лабутин" Но это одна строчка, которая пишется просто в общем виде во все такие файлики, и все работает дальше.
3633.56 3654.04 "Анатолий Кулаков" Да, строчка вполне стандартная, вы ее, наверное, можете найти в официальной документации Microsoft, а вообще довольно таки программистская вещь, потому что как только вы находите какие-то общие директивы в вашем файле проекта, вам тут же хочется избавиться от дублирования кода и вытащить ее наверх.
3654.04 3658.52 "Анатолий Кулаков" Вот, действительно, как сказал Игорь, например, target_framework.
3658.52 3666.20 "Анатолий Кулаков" Таргет фреймворк пишется в каждый проект, но очень редко кому приходит в голову в солюшене иметь проекты с разным target_framework.
3666.20 3670.20 "Анатолий Кулаков" Ну, то есть это есть какая-то специфика приложения в этом.
3670.20 3672.40 "Анатолий Кулаков" Но там 99% никакой специфики нет.
3672.40 3674.92 "Анатолий Кулаков" У тебя просто все библиотеки должны быть одного target_framework.
3674.92 3679.32 "Анатолий Кулаков" Если вы переехали там с 5.1 на 5.2, они должны переехать абсолютно все.
3679.32 3692.28 "Анатолий Кулаков" И кажется разумным вынести вот такой вот target_framework как раз в верхнеуровневый, самый верхний directory build_props вместе с lang_version, с nullable, с thread_warnings, с error, с warning_level и прочим.
3692.28 3703.72 "Анатолий Кулаков" Я могу сказать, что у меня получилась такая вот небольшая иерархия, кроме вот этого высокоуровневого props, который лежит наверху и задает правила для всех пакетов.
3703.72 3707.32 "Анатолий Кулаков" У меня отдельно есть props для src.
3707.32 3720.28 "Анатолий Кулаков" Там в частности я прописываю все атрибуты пакетжей, то есть как будет называться пакет, какая там будет иконка, в каком он будет лежать, репозитории.
3720.28 3723.04 "Анатолий Кулаков" Вот все, что касается пакетжей.
3723.04 3728.76 "Анатолий Кулаков" Если у вас все библиотеки собираются в пакеты по неким там best practices, то это тоже очень удобно.
3728.76 3730.80 "Анатолий Кулаков" Также здесь я подключаю source link.
3730.80 3736.68 "Анатолий Кулаков" Все мои библиотеки, которые собираются в src, обязательно включают в себя source link со всеми атрибутами.
3736.68 3749.60 "Анатолий Кулаков" И еще очень полезная штука, о которой мало кто знает, но с помощью вот этих файлов props, так же как и с помощью любых файлов msbuild вы можете добавлять атрибуты в вашу сборку.
3749.60 3757.92 "Анатолий Кулаков" А это значит, что все библиотеки, которые у меня лежат в src, к ним добавляется специальный атрибут, который называется internal visible tool.
3757.92 3766.12 "Анатолий Кулаков" Наверное многие знают, что с помощью этого атрибута делаются доступны internal классики для того, чтобы их можно было использовать в тестах.
3766.12 3772.12 "Анатолий Кулаков" Вот теперь я ручками не загоняюсь ни в каждом файлике или ни в каждом проекте, не ставлю.
3772.12 3782.04 "Анатолий Кулаков" У меня все, что все проекты, которые лежат в src, к ним автоматически добавляется атрибут internal visible tool для тестов, для unit тестов, что довольно таки полезно.
3782.04 3786.84 "Анатолий Кулаков" В самих тестах, которые лежат у меня в отдельной папке, к ним не касается атрибут src.
3786.84 3789.80 "Анатолий Кулаков" У них есть папочка test.
3789.80 3797.56 "Анатолий Кулаков" Например, у них я выключаю флажок is packagable, то есть они у меня не включаются в проект.
3797.56 3800.96 "Анатолий Кулаков" И дополнительные какие-то вещи, которые я хочу видеть только в тестах.
3800.96 3805.20 "Анатолий Кулаков" Вот тоже полезные фичи, которые уже есть у вас.
3805.20 3812.56 "Анатолий Кулаков" Наверняка могут быть какие-то свои предпочтения, какие-то свои пожелания.
3812.56 3826.08 "Анатолий Кулаков" Нужно помнить, что msbuild очень мощный, то есть наверняка все, что вы захотите, вплоть до написания кода, запуска генераторов, копирования в какую-то папочку на ftp, все это он может делать.
3826.08 3828.04 "Анатолий Кулаков" Тут самое главное не увлекаться.
3828.04 3829.04 "Игорь Лабутин" Это точно.
3829.04 3831.04 "Игорь Лабутин" Ну что, пойдем дальше.
3831.04 3832.04 "Анатолий Кулаков" Пойдем.
3832.04 3835.20 "Анатолий Кулаков" Тут недавно GitHub заанонсировал свою новую фичу.
3835.20 3844.32 "Анатолий Кулаков" Так как мы активно пользуемся GitHub, мне кажется, это будет интересно для многих разработчиков, потому что GitHub это уже стандарт де-факто.
3844.32 3859.52 "Анатолий Кулаков" Если вы еще не умеете пользоваться GitHub или не приходилось, то обязательно создайте какой-нибудь банальный предпрочт, просто попробовать последний фреймворк и поработайте с интерфейсами, с экшенами, с воркфлоуами и прочим от GitHub.
3859.52 3861.76 "Анатолий Кулаков" Это довольно увлекательное зрелище.
3861.76 3869.08 "Анатолий Кулаков" Так вот, GitHub выяснил наконец, что одна из самых главных проблем на данный момент, это примитивность его исчезов.
3869.08 3875.68 "Анатолий Кулаков" Об этом многие кричали уже многие годы и вот наконец дошли руки.
3875.68 3901.96 "Анатолий Кулаков" Не знаю, связано ли это с покупкой Microsoft или нет, но я точно знаю, что компания .NET и рантайма, и фреймворка, и всех прочих, то есть команды очень сильно страдали из-за того, что исчезы довольно примитивные, плоские, у них очень мало настроек и поэтому они выдумывают вот всякие свои таблички на Blazor, поэтому они выдумывают какие-то странные лейблы, заводят кучу ботов, которые эти лейблы автоматически представляют.
3901.96 3903.76 "Анатолий Кулаков" В общем, извращаются как могут.
3903.76 3916.28 "Анатолий Кулаков" Каждый, кто работал хоть раз в кровавом интерпразе, знает, что любому ищетрекеру нужно 1500 полей, 10 тысяч ответственных, 50 флажочков и вот без всего этого жить абсолютно невозможно.
3916.28 3927.04 "Анатолий Кулаков" И GitHub, наконец, кажется, что пошел навстречу этим извращенцам и сделал большой-большой шаг вперед к своим ищусам.
3927.04 3938.00 "Анатолий Кулаков" В частности, он добавил кучу-кучу мелких улучшений, которые таки позволят большим сложным командам лучше себя чувствовать в инфраструктуре, в экосистеме GitHub.
3938.00 3957.48 "Анатолий Кулаков" Например, у борды GitHub уже были давно, то есть вы можете представить статусы ваших ищусов не как просто какие-то плоские задачки, а распределить их по комбандаске, распределить их по статусу, по ответственным и таскать между колонками.
3957.48 3960.80 "Анатолий Кулаков" Это было всегда, но для больших проектов это в основном неудобно.
3960.80 3964.04 "Анатолий Кулаков" Это удобно, когда проекты и команды небольшие.
3964.04 3974.00 "Анатолий Кулаков" Для больших проектов удобно уже использовать какие-то спрайтшоты, таблицы, таблицы с группировками и вот что-то такое более подходящее на Excel.
3974.00 3979.92 "Анатолий Кулаков" Вот возможность переключения бордов в такие таблицы с группировками была добавлена.
3979.92 3982.40 "Анатолий Кулаков" Выглядит это довольно красиво и удобно.
3982.40 4000.20 "Анатолий Кулаков" Дальше еще уже стал стандартно практически де-факто, люди используют его несознательно, такую технику как разделение одной большой ищесы на несколько маленьких и чтобы как-то эти маленькие были связаны с этой большой, в большом ищесе оставляют таски, то есть такие чекбоксики.
4000.20 4011.32 "Анатолий Кулаков" И когда какая-то маленькая задачка закрывается, чекбоксик в большой задачке отмечается и таким образом вы можете наблюдать все-таки прогресс основной большой задачи, который важен.
4011.32 4019.36 "Анатолий Кулаков" А маленькие ищесы, которые висят на разработчиках, они в принципе никакой информации о том, насколько фича готова, не дают.
4019.36 4026.32 "Анатолий Кулаков" Вот такое выделение очень часто встречается, когда вы можете опять же наблюдать в дотнетных репозиториях очень часто.
4026.32 4029.40 "Анатолий Кулаков" Вот разработчики решили как раз-таки улучшить эту историю.
4029.40 4037.68 "Анатолий Кулаков" Они сделали возможность привязывать вот эти чекбоксики к настоящим ищесам и это дало следующие плюсы.
4037.68 4040.20 "Анатолий Кулаков" Во-первых, у вас автоматически отслеживается статус.
4040.20 4046.32 "Анатолий Кулаков" Как только ищес в гитхабе закрылась, чекбоксик автоматически в родительской задаче проставляется как сделанный.
4046.32 4051.04 "Анатолий Кулаков" Это позволяет отслеживать то, насколько родительская задача уже готова.
4051.04 4061.32 "Анатолий Кулаков" Второй интересный плюс, с другой стороны, когда вы выполняете маленькую задачку, вот эту одну часть, вам хочется все-таки иметь перед глазами полную картину.
4061.32 4065.92 "Анатолий Кулаков" То есть вам хочется найти связанную родительскую задачу, связанный эпик.
4065.92 4074.14 "Анатолий Кулаков" И вот там проставляется такой удобный референс на то, частью какого большого целого является эта маленькая подзадачка.
4074.14 4075.64 "Анатолий Кулаков" Что тоже довольно-таки удобно.
4075.64 4079.60 "Анатолий Кулаков" Появилась, наконец, возможность добавления кастом полей.
4079.60 4088.48 "Анатолий Кулаков" То есть можно нагромоздить себе приоритетов, сторипоинтов, каких-то дедлайнов, заметок, ссылок, все что угодно, все что вам нравится.
4088.48 4092.04 "Анатолий Кулаков" Любые дополнительные свои поля можете добавлять.
4092.04 4097.04 "Анатолий Кулаков" По ним будет и группировка, сортировка, фильтрация, все как положено в нормальном приложении.
4097.04 4100.68 "Анатолий Кулаков" Еще одна интересная фича - это автоматизация с помощью кода.
4100.68 4112.80 "Анатолий Кулаков" В GitHub Workflow не только поддерживает экшены, какими пользуемся мы сейчас очень активно во всяких приложениях, но он также может автоматизировать любые события, происходящие в вашем репозитории.
4112.80 4124.60 "Анатолий Кулаков" Например, когда создается issue, ей можно по определенным скриптам поставить какие-то лейблы, назначить какого-то сотрудника, вычислить приоритеты и вот эти вот прочие вещи автоматически проставить.
4124.60 4134.84 "Анатолий Кулаков" Сейчас это в основном делается с помощью вебхуков, ботов, но кажется, что использование GitHub Workflow, GitHub экшенов - это более продвинутый, более правильный путь.
4134.84 4143.88 "Анатолий Кулаков" И самое главное, что все эти файлики будут храниться непосредственно в репозитории, версионироваться, бранчеваться с ним и давать много других очень полезных плюсов.
4143.88 4154.84 "Анатолий Кулаков" И также обещают, что вот это от Automation с помощью кода будет обильно использовать GraphQL API, которым пронизан практически весь GitHub.
4154.84 4158.48 "Анатолий Кулаков" То есть, очень тесная будет интеграция, что тоже не может не радовать.
4158.48 4168.52 "Анатолий Кулаков" Появилась возможность загрузки видеофайлов в комменты, если вам вдруг этого не хватало, вы хотите загрузить свой любимый мультик, но не злоупотребляете.
4168.52 4174.08 "Анатолий Кулаков" А также на вопрос, как это скажется на цене - никак.
4174.08 4179.76 "Анатолий Кулаков" Это все входит в стандартный пакет GitHub, также будет доступно в обычном фри версии.
4179.76 4185.72 "Анатолий Кулаков" То есть, все мы с вами это увидим, ну и естественно, всякие проплаченные интерпрайзы тоже это увидят.
4185.72 4196.64 "Анатолий Кулаков" Сейчас данный проект находится в стадии бета, вы можете попросить оставить заявку и вас возможно подключат к ветке бета-тестировщиков.
4196.64 4205.56 "Анатолий Кулаков" А мы, соответственно, ждем релиза и будем надеяться, что все будет так же красиво и так же надежно, как нам это показывает на картинках.
4205.56 4206.56 "Игорь Лабутин" Прекрасно.
4206.56 4209.48 "Игорь Лабутин" Мне кажется, на этом уже можно завершаться.
4209.48 4212.20 "Игорь Лабутин" Мы сегодня много чего посмотрели.
4212.20 4220.44 "Игорь Лабутин" У нас осталась одна нетехническая тема, которая у нас иногда добавляется в подкаст, так что давай немножко поговорим про другие подкасты.
4220.44 4232.08 "Анатолий Кулаков" Да, мы всегда за здоровую конкуренцию и богатый кругозор наших слушателей, поэтому немножко интересных, на мой взгляд, выпусков, которые вы могли бы пропустить и вам будет интересно их послушать.
4232.08 4238.52 "Анатолий Кулаков" Прежде всего, мой любимый Владимир Хориков заходил снова в DevZen на вторую часть, я напомню, что он уже там бывал.
4238.52 4240.72 "Анатолий Кулаков" Всего можно послушать два выпуска с ним.
4240.72 4247.56 "Анатолий Кулаков" Опять обсуждались Bound Context, DDD, Агрегаты, Value Objects, Entity, Ubiquitous Language, Event Storming.
4247.56 4254.40 "Анатолий Кулаков" Короче, вот эти все-все-все замудрые слова, которыми брыжит из каждого тюга последние годы каждый самоучка.
4254.40 4263.76 "Анатолий Кулаков" Есть возможность как раз-таки узнать от профессионала, что они значат, как они употребляются.
4263.76 4272.80 "Анатолий Кулаков" Естественно, не глубоко, потому что эпизоды всего там часа или два, но базовые знания, базовые концепции вы точно сможете от Владимира получить.
4272.80 4280.36 "Анатолий Кулаков" Если вам понравится, крайне рекомендую его блог, где все это разжевано в подробностях бесплатно и без SMS.
4280.36 4283.04 "Анатолий Кулаков" Необычный выпуск для подлодки, который мне понравился.
4283.04 4291.44 "Анатолий Кулаков" Вообще, я заметил, что у меня у подлодки очень редко впечатляют технические выпуски, но зато я часто нахожу в нетехнических выпусках что-то интересное.
4291.44 4296.28 "Анатолий Кулаков" Если про некоторые мне стыдно признаться, вот, то вот этот честно рекомендую.
4296.28 4298.24 "Анатолий Кулаков" Это переработка вторсырья.
4298.24 4301.40 "Анатолий Кулаков" Казалось бы, где экологи, а где мы?
4301.40 4316.28 "Анатолий Кулаков" Но меня этот выпуск порадовал тем, что туда пришла именно нормальный эколог, который очень хорошо разрушил миф от этих психанутых зеленых, которые до каждого угла кричат абсолютно необоснованные глупости.
4316.28 4331.16 "Анатолий Кулаков" Один из интересных фактов, то что бумажные пакеты, которые вам навязывают, могут навязывать в модных магазинах, якобы экофрендли, все вот эти бумажные стаканчики, бумажная одноразовая посуда, все это большое-большое зло.
4331.16 4338.24 "Анатолий Кулаков" То есть, намного экологичней, чище, красивее и полезнее для природы взять пластиковый пакет, чем бумажный.
4338.24 4339.24 "Анатолий Кулаков" Почему?
4339.24 4343.36 "Анатолий Кулаков" Как раз таки, если вы еще этого не знали, послушайте в этом выпуске.
4343.36 4356.12 "Анатолий Кулаков" И вот там многое рассказывалось про такие маркетинговые уловки зеленых, якобы псевдозеленых, которые просто на словах втирают красивые картинки, но ничего по факту хорошего не делают.
4356.12 4360.64 "Анатолий Кулаков" А там рассказано, как работает переработка мусора у нас, в мире, что с этим вообще происходит.
4360.64 4369.60 "Анатолий Кулаков" Ну, в общем, довольно интересная подборка для тех, кто следит со стороны и может быть, кому эта тема не безразлична.
4369.60 4388.72 "Анатолий Кулаков" Вот еще мы уже упоминали новые плейлисты JetBrains, которые называются "OSS PowerUps", там где Матя Скоуч обсуждает с авторами библиотек всякие полезные, опенсорсные, бесплатные, красивые дотные библиотечки.
4388.72 4391.64 "Анатолий Кулаков" И хочется выделить библиотечку SpecFlow.
4391.64 4400.32 "Анатолий Кулаков" SpecFlow - это специальная библиотека для behavior-driven development, то есть она превращает вашу спецификацию в исполняемый код.
4400.32 4409.84 "Анатолий Кулаков" Это вот голубая мечта многих кейщиков, многих тестировщиков и, что там, программистов, когда можно писать тесты на обычном человеческом языке.
4409.84 4413.76 "Анатолий Кулаков" То есть их может писать бизнес-аналитик.
4413.76 4420.84 "Анатолий Кулаков" Ну и самое, наверное, все-таки главное - писать, скорее всего, не обязательно, как мне кажется, в реальной жизни.
4420.84 4422.48 "Анатолий Кулаков" Самое главное - их может читать бизнес-аналитик.
4422.48 4426.88 "Анатолий Кулаков" Вот читать - вот этот плюс у SpecFlow не отнять.
4426.88 4442.16 "Анатолий Кулаков" Они действительно очень хорошо читаются, они пишутся на естественном языке и очень часто ситуация, когда в сложных проектах аналитики реально могут находить ошибки в тестах или, может быть, даже если действительно прошаренные специалисты с вами работают, то и писать тоже.
4442.16 4449.16 "Анатолий Кулаков" Если вы ни разу не видели про SpecFlow, посмотрите, можно просто пробежаться по документации или посмотреть видео с Matias.
4449.16 4453.80 "Анатолий Кулаков" Также были упомянуты нами ранее Fluent Validation, Fluent Assertion.
4453.80 4456.64 "Анатолий Кулаков" Если вы их не знали, то тоже обратите внимание.
4456.64 4467.96 "Анатолий Кулаков" Уже вышли выпуски про Snoop, это DPF Spy, специальное приложение, которое позволяет вам отобразить компоненты DPF в вероятной структуре.
4467.96 4470.60 "Анатолий Кулаков" Безумно полезная штука, если вы используете DPF.
4470.60 4485.04 "Анатолий Кулаков" Silk.net – это специальная прослойка над, по-моему, всеми графическими примитивными библиотеками, которыми только есть, включая DirectX, OpenGL, Vulkan, OpenCL, OpenAL, SDL.
4485.04 4487.00 "Анатолий Кулаков" В общем, много их.
4487.00 4492.88 "Анатолий Кулаков" Если вы как-то связаны с графикой на таком уровне, наверняка тоже вам будет интересно данное видео.
4492.88 4495.84 "Анатолий Кулаков" И еще есть про инструмент Verify.
4495.84 4511.92 "Анатолий Кулаков" Это специальная тулза, которая способна снимать снапшоты со сложных объектов и со сложных данных с большим количеством связей, со сложными типами, перемаппингами, совместимостями и сравнивать это с каким-то эталоном.
4511.92 4515.00 "Анатолий Кулаков" Немножко необычный способ тестирования.
4515.00 4517.16 "Анатолий Кулаков" Это используется прежде всего в тестировании.
4517.16 4529.40 "Анатолий Кулаков" Немножко необычный способ тестирования, но если почитать юзкейс и посмотреть то, как автор рассказывает, где и как это применяется, может быть это как раз та ниша, которую вы давно искали.
4529.40 4536.20 "Анатолий Кулаков" То есть там действительно решаются сложные задачи с помощью этого инструмента и довольно эффективно и интересно.
4536.20 4539.76 "Анатолий Кулаков" В .NET Rocks недавно заходил Джефри Рихтер.
4539.76 4542.24 "Анатолий Кулаков" Это человек, которого всегда приятно слушать.
4542.24 4547.28 "Анатолий Кулаков" Сейчас Джефри занимается проектированием API и SDK в Ажуре.
4547.28 4553.92 "Анатолий Кулаков" Если кто не знает, у него есть шикарный курс про HTTP API на YouTube.
4553.92 4561.28 "Анатолий Кулаков" Он полностью бесплатный и очень легкие в освоении и прекрасным языком доносится.
4561.28 4562.28 "Анатолий Кулаков" Посмотрите.
4562.28 4568.44 "Анатолий Кулаков" А в частности в этом подкасте в .NET Rocks они обсуждали то же самое проектирование API.
4568.44 4571.04 "Анатолий Кулаков" Проектирование API как в Ажуре, так и в общем.
4571.04 4576.20 "Анатолий Кулаков" Интересной особенностью было то, как они разрабатывают SDK под несколько языков.
4576.20 4581.52 "Анатолий Кулаков" Как они пытаются какие-то общие функции, которые обязаны быть в каждом SDK.
4581.52 4585.96 "Анатолий Кулаков" Например, трассировка, логирование, отмена, прогресс бар.
4585.96 4593.44 "Анатолий Кулаков" Как они пытаются эти общие концепции геометрически внедрить под каждый язык, под каждую операционную систему.
4593.44 4597.80 "Анатолий Кулаков" Практически под все, к чему развернута Ажура.
4597.80 4600.32 "Анатолий Кулаков" Хорошая тема поднималась про breaking changes.
4600.32 4607.60 "Анатолий Кулаков" Можно ли, как это делать, стоит или не стоит, какие есть хитрости для того, чтобы их избежать.
4607.60 4614.32 "Анатолий Кулаков" И в принципе, что еще связывает Джеффри Рихтера и прогрессивный метал.
4614.32 4617.96 "Анатолий Кулаков" Об этом вы узнаете в подкасте .NET Rocks.
4617.96 4621.52 "Анатолий Кулаков" Наверное последний подкаст, который сегодня хочется упомянуть.
4621.52 4625.52 "Анатолий Кулаков" Я послушал Adventure in .NET, это подкаст на английском языке.
4625.52 4632.28 "Анатолий Кулаков" И в принципе, ничем он не примечательен, если бы не сходил бы к ним в гости наш любимый Макс Аршинов.
4632.28 4635.24 "Анатолий Кулаков" Макс рассказывал им про Expression Trees.
4635.24 4642.36 "Анатолий Кулаков" Это один из самых первых или даже может быть первый докладов, который Макс сделал на .NEXT.
4642.36 4652.44 "Анатолий Кулаков" То есть, та тема, с которым его узнало русское .NET сообщество в видеоредакции.
4652.44 4657.00 "Анатолий Кулаков" То есть на хабре его знали уже давно, а вот докладами он нас до этого не баловал.
4657.00 4672.00 "Анатолий Кулаков" Он решил этот доклад сделать на NDC и успешно сделал на 2020, если кому-то интересны Expression Trees, что там Макс к ним добавил и какое у него видение сейчас этой темы.
4672.00 4676.00 "Анатолий Кулаков" Можно посмотреть его доклад с NDC, но я бы все-таки остановился на подкасте.
4676.00 4679.16 "Анатолий Кулаков" В подкасте также они обсуждали Expression Trees.
4679.16 4698.96 "Анатолий Кулаков" Там можно послушать немножко про биографию, как он докатился до жизни такой, что его интересует, хобби, как у нас любимый Аршинов отдыхает, какие у него есть планы, идеи, безусловно про Expression Trees, его позиция про F#, что он пробовал, что ему понравилось, что нет.
4698.96 4704.04 "Анатолий Кулаков" В общем, всем фанатам Макса Аршинова тоже можно ознакомиться.
4704.04 4706.80 "Анатолий Кулаков" На этом, наверное, у меня список закончился.
4706.80 4710.64 "Игорь Лабутин" Ну и тогда давайте потихонечку завершаться.
4710.64 4717.92 "Игорь Лабутин" Мы сегодня поговорили, ну не то чтобы о большом количестве тем, но тем не менее много чего успели обсудить.
4717.92 4722.20 "Игорь Лабутин" Очередной Endpoint 6 Preview 6, подробно разобрали, что в него вошло.
4722.20 4727.08 "Игорь Лабутин" Теперь у нас есть, надеюсь, достаточно регулярный поставщик новостей.
4727.08 4734.00 "Игорь Лабутин" Как вижу, Studio 2022 вышел, Preview 2, и вижу, в Studio Format тоже намечаются определенные изменения.
4734.00 4739.52 "Игорь Лабутин" Посмотрели, что нам дали Source генераторы в System.js на сериализации.
4739.52 4746.24 "Игорь Лабутин" Разобрались с новым Windows Terminal Preview и выяснили, что же используют авторы подкаста, ведущие.
4746.24 4762.60 "Игорь Лабутин" Посмотрели, как Bing переехал на новый DotNet 5, Preview 4, если я правильно тебя услышал, и как он теперь на нем здорово живет, и, соответственно, как мы все будем жить здорово на новом DotNet 5, на новом DotNet 6, когда туда все переедет.
4762.60 4770.52 "Игорь Лабутин" Вспомнили такую фичу Directory Built Props, которая позволит вам много чего общего делать на ваших CSS-проджах.
4770.52 4784.36 "Игорь Лабутин" Обсудили нововведение GitHub, что же можно сделать с плоским списком issues, ну и Толя образовал те подкасты, которые он недавно или относительно недавно прослушал, которые могут быть вам тоже интересны.
4784.36 4788.64 "Анатолий Кулаков" И я думаю, сейчас самое время раздать немножко лицензий.
4788.64 4791.08 "Анатолий Кулаков" Давно у нас не было лицензий.
4791.08 4797.28 "Анатолий Кулаков" Давайте, друзья, снова повторим шикарные истории про расшаривание нашего подкаста.
4797.28 4806.80 "Анатолий Кулаков" Две лицензии уйдет коммендаторам на YouTube к этому выпуску, одна лицензия тем, кто расшарил нас в ВКонтакте, одна лицензия для тех, кто расшарил нас в Твиттере.
4806.80 4812.08 "Анатолий Кулаков" Розыгрыш будет ровно через 7 дней после даты публикации этого выпуска.
4812.08 4814.28 "Анатолий Кулаков" Победителя определит честный рандом.
4814.28 4816.52 "Анатолий Кулаков" Всего 4 лицензии ждут вас.
4816.52 4832.96 "Анатолий Кулаков" Пожалуйста, помогите нам стать популярнее, расскажите о нам в ваших друзьях, а мы постараемся вас не подвести и всегда радовать вас свежими новостями, интересными библиотеками, личностями, людьми и прочим интересным из мира .NET.
4832.96 4838.72 "Анатолий Кулаков" Если захотите нас поддержать совсем-совсем очень сильно, заходите на наши сайты на Boosty и Patreon.
4838.72 4841.36 "Игорь Лабутин" А на этом 33-й выпуск заканчивается.
4841.36 4842.84 "Игорь Лабутин" С вами был Игорь Лабутин.
4842.84 4843.84 "Анатолий Кулаков" И Анатолий Кулаков.
4843.84 4844.84 "Анатолий Кулаков" Всем пока.
4844.84 4845.34 "Игорь Лабутин" Пока.
