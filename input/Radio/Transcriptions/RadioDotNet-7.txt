0.00 5.76 "Анатолий Кулаков" Здравствуйте, дорогие друзья!
5.76 8.00 "Анатолий Кулаков" В эфире снова Radio.net.
8.00 10.24 "Анатолий Кулаков" Мы приветствуем вас на седьмом выпуске.
10.24 11.96 "Анатолий Кулаков" Сегодня с вами Анатолий Кулаков.
11.96 12.96 "Игорь Лабутин" И Игорь Лабутин.
12.96 13.96 "Игорь Лабутин" Всем привет!
13.96 17.84 "Анатолий Кулаков" И начать сегодняшний выпуск хотелось бы с радостной новости.
17.84 19.44 "Анатолий Кулаков" Мы выпустили книгу.
19.44 21.60 "Анатолий Кулаков" Ну, как мы.
21.60 26.56 "Анатолий Кулаков" Не мы, конечно, а "Бизнадельский дом" не выпустили, а перевели.
26.56 31.44 "Анатолий Кулаков" И не книгу, а гениальный труд Конрада Кокоса.
31.44 34.36 "Анатолий Кулаков" Многие, наверное, из вас уже успели прочитать оригинал на английском.
34.36 42.72 "Анатолий Кулаков" Издательство ДМК занялось переводом и попросило сообщество Dotnet.ru помочь им в технической корректировке, помочь им с техническим переводом.
42.72 44.64 "Анатолий Кулаков" К чему мы радостно присоединились.
44.64 46.20 "Анатолий Кулаков" Опыт был для нас абсолютно новым.
46.20 56.60 "Анатолий Кулаков" Мы открыли для себя большой удивительный мир издательских домов, неочевидности русской терминологии и прочего, и тому подобное.
56.60 68.60 "Анатолий Кулаков" Ну, я, наверное, предлагаю Игорю как одному из главных технических корректоров, одного из главных переводчиков, кто непосредственно участвовал в процессе, немного рассказать про этот замечательный опыт.
68.60 70.36 "Анатолий Кулаков" Как тебе, Игорь, понравилось?
70.36 72.48 "Игорь Лабутин" Да, мне в целом понравилось.
72.48 92.80 "Игорь Лабутин" Мне было интересно поучаствовать с этой стороны книги, скажем так, потому что традиционно качество русских переводов в такой программистской литературе, оно не всегда высокое, но бывает разным, но в основном все-таки оставляет желать лучшего, особенно для человека, который знает английский.
92.80 97.80 "Игорь Лабутин" И мы действительно получили уже переведенную книгу.
97.80 103.40 "Игорь Лабутин" Это был, ну, не подстрочный перевод, но достаточно близкий к нему.
103.40 115.00 "Игорь Лабутин" И наша задача была в том, чтобы привести его в какой-то хороший, удобочитаемый вид, который будет понятен тем, кто занимается уже программированием на платформе .NET.
115.00 130.60 "Игорь Лабутин" Поскольку книжка ориентирована на достаточно продвинутых читателей, как мне кажется, и новички вряд ли пойдут ее читать прямо так, как свою первую книгу, то мы предполагали, что какие-то основы все-таки терминологии читателям уже известны.
130.60 137.44 "Игорь Лабутин" Но как оказалось, переводить .NET с английского на русский очень и очень непросто.
137.44 152.92 "Игорь Лабутин" Дело в том, что используется довольно много терминологии, которые очень специфичны для исходников .NET, и которая была придумана именно конкретно в исходниках .NET, и подобрать соответствующие русские аналоги было местами очень непросто.
152.92 173.28 "Игорь Лабутин" Всего книга состоит из, если я правильно помню, 14 глав, и по сути команда корректоров работала над этими главами параллельно, одновременно составляя словарь всех терминов, и самое сложное было синхронизировать корректуру всех глав, чтобы вся терминология была более или менее одинаковой.
173.28 175.32 "Игорь Лабутин" Мне кажется, у нас получилось.
175.32 177.64 "Игорь Лабутин" Огромное спасибо всем тем, кто участвовал.
177.64 180.68 "Игорь Лабутин" Хочется уже скоро увидеть печатный вариант книжки.
180.68 195.08 "Игорь Лабутин" И в целом мы надеемся, что такая практика сотрудничества с профильными комьюнити принесет нам больше качественных переводов не только в .NET, но и вообще во всей около-IT-шной литературе.
195.08 199.68 "Анатолий Кулаков" Да, книга релизится в апреле, сейчас она доступна для предзаказа.
199.68 210.60 "Анатолий Кулаков" У нас для вас есть промокод на скидку 25%, поэтому заходите к нам в ShowNotes, забирайте промокод и наслаждайтесь переводом.
210.60 222.52 "Анатолий Кулаков" Кстати, мы после релиза скорее всего создадим какой-нибудь отдельный чатик, где будем собирать ваш фидбэк о переводе и о том, как можно улучшить некоторые слова, неочевидные предложения, какую-нибудь терминологию и так далее.
222.52 231.08 "Анатолий Кулаков" Поэтому если вы хотите как-то активно поучаствовать в процессе будущих словарей, будущих переводов, то милости просим к нам на помощь.
231.08 232.96 "Анатолий Кулаков" Мы всегда рады вашему фидбэку.
232.96 234.84 "Анатолий Кулаков" А теперь давай вернемся к остальным темам.
234.84 239.12 "Анатолий Кулаков" Все-таки у нас прошло какое-то время и накопилось много интересных анонсов.
239.12 243.04 "Анатолий Кулаков" В частности, был заанонсирован .NET 5 Preview 1.
243.04 249.60 "Игорь Лабутин" Да, 16 марта вышел анонс, что наконец-таки мы хоть что-то узнали про .NET 5.
249.60 256.96 "Игорь Лабутин" Пока главной новостью было то, что его действительно-таки переименовали в .NET 5, именно под таким именем он живет.
256.96 260.84 "Игорь Лабутин" Тем не менее, какие-то новинки уже появились.
260.84 269.08 "Игорь Лабутин" И первое, про что хочется сказать, это вообще цели того, как будет развиваться .NET 5.
269.08 272.20 "Игорь Лабутин" Как известно, релиз .NET 5 запланирован на ноябрь этого года.
272.20 279.96 "Игорь Лабутин" Это будет не LTS-релиз, и поэтому пока для продакшена рекомендуется все-таки оставаться на .NET Core 3.1.
279.96 284.88 "Игорь Лабутин" Но тем не менее, в .NET 5 заявлены интересные цели, и давайте сначала посмотрим на них.
284.88 291.80 "Анатолий Кулаков" Тут стоит прежде всего напомнить, что .NET 5 — это именно ветка от .NET Core, несмотря на название.
291.80 297.84 "Анатолий Кулаков" Если вы как-то проспали этот момент, то большой .NET Framework заканчивает свое существование.
297.84 304.44 "Анатолий Кулаков" И дальше упростили имя именно .NET Core, и дальше будет развиваться именно ветка .NET Core.
304.44 310.12 "Анатолий Кулаков" Итак, зачем же нам вообще постеллировался .NET 5, какие прежде всего цели он ставит перед собой?
310.12 312.40 "Анатолий Кулаков" Прежде всего, это объединение всех .NET SDK.
312.40 314.24 "Анатолий Кулаков" У нас их сейчас много.
314.24 330.16 "Анатолий Кулаков" Прежде всего, это Mono, .NET Framework, .NET Core, объединение BCL, объединение Runtimes и объединение всего, чего только можно объединить, чтобы у нас теперь был все-таки один фреймворк, с помощью которого можно писать практически подо все.
330.16 340.64 "Анатолий Кулаков" Например, нативные приложения под множество различных платформ, под Windows, под Linux, под macOS, под мобилки, под вебки, под все подряд.
340.64 347.60 "Анатолий Кулаков" Это должно работать из-за одного фреймворка, это должно писаться на одном языке и запускаться, где бы вам не захотелось.
347.60 352.92 "Анатолий Кулаков" Еще одна интересная вещь — это ответвление мультиплатформы со стороны Blazor.
352.92 358.64 "Анатолий Кулаков" Blazor — это WebAssembly, которая может исполняться в браузере, но Microsoft этого мало.
358.64 362.96 "Анатолий Кулаков" Microsoft хочет затащить Blazor и на десктоп, и на мобилки, и отовсюду.
362.96 372.96 "Анатолий Кулаков" Может быть, что одним из главных UI-библиотек, которые нас ожидают в будущем, кроссплатформных UI-библиотек, может выступить именно Blazor.
372.96 379.04 "Анатолий Кулаков" У Microsoft тоже на него очень большие надежды, и это стратегическое направление для .NET 5.
379.04 383.24 "Игорь Лабутин" А еще одно направление — это, конечно же, облака.
383.24 391.08 "Игорь Лабутин" И основная проблема текущих облачных приложений, когда они разрабатываются на платформе .NET, это достаточно немалый вес.
391.08 404.40 "Игорь Лабутин" То есть .NET Core — это круто и здорово, он не требует установки никакого рантайма, но он тащит с собой огромное количество дл, которые научились, конечно, минимизировать, научились выделять только нужные, но тем не менее, все равно это много.
404.40 429.28 "Игорь Лабутин" И цель .NET 5 — это получить то, что мы можем называть Cloud Native Applications, то есть это единая экзешка, желательно очень маленькая, в анонсе заявлено меньше 50 мегабайт, для того, чтобы эффективно реализовывать микросервисы, таких в контейнерах, ну и локально тоже, если надо, мы тоже будем рады маленьким тулам, которые не занимают много места и пакуются в один-единый экзешник.
429.28 430.28 "Анатолий Кулаков" Привет, го!
430.28 441.08 "Анатолий Кулаков" Ну, естественно, куча улучшений по перформансу, куча улучшений по алгоритмам, лучшая поддержка контейнеров, заявлена поддержка HTTP 3 и много-много чего еще.
441.08 446.32 "Анатолий Кулаков" В превью первом, конкретно, можно уже наблюдать какие-то первые шаги.
446.32 448.64 "Анатолий Кулаков" В частности, мы начали с дебаггинга.
448.64 454.80 "Анатолий Кулаков" Появились диагностические тулзы, которые позволяют нам определять, какие ассембли загружаются в вашу программу.
454.80 463.92 "Анатолий Кулаков" Эти диагностические тулзы теперь встроены в CLR, то есть с помощью CLR вы можете отследить, какие сборки загружаются в вашей программе.
463.92 465.32 "Игорь Лабутин" Да, вы могли это...
465.32 480.16 "Игорь Лабутин" Естественно, это не что-то суперновое, это существовало много лет в виде фьюжн-логов в полноценном тендфреймворке, сейчас речь идет о том, что это все сделано на основе архитектуры Event Pipes и, соответственно, кроссплатформинга, доступного
480.16 491.06 "Анатолий Кулаков" везде. Также в Event Pipes были добавлены специальные методы для профилирования ваших приложений, потому что раньше в основном профайлеры пользовались TV-шками и снимали все очень важные метрики оттуда.
491.06 494.64 "Анатолий Кулаков" Сейчас это можно делать с помощью Event Pipes.
494.64 499.56 "Анатолий Кулаков" Event Pipes — это новый кроссплатформингный механизм для диагностик .NET-приложений, и не только.
499.56 507.76 "Анатолий Кулаков" И продолжается консолидация GitHub-репозиториев, то есть продолжается сливаться, переименовываться и приводиться к одному имени.
507.76 515.36 "Игорь Лабутин" Да, сейчас у нас, по сути, если вам интересно посмотреть на исходники .NET, вам должно быть интересно три основных репозитория.
515.36 520.84 "Игорь Лабутин" Это .NET/Runtime, туда ушли сам Runtime и стандартная библиотека CoreFX.
520.84 529.04 "Игорь Лабутин" Потом есть .NET/SDK, туда ушли как раз-таки SDK, все Command Line Tool и есть .NET/ISPNetCore, там, соответственно, живет ISPNet.
529.04 537.76 "Игорь Лабутин" И еще одна вещь, которую достаточно интересно анонсировали в .NET 5 — это поддержка архитектуры ARM64.
537.76 548.44 "Игорь Лабутин" Это, видимо, Microsoft необходим для своих серфисов, и важная штука, что ARM64 поддержка будет за бэкпорчу, но в .NET Core 3.1 тоже.
548.44 553.68 "Игорь Лабутин" Так что ждем, когда все это можно будет запускать на ARM-ах и радоваться.
553.68 557.20 "Анатолий Кулаков" Так, следом за .NET 5 подоспел и Entity Framework.
557.20 558.60 "Анатолий Кулаков" Они обычно выходят вместе.
558.60 565.60 "Анатолий Кулаков" У Entity Framework хочется отметить несколько ключевых фич, которые были добавлены в превью 1.
565.60 567.96 "Анатолий Кулаков" Это упрощение логирования.
567.96 573.08 "Анатолий Кулаков" Теперь у DB Context Option Builder есть специальный экшен, к которому передаются все логи.
573.08 580.12 "Анатолий Кулаков" Если вы его присвоите для какого-нибудь своего инструмента логирования, то все логи будут сыпаться прямо к вам.
580.12 584.04 "Анатолий Кулаков" Дальше появился метод, как можно получить сгенерированный запрос.
584.04 586.24 "Анатолий Кулаков" Метод ToQueryString, долгожданный.
586.24 591.48 "Анатолий Кулаков" Он вернет вам строку, которая сгенерит Entity Framework, из которой он пойдет в базу данных.
591.48 594.68 "Анатолий Кулаков" Эта строка примечательна тем, что в ней также включены все параметры.
594.68 607.48 "Анатолий Кулаков" То есть вы можете просто-напросто скопировать эту строку, вставить ее в SQL Management Studio, запустить и получить в точности тот запрос со всеми параметрами, со всеми планами, который будет выполнять Entity Framework.
607.48 616.44 "Анатолий Кулаков" Прокси, которые генерятся Entity Framework, получили возможность имплементировать .NET 5 Property Changed для того, чтобы можно было отслеживать свои изменения.
616.44 628.20 "Анатолий Кулаков" То есть вы теперь можете не сканировать каждую Entity на предмет изменений, а просто-напросто подписаться стандартными механизмами на Changes и трекать их более-менее стандартными интерфейсами, стандартными инструментами.
628.20 635.48 "Анатолий Кулаков" Появилась интересная возможность генерировать констрейты для таблиц, которые могут проверять вхождение enum.
635.48 641.68 "Анатолий Кулаков" То есть теперь enum — это не просто произвольная строка, а она будет проверяться тем констрейтом, который объявлен у вас в коде.
641.68 643.00 "Анатолий Кулаков" Тоже очень удобная штука.
643.00 650.28 "Игорь Лабутин" А еще одна удобная штука, которой мне на самом деле очень не хватало, когда я пробовал EF Core, это Debug Views, так называемые.
650.28 657.24 "Игорь Лабутин" То есть это возможность в Atlantik посмотреть на внутреннее состояние того, чего вас трекает EF Core.
657.24 673.36 "Игорь Лабутин" То есть, во-первых, это состояние самой модели, где будет написано, какие типы она содержит по мнению Entity Framework, какие properties, где там primary ключи, где foreign ключи и какие navigational properties она знает и так далее.
673.36 675.56 "Игорь Лабутин" То есть уже в рантайме.
675.56 693.32 "Игорь Лабутин" А кроме того, появилась Debug View — это новинка в EF Core 5, которая позволяет посмотреть на State Manager, то есть тот, который занимается change tracking, и посмотреть вплоть до конкретного списка объектов, которые конкретный change tracker трекает, вместе со значением всех-всех-всех-всех properties.
693.32 705.72 "Игорь Лабутин" Это выводится в виде достаточно красивой такой многострочного, так скажем, представления, которое просто можно скопировать куда-нибудь и как-то поизучать отдельно.
705.72 709.04 "Игорь Лабутин" То есть очень прекрасно, чтобы понимать, как у вас что внутри работает.
709.04 710.96 "Игорь Лабутин" Мне кажется, должно быть интересно.
710.96 720.12 "Анатолий Кулаков" Напоминаю, что все это еще превью один, то есть это такой своеобразный Hello World, где просто оттачиваются какие-то имена, новые концепты, новые референсы.
720.12 727.48 "Анатолий Кулаков" Но уже некоторые энтузиасты начали переход и начали апгрейдить свои проекты с .NET Core 3 на .NET 5.
727.48 735.88 "Анатолий Кулаков" И про это тоже у нас есть статейка от Стива Гордона, он уже попробовал и собрал какие-то свои выводы по этому поводу.
735.88 737.48 "Игорь Лабутин" Да, выводы пока очень простые.
737.48 744.44 "Игорь Лабутин" Во-первых, мы не зря не упомянули про анонс S/P/NET Core 5, потому что он есть, но в нем и к ним поменялось ничего.
744.44 756.84 "Игорь Лабутин" То есть на данный момент S/P/NET Core 5 есть, есть его превью 1, но по функциональности это ровно то же самое, что S/P/NET Core официально зарелиженный, возможно, с мелкими bug-фиксами уже, но их там совсем мало.
756.84 766.28 "Игорь Лабутин" Тем не менее, попытка перевести работающее веб-приложение с 3.1.NET Core на 5.NET была вполне успешной.
766.28 772.36 "Игорь Лабутин" Единственная тонкость - вам нужно использовать огромное количество разных превью-пакетов с очень странными названиями, которые по датам.
772.36 774.64 "Игорь Лабутин" И это вот единственное, что нужно знать.
774.64 779.20 "Игорь Лабутин" В остальном пока опыт положительный, но пока и новых фич особо нет.
779.20 783.80 "Игорь Лабутин" Как только будут появляться новые фичи, возможно, они будут какие-то, что-то брейкинг, что-то не брейкинг, будет, конечно, интереснее.
783.80 785.20 "Игорь Лабутин" Будем следить и обсуждать.
785.20 788.76 "Анатолий Кулаков" Новых фич, по идее, планируется огромное количество.
788.76 799.64 "Анатолий Кулаков" В бэклоге там сидят и улучшения перформанса, и улучшения интерфейса, и какие-то просто гениальные идеи насчет синтаксиса.
799.64 809.84 "Анатолий Кулаков" В частности, уже сейчас есть отличный разбор фичи про Async/Value Task Pooling, которую описал Стефан Тайп в своем блоге.
809.84 817.76 "Игорь Лабутин" Да, идея в том, что вообще таски как-то таковы, как класс, появились достаточно давно на этой.
817.76 839.80 "Игорь Лабутин" Потом их присыпали сахаром Async/Evait и стало, с одной стороны, лучше, потому что таски стали меньше использоваться в коде напрямую, но это не отменило того, что это класс, его при каждом эвейте нужно анализировать, даже если ожидание закончилось синхронно, и это все не очень здорово, особенно в каких-то высокопроизводительных сценариях.
839.80 853.04 "Игорь Лабутин" Поэтому придумали Value Task, который тоже уже довольно хорошо известен, но Value Task обладает рядом неприятных свойств, они не то чтобы неприятные, они проистекают из тех оптимизаций, ради которых он был придуман.
853.04 868.60 "Игорь Лабутин" То есть Value Task нельзя ожидать несколько раз, Value Task нельзя ожидать конкурентно несколькими клиентами, и соответственно Value Task нельзя куда-то надолго сохранять, то есть он предназначен ровно для одного сценария, тупо дождаться того, чего вы там эвейтите.
868.60 913.12 "Игорь Лабутин" Но этого у Microsoft оказалось мало, потому что несмотря на то, что в эвейтах вам теперь не нужно ничего аллоцировать, все равно есть источники локейтов, это те самые стейк-машины, которые все-таки периодически приходится локейтить, и Microsoft сейчас добавила в Dota 5 новую переменную окружение, которую можно поставить в True, и тогда вот эти вот стейк-машины, которые там аллоцируются и так далее, начинают еще дополнительно имплементировать интерфейс Value Task Source и возвращать Value Task, которые дополнительно пулятся внутри, то есть не только сами Value Task ничего не аллоцируют, но и те Task, которые внутри них могут сидеть, тоже будут в некотором пуле.
913.12 926.40 "Игорь Лабутин" Соответственно на них налагаются все те же самые ограничения, что их нельзя в несколько раз эвейтить и все такое прочее, но тем не менее это еще одна оптимизация, которую пока в превью режиме можно попытаться включить и посмотреть, что из этого будет.
926.40 939.44 "Игорь Лабутин" Так что, видимо, перформанс будет все еще интересной целью Dota 5, и вокруг него будет много интересных фич, которые, правда, возможно, могут немножко слаболомать ваш код, если неаккуратно вы будете ими пользоваться.
939.44 951.60 "Анатолий Кулаков" Да, очень много нас всего ждет нового интересного, и среди всех этих новых, как бы, воодушевляющих анонсов было неожиданностью узнать, что у нас все-таки появился один труп.
951.60 955.16 "Анатолий Кулаков" Команда DotNet решила закопать Visual Basic DotNet.
955.16 956.16 "Анатолий Кулаков" Как так вообще?
956.16 957.52 "Анатолий Кулаков" Как стричката потрогали?
957.52 963.76 "Игорь Лабутин" Вот, его потрогали на самом деле очень специфично, и если сейчас почитать интернет, то там есть два полярных мнения.
963.76 970.48 "Игорь Лабутин" С одной стороны, да, Visual Basic живее всех живых, он будет в DotNet 5, с другой стороны, Visual Basic больше не развивается, его закопали.
970.48 974.32 "Игорь Лабутин" Правда, по крайней мере, то, как я ее сейчас понимаю, состоит в следующем.
974.32 985.76 "Игорь Лабутин" Очень многие хотели видеть Visual Basic для DotNet Core, и в старых версиях DotNet Core Visual Basic поддерживал только Class Library, либо консольные приложения.
985.76 988.20 "Игорь Лабутин" Больше на нем ничего писать под DotNet Core было нельзя.
988.20 1000.20 "Игорь Лабутин" В DotNet 5 на Visual Basic можно будет писать, опять же, библиотеки, консольные приложения, WinForm, WPF, ISP.Net Core, WebAPI, все это можно будет писать на Visual Basic.
1000.20 1002.64 "Игорь Лабутин" С этой точки зрения его не закопали.
1002.64 1006.64 "Анатолий Кулаков" Даже наоборот, прям так хорошо развили, подняли, в чем вой тогда?
1006.64 1012.72 "Игорь Лабутин" Да, вой состоит в том, что Microsoft сказала, что Visual Basic больше не будет развиваться как язык.
1012.72 1014.24 "Игорь Лабутин" Что это означает?
1014.24 1022.32 "Игорь Лабутин" Мы знаем, что некоторые новые фичи в языке или в рантайме требуют новых языковых конструкций.
1022.32 1032.60 "Игорь Лабутин" Те же Async/Await, которые были добавлены, либо, например, модные быстрые спаны, которые потребовали изменения и компилятора языка и рантайма.
1032.60 1038.40 "Игорь Лабутин" Так вот, любые такие изменения, если они будут в будущем, не будут вноситься в Visual Basic.
1038.40 1052.76 "Игорь Лабутин" То есть, на том уровне, как он есть сейчас, он будет поддерживаться .Net Core, на нем можно будет писать, но вы не сможете на Visual Basic заиспользовать все эти новые придумки и фичи, которые придумают в ближайшем или не очень ближайшем будущем.
1052.76 1055.44 "Игорь Лабутин" И в этом смысле он, так скажем, заморожен.
1055.44 1060.32 "Игорь Лабутин" Я бы назвал так, что Visual Basic заморожен на уровне, вот как он есть сейчас.
1060.32 1068.28 "Игорь Лабутин" Ну, чуть-чуть больше, потому что нужно дать возможность на нем писать то, что я сказал, WinForms, WebAPI, ASP.Net, WebAPI, .Net 5.
1068.28 1072.48 "Игорь Лабутин" Но после этого сам язык с ним ничего происходить не будет.
1072.48 1076.44 "Игорь Лабутин" Так что, возможно, .Net 5 станет последним рантаймом, на котором он будет работать.
1076.44 1078.80 "Игорь Лабутин" А может, и в .Net 6 все еще будет работать.
1078.80 1082.60 "Игорь Лабутин" Посмотрим, насколько Microsoft долго будет поддерживать backward compatibility в этом смысле.
1082.60 1087.48 "Анатолий Кулаков" Интересно вообще, насколько Visual Basic получал эти новые фичи.
1087.48 1094.52 "Анатолий Кулаков" То есть, неужели там такая же скорость внедрения новых фич, как в C#, когда люди уже начали отмахиваться и кричать "остановитесь, дайте мы хотя бы это изучим".
1094.52 1102.88 "Анатолий Кулаков" Или там все-таки таргетинг идет на немножко другую аудиторию, и новые какие-то синтаксические конструкции и так не появлялись слишком резко.
1102.88 1104.92 "Анатолий Кулаков" Для них это не будет каким-то ударом.
1104.92 1107.36 "Анатолий Кулаков" Заметит ли Visual Basic сообщество это?
1107.36 1109.36 "Игорь Лабутин" Мне кажется, что нет, не будет.
1109.36 1112.04 "Игорь Лабутин" Я, признаться, не очень слезурую за Visual Basic.
1112.04 1118.40 "Игорь Лабутин" Последний мой опыт программирования на Basic был когда-то давно в школе, и я как-то не трогал Visual Basic с тех пор.
1118.40 1124.28 "Игорь Лабутин" Поэтому я не могу авторитетно сказать, какие фичи из современного C# или их аналоги существуют.
1124.28 1139.64 "Игорь Лабутин" Но я думаю, что в целом разработчики там достаточно консервативны, и плюшки нового рантайма - это хорошо и здорово, но язык, мне кажется, он вполне, скажем так, устоявшийся, и может быть, действительно ему не нужны все эти фичи.
1139.64 1149.36 "Анатолий Кулаков" Да, если вы хотите новых фич, и вы разработчик Visual Basic, то совсем непонятно, почему вы еще не изучили C# и не переехали на все эти плюшки, которые есть у нас.
1149.36 1151.96 "Анатолий Кулаков" Это несложно, приходите, мы вас научим.
1151.96 1160.60 "Игорь Лабутин" Супер, мы обсудили, что произошло в мире .NET 5, а теперь предлагаю перейти к нашему второму достаточно большому блоку на сегодня.
1160.60 1166.00 "Игорь Лабутин" Это различные темы про тулинг вокруг .NET, вокруг C# и всего остального.
1166.00 1175.52 "Игорь Лабутин" И естественно, тему тулинга хочется начать с главного инструмента, по мнению компании Microsoft, для разработки на .NET, именно Visual Studio 2019.
1175.52 1182.88 "Анатолий Кулаков" Зарелизилась версия 16.5 Visual Studio 2019, и у нее есть несколько интересных моментов.
1182.88 1188.04 "Анатолий Кулаков" В частности, мне очень понравилась штука, это hot reload к Xamarin.Forms.
1188.04 1201.12 "Анатолий Кулаков" Это доступно только для мобилок, но фича довольно таки крутая, то есть вы можете изменять приложение, изменять дизайн формочек в вашей Visual Studio, и оно автоматически будет подхватываться уже запущенным приложением.
1201.12 1210.16 "Анатолий Кулаков" Каким-то образом эта чудо-машинка сохранит тот стейт, который вы сейчас видите, и вы не потеряете никаких своих данных, но при этом формочки обновятся.
1210.16 1232.16 "Анатолий Кулаков" Вот это крутая штука, было бы неплохо, если бы они ее смогли нанести куда-нибудь ближе к .DPF, к WinForms и к обычной интерфейс разработке, потому что очень интересно менять именно формочку в рантайме и смотреть, как это отразится уже непосредственно у пользователя, вместо того, чтобы запускать ее по тысячу раз и поднимать свое приложение.
1232.16 1256.96 "Анатолий Кулаков" Дальше IntelliSense начал подсказывать методы, которых нет в заюсанных юсингах, вы можете теперь профилировать тесты, это довольно-таки удобный способ, потому что в тестах у вас обычно описаны самые стандартные юскейсы, и очевидно, что очень часто хочется просто-напросто запрофилировать то, что делает тест, и узнать, насколько он перфомит или насколько лоцирует память и так далее.
1256.96 1261.16 "Анатолий Кулаков" Watch Windows во время дебага теперь может делать pinnable properties.
1261.16 1269.84 "Анатолий Кулаков" Если вы фанат оффскода, то наверняка эта фича вам уже давно знакома и давно любима, а если нет, ее можно писать следующим способом.
1269.84 1298.24 "Анатолий Кулаков" Допустим, если у вас есть список, в котором положены юзеры, и вы забыли переопределить метод toString или не сделали этого почему-то и не навесили специальный дебаг display.attribute, вы, например, можете открыть юзера, сказать, что спиннаблым свойством является юзернейм и юзер age, и с этого момента в очи в студии начнут вам показывать юзера сформатированного именно с этими полями.
1298.24 1305.92 "Анатолий Кулаков" То есть вы будете видеть не просто какой-то непонятный класс юзер, а именно нейм и возраст этого пользователя.
1305.92 1309.76 "Анатолий Кулаков" Что тоже довольно-таки удобно и непонятно, почему так давно этого не было.
1309.76 1311.44 "Анатолий Кулаков" Кажется, элементарная фича.
1311.44 1313.96 "Анатолий Кулаков" Вот еще для дебага отличная штука.
1313.96 1324.92 "Анатолий Кулаков" Теперь окошко с тредами и не только будет вам показывать то, где тред сейчас стоит на локе, то есть какой лок он ждет, если причина остановки этого треда именно какой-то лок.
1324.92 1329.72 "Анатолий Кулаков" Часто бывает, когда вы в одном треде берете лок, а другой тред по каким-то непонятным причинам зависает.
1329.72 1339.00 "Анатолий Кулаков" Теперь в дебаге вы это все сразу увидите и узнаете, если вдруг у вас случился какой-то дедлок или просто долгое ожидание одного треда ожиданием другого треда.
1339.00 1365.88 "Анатолий Кулаков" У ZAMP провелись средства диагностики в плане Object Allocation Tool, который показывает вам, сколько памяти пролоцировало ваше приложение, там стала более удобная визуализация, уменьшилось время, за которое это все генерится, уменьшилось потребление ресурсов, которые необходимы этому инструменту и вообще теперь стало очень даже наглядно и хорошо видно, кто сколько памяти аллоцирует.
1365.88 1374.52 "Анатолий Кулаков" И это можно все подключать и смотреть во время выполнения, во время дебага ваших программ довольно интуитивно и понятно.
1374.52 1380.08 "Анатолий Кулаков" Во всем остальном, как всегда, это перерание фич, квикфиксов из ReSharper.
1380.08 1384.24 "Игорь Лабутин" Ну и еще появилась, кстати, поддержка отладки докер-контейнеров на Windows.
1384.24 1392.36 "Игорь Лабутин" То есть можно затащиться прямо к вашему дотнет-процессу, запущенному в докере под Windows и таким образом как бы ремонтно отлаживать.
1392.36 1393.96 "Игорь Лабутин" Тоже, наверное, полезная штука.
1393.96 1398.68 "Анатолий Кулаков" Да, интересно, что дебаг Windows-контейнеров поддерживался давно, а здесь появился дебаг Windows-контейнеров.
1398.68 1404.68 "Игорь Лабутин" Ну Windows-контейнер как бы что запустил, прямо на той же винде, где студия, и, в общем-то, оно и работает просто.
1404.68 1408.92 "Игорь Лабутин" Конечно, иногда хочется подебажить и контейнер сам по себе.
1408.92 1412.08 "Игорь Лабутин" Точнее, то, как он работает реально в контейнере, а не в твоем окружении.
1412.08 1413.60 "Игорь Лабутин" Окей, поехали дальше.
1413.60 1424.48 "Игорь Лабутин" Помимо студии, наверное, имеет смысл поговорить про ее, так скажем, аналог, не аналог, а именно ReSharper.
1424.48 1434.16 "Анатолий Кулаков" Приезжайший оппонент, он как бы тоже не спит, у него фичи выходят просто там каждую неделю всякие, превью, релизы и какие-то анонсы.
1434.16 1438.52 "Анатолий Кулаков" И хотелось бы примерно оценить roadmap версии 2020.1.
1438.52 1445.44 "Анатолий Кулаков" Что же нам готовит ReSharper, что же нам готовит JetBrains Rider в нашем ближайшем будущем?
1445.44 1455.12 "Анатолий Кулаков" Итак, первое, на чем хотелось бы заострить внимание, это, конечно же, поддержка нового C#, новых фич, и не только восьмого, но уже и девятого.
1455.12 1464.48 "Анатолий Кулаков" Команда вплотную думает над discrimination union'ами, над record-тайпами и прочее, прочее, то есть теми фичами, которых еще, может быть, даже и не будет.
1464.48 1468.24 "Анатолий Кулаков" Вот, поддержка этого ReSharper уже готовится и уже скоро будет.
1468.24 1472.40 "Анатолий Кулаков" Еще один интересный аспект – это distributed cache.
1472.40 1481.16 "Анатолий Кулаков" ReSharper очень много собирает всяких кэшей для того, чтобы увеличить скорость навигации и для того, чтобы улучшить свои анализы.
1481.16 1485.96 "Анатолий Кулаков" Во время старта он строит много-много всяких аналитических данных.
1485.96 1492.88 "Анатолий Кулаков" Вы, наверное, часто могли это видеть, что какое-то время на старте это занимает, какое-то время в бэкграунде что-то постоянно тратится и пересчитывается.
1492.88 1494.84 "Анатолий Кулаков" Вот это все вот эти кэши.
1494.84 1500.20 "Анатолий Кулаков" И команда ReSharper сейчас работает, чтобы эти кэши можно было переузвать между разными разработчиками.
1500.20 1506.04 "Анатолий Кулаков" Ведь действительно, если репозиторий с исходниками у вас один, то какой смысл строить одни и те же кэши на каждом компьютере?
1506.04 1509.04 "Анатолий Кулаков" Можно эти кэши взять с какого-нибудь централизованного сервера.
1509.04 1515.32 "Анатолий Кулаков" Можно эти кэши взять от твоего соседа, который студию запустил на полчаса раньше тебя и уже все это пересчитал и построил.
1515.32 1520.60 "Анатолий Кулаков" И таким образом сэкономить кучу каких-нибудь ресурсов, может даже памяти и процессора.
1520.60 1529.96 "Игорь Лабутин" Ну а говоря о процессах, процессорах и экономии, основная проблема ReSharper - это употребление памяти внутри процессов из желтой студии.
1529.96 1567.28 "Игорь Лабутин" Тоже похоже, близится к, если не полному решению, то к существенному улучшению, потому что ReSharper, как мы знаем, живет полностью в процессе студии и поэтому из-за 32-битности обладает не таким большим объемом памяти, поэтому команда ReSharper довольно активно работала и работает над тем, чтобы вынести ReSharper в внешний процесс, как это сделано по сути в райдере, но поскольку довольно много функционала все еще должно быть в UI, то есть всяческие подсветки редакторов и так далее, то задача очень непростая, чтобы все это быстро синхронизировалось и так далее.
1567.28 1569.28 "Игорь Лабутин" Но какие-то успехи на этом фронте есть.
1569.28 1580.40 "Игорь Лабутин" Как я понял, никаких визуальных улучшений на данный момент пока не будет, но внутри уже архитектура серьезно переработана и подготовлена для того, чтобы какие-то части ReSharper могли жить снаружи.
1580.40 1588.44 "Анатолий Кулаков" Да, все это доступно в Early Access Program, то есть вы уже можете это скачать, посмотреть и у себя попробовать.
1588.44 1589.72 "Анатолий Кулаков" Также несколько слов о райдере.
1589.72 1596.16 "Анатолий Кулаков" У него тоже выходит куча всяких улучшений, куча всяких дополнений, но у меня запомнилась парочка из них.
1596.16 1605.96 "Анатолий Кулаков" Теперь райдер переведен на .NET Core и подлинно к самым Mac OS'ам он работает, пэкэнд райдера, который ReSharper сервис, он работает на чистом Core.
1605.96 1614.68 "Анатолий Кулаков" Раньше это был Mono и с этим было связано много проблем и много интересных докладов от ребят из JetBrains.
1614.68 1626.92 "Анатолий Кулаков" Теперь они наконец-то портировались, у них были какие-то периоды, когда это все интегрировалось, отлаживалось, но теперь Core включен по умолчанию и вы все можете наслаждаться уже непосредственно производительностью нового Core.
1626.92 1631.44 "Анатолий Кулаков" Как говорил Андрей в прошлом выпуске, что производительность заметно выросла в некоторых участках.
1631.44 1639.16 "Анатолий Кулаков" Еще появилась такая тайная фича, про которую мало что известно, называется она Dynamic Program Analysis.
1639.16 1647.28 "Анатолий Кулаков" Ее нет в ReSharper, я не нашел про нее никаких дополнительных данных, кроме единственного твиттера от Кирилла Скрыгана.
1647.28 1650.36 "Анатолий Кулаков" Кирилл Скрыган это тимлит команды райдера.
1650.36 1651.80 "Анатолий Кулаков" Цитирую дословно.
1651.80 1654.16 "Анатолий Кулаков" Вам больше не нужно заботиться о профайлинге.
1654.16 1660.36 "Анатолий Кулаков" Не надо никаких настроек, не надо никаких подключений, как SOS, CLR.
1660.36 1663.56 "Анатолий Кулаков" Просто запустите ваш дебаггер и это все.
1663.56 1671.52 "Анатолий Кулаков" Он неявно проанализирует ваше приложение и покажет все те горячие места, на которые вам стоит обратить внимание.
1671.52 1680.88 "Анатолий Кулаков" То есть какой-то интересный подход к профайлингу, к такому неявному бэкграунд профайлингу, который может анализировать ваше приложение и показывать какие-то интересные вещи.
1680.88 1691.60 "Анатолий Кулаков" Судя по тому, как у JetBrains развитый профайлинг тулзы, и судя по тому, как они умеют придумать крутые фичи, мне очень сильно хочется посмотреть на то, что у них все-таки получится.
1691.60 1704.56 "Игорь Лабутин" Ну да, судя по всему, какие-то достаточно легковесные штуки типа .NET Tracer или какие-то вишек на Windows, их собирать достаточно легко и почти бесплатно с точки зрения производительности приложения.
1704.56 1709.12 "Игорь Лабутин" А даже на какой-то простом объеме информации можно уже получить какие-то интересные места.
1709.12 1717.84 "Игорь Лабутин" То есть вот этот call stack по этому адресу, так скажем, вот тормаживает и можно попытаться в нем что-то посмотреть уже более детально, зная детально код.
1717.84 1720.56 "Игорь Лабутин" А уж Райдер-то ваш код, конечно же, знает.
1720.56 1725.04 "Анатолий Кулаков" Ну будем следить дальше за новостями от Microsoft и от JetBrains.
1725.04 1727.44 "Анатолий Кулаков" Что у нас еще есть интересного?
1727.44 1730.32 "Игорь Лабутин" Так, давай посмотрим, что еще у нас есть интересного.
1730.32 1732.12 "Игорь Лабутин" Еще из интересного у нас есть PowerShell.
1732.12 1735.64 "Игорь Лабутин" PowerShell тоже как-то стал, мне кажется, обновляться довольно бодро.
1735.64 1741.04 "Игорь Лабутин" То есть я помню там времена, когда там 1, 2, 3 и, наверное, версии до 4.
1741.04 1746.24 "Игорь Лабутин" И он как-то обновлялся очень медленно и печально, а потом прям как это, поехало как поехало.
1746.24 1748.04 "Игорь Лабутин" И вот мы дождались 7 версии.
1748.04 1749.68 "Анатолий Кулаков" Раньше PowerShell был частью винды.
1749.68 1753.80 "Анатолий Кулаков" И поэтому каждая мажорная версия PowerShell, это означало по сути выход нового Windows.
1753.80 1756.36 "Анатолий Кулаков" Windows 7, Windows 8, Vista и так далее.
1756.36 1760.48 "Анатолий Кулаков" Теперь они наконец PowerShell от винды оторвали и пошли даже дальше.
1760.48 1771.84 "Анатолий Кулаков" 6 PowerShell, напомним, это был первый порт под Windows Core, а также это была первая версия PowerShell, которая разрабатывалась в Open Source и доступна под MIT лицензией.
1771.84 1781.56 "Анатолий Кулаков" И это был такой своеобразный эксперимент, можно ли PowerShell оторвать от винды и сделать кроссплатформенный, независимый, полетит он или не полетит.
1781.56 1785.88 "Анатолий Кулаков" И вот 7 версия показывает нам, что эта стратегия была выигрышной.
1785.88 1790.04 "Анатолий Кулаков" PowerShell полетел, его хорошо восприняли на альтернативных платформах.
1790.04 1793.48 "Анатолий Кулаков" И 7 версия PowerShell является LTS.
1793.48 1796.16 "Анатолий Кулаков" 6 версия PowerShell базировалась на 2 Core.
1796.16 1806.28 "Анатолий Кулаков" Версия 7 теперь перешла на 3.1, что добавило множество совместимостей, потому что версия 3.1 Core поддерживает намного больше набор API.
1806.28 1810.56 "Анатолий Кулаков" Что же интересного из синтаксиса появилось в новом PowerShell?
1810.56 1814.04 "Анатолий Кулаков" Прежде всего, это параметр параллель для метода forEachObject.
1814.04 1819.36 "Анатолий Кулаков" То есть теперь вы можете запускать ваши pipeline, перебирать ваши объекты параллельно.
1819.36 1824.80 "Анатолий Кулаков" Это можно сравнить с C# методом параллель forEach.
1824.80 1831.56 "Анатолий Кулаков" Здесь можно задать throttle limit, то есть количество потоков, которые будут использоваться для прокрутки параллельности.
1831.56 1836.16 "Анатолий Кулаков" Появился третернарный оператор, появились pipeline chain операторы.
1836.16 1841.96 "Анатолий Кулаков" То есть теперь вы можете указать какую-то операцию, поставить операцию или, и вторую операцию.
1841.96 1845.44 "Анатолий Кулаков" И вторая операция выполнится только если первая зафейлится.
1845.44 1851.80 "Анатолий Кулаков" То есть то, что вы ожидали бы, наверное, от какого-нибудь бинарного end или or.
1851.80 1855.84 "Анатолий Кулаков" Здесь операторы доступа к nullable переменным.
1855.84 1866.16 "Анатолий Кулаков" То есть теперь вам не нужно написать if, а можно просто как в C# поставить знак вопросика, точечку, и вы можете свободно обращаться к тем переменным, в которых значение может храниться null.
1866.16 1871.68 "Анатолий Кулаков" Что хотелось бы еще отметить, это качественная переработка и улучшение в плане показа ошибок.
1871.68 1879.36 "Анатолий Кулаков" Потому что ошибки в PowerShell скриптах всегда вызывают очень сильную боль, ибо непонятно, где она произошла, почему это случилось.
1879.36 1882.56 "Анатолий Кулаков" И какую-то дополнительную контекстную информацию вытащить довольно-таки сложно.
1882.56 1889.28 "Анатолий Кулаков" Разработчики обратили на это внимание и жалобные мольбы миллионов пользователей, и улучшили эту часть, и продолжают улучшать.
1889.28 1892.04 "Анатолий Кулаков" В общем, будем надеяться, что здесь будет все хорошо.
1892.04 1905.80 "Анатолий Кулаков" Также хочется напомнить, что с тех пор как PowerShell стал кроссплатформенным, то есть версии шестой, официальной студией разработки для него является не Windows PowerShell Scripting Environment, который поддерживался только под Винду, а Visual Studio Code.
1905.80 1916.28 "Анатолий Кулаков" Для Visual Studio Code есть специальный плагин от Microsoft, который добавляет поддержку PowerShell, и в Language Service, естественно, подсветка синтакси, заход кей, все в этом духе.
1916.28 1924.88 "Анатолий Кулаков" И этот плагин уже адаптировался и уже зарелизался для PowerShell седьмого, поэтому с переходом даже во время программирования у вас не должно возникнуть никаких проблем.
1924.88 1925.88 "Игорь Лабутин" Прикольно.
1925.88 1940.68 "Игорь Лабутин" А помимо этого, то, чего я всегда очень любил в PowerShell, это command line, command line, но иногда хочется посмотреть на результаты исполнения какого-нибудь хитрого запроса или хитрой команды в табличном виде.
1940.68 1968.00 "Игорь Лабутин" Для этого всегда существовала команда.out.gridview, которая была поддержана в нормальном виндовом PowerShell, в седьмой PowerShell ее тоже обратно вернули, поскольку он теперь основан на Core 3.1, то у нас появилась возможность использовать WinForms, и, соответственно, старенькая команда out.gridview вернулась, но она только WinForms, что означает, что ее нет, насколько я понимаю, на Linux и на Mac.
1968.00 1984.96 "Игорь Лабутин" Кроме этого, появился пакет под названием Microsoft PowerShell Graphical Tools, где есть еще одна версия командочки out.gridview, которая основана на Avalon'e, и, если я не ошибаюсь, это вообще первое использование Microsoft Avalon'e.
1984.96 1988.88 "Игорь Лабутин" Ты слышал что-нибудь о другом, когда Microsoft использовала Avalon'e до этого?
1988.88 1994.36 "Анатолий Кулаков" Нет, это в принципе такая довольно революционная, довольно фундаментальная штука по нескольким причинам.
1994.36 2007.08 "Анатолий Кулаков" Во-первых, Microsoft наконец-то показала нам какой-то официально заапрубленный кроссплатформенный UI, то есть это первый кроссплатформенный UI, который мы могли видеть в продуктах Microsoft.
2007.08 2014.96 "Анатолий Кулаков" И этим UI'ем оказалось не Blazor, не Xamarin.Forms, не что-то иное, а именно Avalon'e.
2014.96 2023.00 "Анатолий Кулаков" То есть продукт не от Microsoft, а продукт довольно интересного, очень динамично развивающегося и очень перспективного.
2023.00 2031.08 "Анатолий Кулаков" То есть Avalon'e будет использоваться в PowerShell для показа, для гуевых инструментов, в частности, GridView.
2031.08 2042.32 "Анатолий Кулаков" В общем, это такое беспрецедентное интересное решение, когда Microsoft использует какой-то сторонний Open Source UI библиотеку и всячески будет, наверное, ее продвигать и контрибьютить.
2042.32 2048.68 "Анатолий Кулаков" С чем, в принципе, я вас поздравляю, потому что это выбор, наверное, один из самых лучших из тех, что есть на рынке.
2048.68 2052.52 "Игорь Лабутин" Ну или купит, что тоже иногда случается.
2052.52 2053.88 "Игорь Лабутин" Смотри, GitHub.
2053.88 2064.08 "Игорь Лабутин" Но на этом Microsoft не остановился, и мало того, что у нас есть теперь как минимум два варианта этого OutGridView, появился еще один вариант.
2064.08 2095.76 "Игорь Лабутин" Если вам не хочется открывать новые окошки, если вам по душе Midnight Commander, Northern Commander и прочие команды, Far Manager, то теперь есть пакет под названием Microsoft PowerShell Console GUI Tools, в котором есть коммандочка OutConsoleGridView, который открывает прямо в терминалке, в котором запущен PowerShell, такой родной синий бэкграунд панельки с всем давно знакомые, и позволяет по ним навигироваться, все это работает, на мышку откликается, причем опять же кроссплатформенно.
2095.76 2096.76 "Анатолий Кулаков" Да, именно так.
2096.76 2111.36 "Анатолий Кулаков" И это, соответственно, так как это консолька, ее можно запускать не только в графических всяких средах, но и в SSH-терминалах, в Azure Management консоли и прочих-прочих шеллах, которые базируются на PowerShell.
2111.36 2124.76 "Анатолий Кулаков" Вот это очень замечательная штука, это разработка Мигеля Дель Каза, которая называется GUI.cs, вот она легла в основу консоль GUI Tools этого модуля, и соответственно тоже будет развиваться дальше.
2124.76 2136.28 "Игорь Лабутин" Да, будет интересно посмотреть, вообще такая тема, всякие консольные штуки, скриптинг и все такое, становится все интереснее, теперь можно на докере какой-никакой UI-чик сделать, вообще прекрасно.
2136.28 2139.00 "Игорь Лабутин" Так, поехали дальше.
2139.00 2157.32 "Игорь Лабутин" Дальше у нас следующая шприблуда от Майкрософта, Майкрософт не останавливается, Майкрософт пытается придумать что-то новое, но в данном случае, я так понимаю, что у Майкрософта не оставалось ничего иного, кроме как действительно придумать что-то новое, потому что речь идет о Git.
2157.32 2178.60 "Игорь Лабутин" Как известно, у Майкрософта, наверное, один из самых больших Git-репозиториев, а именно Windows, и Майкрософт за последние несколько лет, с тех пор, как переезжала на Git, придумала много всяких разных штук, там и virtual file system, и всякие улучшения к large, как они там правильно в Git называются, large file.
2178.60 2179.60 "Игорь Лабутин" Large object files.
2179.60 2186.72 "Игорь Лабутин" Что-то там, короче, такое, я уже не помню, смысл в том, что сейчас Майкрософт выпустил новый tool, он называется Scalar.
2186.72 2202.64 "Анатолий Кулаков" Хотелось бы пару слов добавить, почему он так сильно вкладывается в Git, потому что, насколько известно сейчас современному миру, у Майкрософта самая большая репозитория на Git, которая существует, это репозитория Windows, и на таких больших объемах Git очень сильно тормозит.
2202.64 2207.44 "Анатолий Кулаков" Ну то есть обычная команда Git-статуса может занимать минуты в лучшем случае.
2207.44 2211.36 "Анатолий Кулаков" Поэтому Майкрософт вкладывается как-то в развитие этой инфраструктуры.
2211.36 2224.44 "Игорь Лабутин" Git-статус еще ладно, а вот если вы сказали Git-феч, и он пытается выцепить все ветки, а если вы случайно сказали Git-феч all, то все, можно как бы закрывать компьютер и уходить в отпуск, пока он все это получит.
2224.44 2226.92 "Анатолий Кулаков" Эту операцию можно делать только на ночь уходя домой.
2226.92 2229.96 "Игорь Лабутин" Ну хорошо, если не в отпуск, я не знаю объемов.
2229.96 2233.72 "Игорь Лабутин" Поэтому в общем появился новый тул, тул называется скейлер.
2233.72 2235.12 "Анатолий Кулаков" Кстати написанный на C#.
2235.12 2238.40 "Игорь Лабутин" Это вообще прекрасно, хорошо не на Go, или еще на чем-нибудь.
2238.40 2250.24 "Игорь Лабутин" И смысл его состоит в следующем, это некая надстройка над Git, которая позволяет работать с такими большими Git-репозиториями путем некоторой, так скажем, оптимизации.
2250.24 2254.50 "Игорь Лабутин" А именно, во-первых, она позволяет не брать дерево целиком.
2254.50 2261.48 "Игорь Лабутин" То есть по дефолту, если вы будете делать checkout, насколько я понимаю, она возьмет только то, что лежит на первом уровне, грубо говоря.
2261.48 2264.00 "Игорь Лабутин" То есть список папочек и файликов первого уровня.
2264.00 2270.92 "Игорь Лабутин" Дальше вы можете указать, какие папочки забрать по дереву дальше, в глубине, и таким образом получить не полный репозиторий, а только небольшой кусочек.
2270.92 2279.36 "Игорь Лабутин" Потому что по большому счету, если у вас есть огромные репозитории, то большая часть его вам не нужна, наверное, никогда.
2279.36 2287.42 "Игорь Лабутин" Для там, сборки и непосредственной работы с кодом, с которым вы сейчас работаете, нужна не очень большая часть, а работаете вы с еще меньшей частью.
2287.42 2296.46 "Игорь Лабутин" Поэтому полноценной репозитории тянуть не надо, а тянуть часть, которая вам нужна как зависимости, можно просто последнюю версию, и там история не важна.
2296.46 2301.78 "Игорь Лабутин" А вот та часть, с которой вы работаете, там важна история коммитов, ну, чтобы мержи правильные были и так далее.
2301.78 2305.14 "Игорь Лабутин" И вот весь этот тумб, он нацелен ровно на это.
2305.14 2307.98 "Игорь Лабутин" То есть правильным образом все это к себе подтягивать.
2307.98 2313.40 "Анатолий Кулаков" И кроме этой оптимизации еще существует очень много всяких background-джопов.
2313.40 2322.56 "Анатолий Кулаков" Например, то же самое помянутый Fetch, Scalar строит в background, и выдает вам уже готовое дерево для применения.
2322.56 2330.12 "Анатолий Кулаков" Те же самые статусы он рассчитывает в background, делает ГЦ, гитовый в background, cleanup-ит всякие ненужные объекты.
2330.12 2341.56 "Анатолий Кулаков" Также был придуман новый формат для commit-графа, который позволяет, позволяет commit-граф хранить в более оптимальной структуре, то есть не сжать столько места, быстрее его в background пересчитывать.
2341.56 2344.48 "Анатолий Кулаков" Это всяческим образом увеличивает скорость работы с гитом.
2344.48 2347.72 "Игорь Лабутин" Да, при этом не обязательно все делать в background, это режим по умолчанию.
2347.72 2352.32 "Игорь Лабутин" По факту, вы это можете делать руками, если очень хочется, и запускать все эти команды напрямую.
2352.32 2370.84 "Игорь Лабутин" И самое главное, что мне больше всего нравится, что позиция Microsoft заключается в следующем, что сейчас мы написали Scalar, ну, потому что вот гид чего-то не умеет, а нам это было нужно, но в долгосрочной перспективе мы хотим это все дело законтрибьютить именно в гид, чтобы это все гид умел сам.
2370.84 2374.12 "Игорь Лабутин" И чтобы необходимость в таком туле, она рано или поздно отпала.
2374.12 2376.40 "Игорь Лабутин" То есть это меня очень радует.
2376.40 2386.92 "Анатолий Кулаков" Да, на протяжении последних лет Microsoft активно очень контрибьютит в гид и сделал очень много всяких импровментов, поэтому будем надеяться, что и дальше эта тема будет развиваться.
2386.92 2403.00 "Анатолий Кулаков" Если вы побежали вдруг случайно ставить себе Scalar, то статья напоминает, что это решение для очень-очень-очень больших репозиториев, то есть 10 раз подумайте, сравниваете ли вы свои репозитории с какими-нибудь Microsoft или компаниями подобного рода.
2403.00 2407.48 "Анатолий Кулаков" Может быть, даже на ваших репозиториях вы не заметите никакой разницы.
2407.48 2408.48 "Игорь Лабутин" Это правда.
2408.48 2409.48 "Игорь Лабутин" Пошли дальше.
2409.48 2410.48 "Анатолий Кулаков" Да, пойдем.
2410.48 2413.44 "Анатолий Кулаков" И у нас блестящий инструмент.
2413.44 2418.00 "Анатолий Кулаков" Блестящий инструмент от Андрея Акиньшина, который зарелизил недавно Perfolizer.
2418.00 2423.60 "Анатолий Кулаков" Perfolizer – это специальная тулза для всяких аналитик.
2423.60 2424.60 "Анатолий Кулаков" Как она появилась?
2424.60 2425.60 "Анатолий Кулаков" У Benchmark.net.
2425.60 2431.04 "Анатолий Кулаков" Кстати, если кто не знает, Benchmark.net – это инструмент для микропенчмаркингов.
2431.04 2438.72 "Анатолий Кулаков" Он очень популярный, у него более 3000 проектов, включая .NET Core, полностью тестируется Benchmark.net.
2438.72 2443.12 "Анатолий Кулаков" И у Benchmark.net существует очень много интересных анализов.
2443.12 2447.24 "Анатолий Кулаков" То есть это не просто инструмент, который вам выдает банальные мины и максы.
2447.24 2454.48 "Анатолий Кулаков" Он пытается для вас рассчитать какую-то статистику, пытается применить какие-то умные диагностики и посоветовать вам какие-то интересные оптимизации.
2454.48 2459.44 "Анатолий Кулаков" То есть очень-очень много классной какой-то статистики, математики, матанализа внутри его применено.
2459.44 2480.88 "Анатолий Кулаков" И Андрей захотел выделить эту машину, этот агрегат для статистики, все эти алгоритмы, все эти подсчеты, всю эту математику, он захотел выделить в отдельный инструмент, потому что для всего этого не нужны какие-то платформенно зависящие вещи, какие-то архитектурные особенности, которыми Benchmark.net.
2480.88 2487.64 "Анатолий Кулаков" То есть это понятная математика, у нее нет никаких зависимостей, у нее есть только куча классных интересных алгоритмов по всяким детекторам.
2487.64 2503.92 "Игорь Лабутин" Кроме того, я так понимаю, что она не привязана по большому счету именно к бенчмаркам, то есть она может использоваться для анализа любой вашей статистики, будь то бенчмарки, микробенчмарки или время выполнения ваших каких-то длинных тестов, например, которые вы копите месяцами.
2503.92 2507.28 "Анатолий Кулаков" Именно так, это просто инструмент для перформанс-анализа.
2507.28 2516.80 "Анатолий Кулаков" Откуда вы взяли эти данные из Benchmark.net, из значных тестов, из базы данных, из головы, рандомно на генериле, это уже дело десятое.
2516.80 2530.60 "Анатолий Кулаков" Этот инструмент пестрит очень интересными алгоритмами, названия многих я даже не могу произнести, такими как мультимодальные гистограммы, детект мультимодальных распределенностей, адаптивный селект.
2530.60 2540.32 "Анатолий Кулаков" В общем, очень много каких-то заумных страшных слов, которые, наверное, понимает только Андрей, но эти штуки помогают вам просто творить чудеса.
2540.32 2552.08 "Анатолий Кулаков" Вы можете читать ReadMe файл, там много интересных примеров, которые помогают вам детектить именно какие-то проблемы с вашими тестами, помогают вам предсказывать именно настоящую деградацию, а не случайные выпады.
2552.08 2556.36 "Анатолий Кулаков" И имеют множество всяких других инструментов для улучшения вашей жизни.
2556.36 2559.20 "Анатолий Кулаков" Итак, что же у нас в Roadmap?
2559.20 2568.12 "Анатолий Кулаков" Разработка новых схем для хранения истории, истории данных, для того, чтобы можно было их удобно быстро сравнивать и делать какие-то выводы.
2568.12 2579.48 "Анатолий Кулаков" Разработка отдельного инструмента, который можно будет интегрировать в ваш CI и отслеживать деградации, всплески, выпады как-нибудь автоматически на основании каких-нибудь начальных тестов, например.
2579.48 2588.20 "Анатолий Кулаков" Также написание хорошей документации, каких-нибудь хороших советов, хороших статей и добавление больше и больше различных интересных алгоритмов.
2588.20 2597.48 "Анатолий Кулаков" И, наверное, в качестве одного из пунктов этого Roadmap можно порекламировать доклад Андрея Тиншина, который заанонсирован на грядущем .NEXT.
2597.48 2615.28 "Анатолий Кулаков" Именно про эту тему он будет рассказывать в своем докладе именно про то, каким образом анализировать все это скопище данных, которые вы, может быть, накопили, напенчмаркали, наделали и думаете, что дальше со всей этой кучей делать, как ее дальше использовать, как из нее извлечь полезный value.
2615.28 2622.72 "Анатолий Кулаков" Вот об этом, обо всем будет рассказывать Андрей и будет наполнять документацию перфолайзера, надеюсь, интересными примерами.
2622.72 2624.44 "Анатолий Кулаков" Мы будем всячески следить за проектом.
2624.44 2646.60 "Игорь Лабутин" Да, Андрей очень много работал со всякими разными performance investigators и статистиками, и здесь интересна не только, может быть, даже не столько сама математика, а именно подходы, как вообще к этому подойти и подобраться, если вы этого никогда не делали или если вы что-то пытались делать, но не поняли, что делать со всеми теми огромным количеством данных, которые вы собрали или не очень огромным.
2646.60 2656.04 "Игорь Лабутин" Так что изучайте, слушайте, читайте и в целом делаем наш код более производительным, правильно и по-научному.
2656.04 2658.64 "Игорь Лабутин" Я думаю, что на этом на сегодня можно заканчивать.
2658.64 2677.56 "Игорь Лабутин" Мы рассмотрели два больших блока, мы посмотрели, что происходит в мире дотнет 5, пока ничего особенного, но с интересом следим за будущим, и мы посмотрели на новинки Тулинга, Visual Studio, Rider, ReSharper, Git и майкрософтские приблуды к нему и перфолайзер от Андрея.
2677.56 2683.76 "Игорь Лабутин" Ждем следующего выпуска, там будет больше новостей, больше обсуждений, больше всего интересного.
2683.76 2684.76 "Анатолий Кулаков" Именно так.
2684.76 2692.48 "Анатолий Кулаков" А вы сообщайте нам фидбэк любым удобным для вас образом, мы с радостью все учтем, с радостью вас послушаем и сделаем по-своему.
2692.48 2693.48 "Анатолий Кулаков" Всем пока.
2693.48 2693.48 None Пока.

