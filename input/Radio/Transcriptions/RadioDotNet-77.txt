0.00 5.92 None Здравствуйте, товарищи!
5.92 11.24 "Анатолий Кулаков" В эфире Radio.net выпуск номер 77.
11.24 14.76 "Анатолий Кулаков" И в эфире его постоянный ведущий Анатолий Кулаков.
14.76 15.76 "Анатолий Кулаков" И Игорь Лабутин.
15.76 16.76 "Анатолий Кулаков" Всем привет!
16.76 21.84 "Анатолий Кулаков" А также куча наших помогаторов, которые тоже рады приветствовать вас, и в частности вам рады.
21.84 31.08 "Анатолий Кулаков" Александр, Сергей, Владислав, Алексей, Шевченко, Антон, Лазарь, Вадья, Гурий Самарин, Виктор, Руслан Нартамонов, Александр Ярыгин и Белотский Евгений.
31.08 47.40 "Анатолий Кулаков" Большое спасибо вам и всем тем, кто помогает нам на бусти, кто шарит и лайкает наши подкасты на ютубчиках и других социальных сетях, кто рассказывает своим друзьям и слушает нас, безусловно, нам это очень приятно, поэтому слушайте, рассказывайте, шарьте и репостите.
47.40 54.88 "Анатолий Кулаков" А мы будем радоваться вас новыми новостями, какими-нибудь интересными статьями и всем, чем интересным живет мир Дот-нета.
54.88 60.36 "Анатолий Кулаков" И в этом выпуске у нас, в принципе, много накопилось разностороннего, чем живет мир Дот-нета.
60.36 63.36 "Анатолий Кулаков" Но начнем мы, наверное, по привычке новостями от
63.36 76.56 "Игорь Лабутин" Микрософта. Давай мы до новостей Микрософта напомним, что у нас грядет ДотНекст, который будет 15-16 сентября, куда можно заходить, покупать билеты.
76.56 86.64 "Анатолий Кулаков" Да, наконец-то мы делаем офлайн к старой, хорошей, олдовой, знакомой и даже намного лучше, мне кажется, потому что будет много новых интересных нововведений и улучшений.
86.64 93.68 "Анатолий Кулаков" В общем, хороший, двуневный, настоящий офлайн с большими звездами, с шикарной вечеринкой.
93.68 97.80 "Анатолий Кулаков" В общем, со всем, чем полагается, поэтому ждем вас.
97.80 106.60 "Анатолий Кулаков" Если вы почему-то еще не купили билет, то у нас в шоу-ноутах вы найдете промокод, по которому вам будет весьма интересная, приятная скидочка.
106.60 110.40 "Анатолий Кулаков" Заходите, покупайте и просвещайтесь новыми интересными докладами.
110.40 116.04 "Игорь Лабутин" Да, а вот теперь мы уже точно пойдем к Дот-нету.
116.04 118.08 "Игорь Лабутин" Не даром же мы подкаст про Дот-нет.
118.08 123.16 "Игорь Лабутин" И у нас вышел Дот-нет 8 превью 7, последний превью от Майкрософт, дальше будут уже релиз-кандидаты.
123.16 126.64 "Анатолий Кулаков" Ну, то есть дальше каких-то там серьезных новинок ждать не стоит.
126.64 130.92 "Анатолий Кулаков" Теперь только пойдет стабилизация, перформанс, ускорение и прочие маркетинговые булшеты.
130.92 143.44 "Анатолий Кулаков" Поэтому можно финализировать, что ничего интересного и хорошего нам из богатых таких фич не завезут, и это, пожалуй, один из самых бедных релизов Дот-нета, которые были.
143.44 154.64 "Анатолий Кулаков" Ну, наверное, об этом мы поноим еще, когда выйдет анонс настоящего релиза, а пока давайте посмотрим, какую же небольшую часть нам завезли в 7-м последнем превью.
154.64 158.00 "Анатолий Кулаков" Прежде всего улучшения коснулись систем-текст JSON.
158.00 171.40 "Анатолий Кулаков" Из интересного в атрибут JSON Source Generator Options Attribute, какой длинный хороший атрибут, были перенесены абсолютно все опции, которые есть в JSON Serializer Options.
171.40 184.04 "Анатолий Кулаков" Я напомню, что JSON Serializer Options - это там, где вы можете конвертеры поменять, идент исправить, пропертий на именные полисы переименовать, в общем, полезный JSON Options.
184.04 206.88 "Анатолий Кулаков" А вот его тезка, который Source Generator Options, он вам позволяет все те же самые опции задать для автосгенерированного JSON серилизатора, который у вас сгенерируется в Design Time, скомпилируется и будет работать уже на конкретных типах, что будет быстрее, жрать меньше памяти, быстрее стартовать и прочее прочее.
206.88 215.56 "Анатолий Кулаков" В общем, новость приятная, то есть по сути два JSON серилизатора теперь по настройкам и по гибкости полностью совместимы, это прекрасно.
215.56 228.68 "Анатолий Кулаков" Дальше мы научились, JSON Serializer научился пользоваться встроенными типами Memory-AT и Redonely Memory-AT, теперь он их тоже умеет сериализовать.
228.68 235.48 "Анатолий Кулаков" А где там те поборники, которые говорили, что для сериализации нам нужны DTO-шки с примитивными полями, с примитивными типами.
235.48 239.12 "Анатолий Кулаков" Вот пожалуйста, конструкторы, Memory, что хотите, десериализуйте.
239.12 241.32 "Анатолий Кулаков" Куда-то сериализаторы свернули уже не туда.
241.32 243.20 "Анатолий Кулаков" Но все же, продолжим.
243.20 249.76 "Анатолий Кулаков" Поддержали новые наши типы, которые Half и Int128, а также Uint128.
249.76 254.12 "Анатолий Кулаков" Кстати, обидно, что им до сих пор не придумали кейворты.
254.12 255.12 "Анатолий Кулаков" Правда?
255.12 257.80 "Анатолий Кулаков" Такие как Int, bool и прочее.
257.80 261.72 "Анатолий Кулаков" Half не сделали, очевидно, можно было бы Half сделать.
261.72 263.48 "Анатолий Кулаков" Half defuse float.
263.48 268.88 "Анатолий Кулаков" А вот какой кейворт Int128 придумать, если long уже занят?
268.88 274.16 "Игорь Лабутин" Ну long long, то SQL Fuse уже использует long long, или там very long int.
274.16 275.16 "Анатолий Кулаков" Very long.
275.16 276.16 "Игорь Лабутин" Longest int.
276.16 282.20 "Игорь Лабутин" А нет, longest тогда нужно the longest int, больше писать, да, неудобно.
282.20 285.20 "Анатолий Кулаков" А если потом еще 256 и 528?
285.20 290.84 "Игорь Лабутин" Uber longest, super duper longest, ну в общем там.
290.84 292.80 "Анатолий Кулаков" Ну пока мы до этого не доросли, хорошо.
292.80 300.12 "Анатолий Кулаков" Так, дальше у нас поддержались non-public мембры для сериализации с помощью специальных атрибутов JSON include и JSON constructor.
300.12 310.48 "Анатолий Кулаков" Были много improvements в JSON-ноде, в частности добавился метод deep copy, когда мы можем целую ноду, целое поддерево, JSON-ноду склонировать.
310.48 325.88 "Анатолий Кулаков" И еще интересный метод deep equals, то есть по сути теперь мы можем заменить очень важный метод, которого часто не хватает в юнит-тестировании, знаешь, когда нам нужно сравнить два объекта, типа тот, который был, и тот, который мы смапили там, или тот, который мы децерализовали.
325.88 337.24 "Анатолий Кулаков" Теперь это можно, ну есть естественно какой-нибудь fluent assertion или какой-нибудь member compiler, которые это делают из сторонних пакетов, но теперь можно сделать нативным пакетом.
337.24 346.40 "Анатолий Кулаков" То есть мы теперь можем взять объект, сериализовать его в JSON, превратить его, децерализовать с помощью JSON-ноды и сделать deep equals в JSON-ноды.
346.40 349.12 "Анатолий Кулаков" И так мы сравним в принципе два дерева объектов.
349.12 372.52 "Игорь Лабутин" Ну в принципе да, но там понятно, что сериализация наверное не абсолютно идеальная замена для сравнения прямо иерархии объектов, потому что она будет только сравнивать те поля, которые сериализовались без учета всяких private и так далее, которые можно было бы сравнить дополнительно, или которые явно помечены как ignore, а Reflection бы их обошел и сравнил.
372.52 375.76 "Игорь Лабутин" Но наверное это в большинстве случаев на самом деле будет
375.76 380.20 "Анатолий Кулаков" достаточно. Да, мне кажется для простых фейсов это вообще с головы.
380.20 393.92 "Анатолий Кулаков" Дальше у нас были улучшения в новых интерфейсах iHosted Life Cycle Service, о нем мы поговорим попозже, и также точно улучшения коснулись dependency injection, о которых мы тоже поговорим попозже, ибо хочется поподробнее их просветить.
393.92 396.08 "Анатолий Кулаков" А сейчас пробежимся по другим мелочам.
396.08 398.12 "Анатолий Кулаков" Насчет HTTPS-прокси.
398.12 402.12 "Анатолий Кулаков" У нас появилась возможность делать этот HTTPS-прокси.
402.12 410.44 "Анатолий Кулаков" Раньше мы могли веб-клиентам, HTTP-клиент который, могли коннектиться, то есть использовать только HTTP-прокси.
410.44 415.44 "Анатолий Кулаков" Теперь же появилось HTTPS-вариант, что тоже прекрасно.
415.44 422.60 "Анатолий Кулаков" Эта штука позволяет нам уменьшить шанс проведения man-in-the-middle атаки между нашими клиентами.
422.60 424.68 "Анатолий Кулаков" Ну почему бы и нет.
424.68 433.80 "Анатолий Кулаков" Использовать HTTPS-прокси можно как программно, через специальный классик, который называется WebProxy, или же можно прокси задать через переменные окружения.
433.80 438.04 "Анатолий Кулаков" Допустим, если вы запускаетесь в докер-контейнере, переменное окружение довольно странное.
438.04 439.04 "Анатолий Кулаков" Оно называется All_proxy.
439.04 443.40 "Анатолий Кулаков" Вот как ты думаешь, почему All_proxy?
443.40 446.48 "Игорь Лабутин" Одновременно и для HTTP, и для HTTPS?
446.48 447.88 "Анатолий Кулаков" Ну типа да.
447.88 462.52 "Анатолий Кулаков" В Linux среде существует такая традиция, что у них есть обычно переменные в среде, которые называются HTTP-почеркивание proxy, HTTPS-почеркивание proxy, FTP-почеркивание proxy, SSH-почеркивание proxy.
462.52 468.00 "Анатолий Кулаков" Ну короче, для всех протоколов заведены переменки с проксиами, которые должны тот или иной протокол использовать.
468.00 475.72 "Анатолий Кулаков" И если у тебя, в принципе, по барабану программа всеядная и может использовать любой прокси, вот для нее завели All_почеркивание proxy.
475.72 479.80 "Анатолий Кулаков" Ну вот как-то странно поддержать All, но при этом не поддержать все остальное.
479.80 482.48 "Анатолий Кулаков" То есть All на безрыбье какое-то получается.
482.48 485.52 "Анатолий Кулаков" Ну хорошо, допустим, научились прокси поддерживать.
485.52 486.52 "Анатолий Кулаков" Пойдем дальше.
486.52 490.32 "Анатолий Кулаков" Интересное еще нововведение - это Hybrid Localization Mode.
490.32 499.32 "Анатолий Кулаков" Его ввели для странных операционных систем, таких как Mac Catalyst, tvOS и iOS.
499.32 508.36 "Анатолий Кулаков" В основном это мобильные приложения, и теперь они могут использовать глобализацию в так называемом гибридном режиме.
508.36 511.36 "Анатолий Кулаков" Гибридный режим - это довольно интересная штука.
511.36 521.00 "Анатолий Кулаков" Это специальная оптимизация, которая призвана уменьшить размер собираемого итогов файла, итогового бандла.
521.00 527.04 "Анатолий Кулаков" И делает он путем урезания специальной юникодной базы.
527.04 545.76 "Анатолий Кулаков" То есть юникодная база, которая тащится с каждым приложением, она довольно огромная, потому что там нужно поддержать различные знания о конвертациях, о кодах в системах, в этих таблицах, о всяких эмоджах, смещениях, форматах, культурах.
545.76 547.96 "Анатолий Кулаков" В общем много-много всего в эту базу входит.
547.96 562.88 "Анатолий Кулаков" И появилась недавно такая тенденция, что кому достаточно инвариантной базы, то есть только английского языка, то можно с собой не таскать все эти юникод счастья.
562.88 568.24 "Анатолий Кулаков" Но многим приложениям, естественно, особенно мобильным юайнам, естественно такой вариант не подходит.
568.24 579.44 "Анатолий Кулаков" Они работают с пользователями, им все равно нужно с пользователем как-то работать и с форматированием даты, и с форматированием локали, и как-то показывать буковки на разных языках.
579.44 586.64 "Анатолий Кулаков" И не подходит вариант не таскать совсем, но и вариант таскать всю базу, он слишком большой.
586.64 589.36 "Анатолий Кулаков" Поэтому был придуман так называемый гибридный режим.
589.36 604.28 "Анатолий Кулаков" Гибридный это когда ты половину базы используешь из вот этого бандла, то есть половинку какой-то базы таскаешь, которая тебе нужна, и еще есть возможность таскать из операционной системы остальную половинку базы.
604.28 615.40 "Анатолий Кулаков" Потому что по сути любая операционная система содержит себе какой-нибудь API для работы с юникодом, и с культурами, и с форматами, и так далее.
615.40 618.28 "Анатолий Кулаков" С какими-нибудь кальчеру инфа.
618.28 629.00 "Анатолий Кулаков" Поэтому ты можешь из операционной системы вытащить то, что тебе надо, ну а то, что не хватает в операционной системе и нужно чисто в дотнете или твоему приложению, можно немножко загрузить из этой базы данных.
629.00 642.60 "Анатолий Кулаков" И таким образом и появился гибрид глобализейшн мод, в котором ты можешь выбрать какие культуры ты поддерживаешь с точностью до языка, и из базы данных подтащатся именно особенности той культуры, которая тебе нужна.
642.60 651.60 "Анатолий Кулаков" Или какие-то специальные API можно дернуть в операционную систему, и они просто-напросто тебе достанутся бесплатно.
651.60 659.68 "Анатолий Кулаков" Таким образом, с помощью данного режима можно уменьшить в среднем на 34% свои выходные бандлы.
659.68 661.44 "Анатолий Кулаков" Вот, звучит довольно хорошо.
661.44 664.28 "Анатолий Кулаков" 34% для мобильных приложениях - это прекрасно.
664.28 683.36 "Анатолий Кулаков" Поэтому используйте на здоровье, просто не забывайте, что благодаря такому гибридному моду, когда ты немножко берешь из операционной системы, есть неподдержимые вещи, которых нигде нет, а есть вещи, которые поменяли свое поведение, потому что теперь ты их берешь из другого места.
683.36 691.32 "Анатолий Кулаков" Поэтому внимательно нужно ознакомиться со списком совместимостей и что-то можно у него делать, что нельзя делать.
691.32 693.44 "Анатолий Кулаков" Так, пойдем к G2.
693.44 698.56 "Анатолий Кулаков" У G2 улучшили поддержку структура Physical Promotion.
698.56 708.40 "Анатолий Кулаков" Это такой специальный режим оптимизации, когда ваши структурки, которые состоят из примитивных полей, превращаются в поля из примитивных полей.
708.40 712.68 "Анатолий Кулаков" И поля уже G2 умеет очень хорошо оптимизировать.
712.68 716.84 "Анатолий Кулаков" Перемещать, сдвигать, инлайнить и прочие страшные вещи с ними делать.
716.84 724.04 "Анатолий Кулаков" И тем образом, как бы, структурки инлайнятся, по сути, раскладываются и промоутятся в свои собственные примитивы.
724.04 727.96 "Анатолий Кулаков" Такой режим существовал до этого, но он был весьма ограниченный.
727.96 735.64 "Анатолий Кулаков" Он поддерживал такой своеобразный инлайнинг только если у вас 4 поля или меньше, и в этих полях должны быть примитивные типы.
735.64 745.20 "Анатолий Кулаков" Например, если вы фурычите дикшенери, стандартный дикшенери, то у него структурный единомератор используется.
745.20 750.56 "Анатолий Кулаков" И этот структурный единомератор, хорошо, что он структурный, у вас уже нет лишней аллокации.
750.56 753.16 "Анатолий Кулаков" Но дело в том, что у этого единомератора было 5 полей.
753.16 755.88 "Анатолий Кулаков" И вот на него данная оптимизация уже не распространялась.
755.88 763.76 "Анатолий Кулаков" Или если вы фурычились, допустим, по листу тапла от двух интов.
763.76 766.72 "Анатолий Кулаков" Тоже вроде инты, примитивный тип, лист небольшой.
766.72 770.44 "Анатолий Кулаков" Но потому что это тапл, данная оптимизация тоже не работала.
770.44 774.88 "Анатолий Кулаков" Так вот, с новой версии все эти мелкие тонкости ушли в прошлое.
774.88 783.12 "Анатолий Кулаков" Теперь эта оптимизация работает практически на всем, с любым количеством полей, с любыми типами, которые более-менее раскладываются в примитивы.
783.12 786.56 "Анатолий Кулаков" В общем, теперь и дикшенери, и листы, и таплы, все гоняются прекрасно.
786.56 792.08 "Анатолий Кулаков" И по сути, вот тот же самый фурыч на дикшенере у нас будет работать в два раза быстрее.
792.08 803.44 "Анатолий Кулаков" Естественно, в два раза быстрее это мерялось в мега-наносекундах, но все же фурычей в мире много, и поэтому если все станут работать в два раза быстрее, это довольно хорошая оптимизация.
803.44 805.72 "Анатолий Кулаков" Дальше посмотрим на секцию с контейнерами.
805.72 808.00 "Анатолий Кулаков" Там тоже произошло немножко интересного.
808.00 819.12 "Анатолий Кулаков" Прежде всего, микрософтовцы продолжили резать свой альпайн-образ, его еще немножко уменьшили, и уменьшили его благодаря тому, что выкинули поддержку кербероса.
819.12 823.52 "Анатолий Кулаков" Поэтому, ну да, наверное, альпайнам не всем нужен керберос, не зря.
823.52 832.44 "Анатолий Кулаков" Но если вашему приложению вдруг нужен, и вы его использовали, то учтите, что на новые версии просто так обновиться не получится, вам нужно добавить, доинсталлировать пакет с кербероса.
832.44 838.64 "Анатолий Кулаков" Еще немножко изменений коснулось Ubuntu Chessled Image.
838.64 844.28 "Анатолий Кулаков" Теперь ее сделали так, что ее могут теперь сканировать Security Tools и всякие.
844.28 849.12 "Анатолий Кулаков" Тоже распространенный частный случай, я правда не понимаю, как она была проблема, к сожалению, не дарыл.
849.12 851.00 "Анатолий Кулаков" То есть, почему нельзя было сканировать?
851.00 853.52 "Анатолий Кулаков" Ну, теперь можно, теперь все хорошо.
853.52 873.80 "Анатолий Кулаков" И, как заявляют авторы, что сканирование Security Tools это, в принципе, был последний шаг, последний долг, который они держали в бэклоге Chessled Image, и теперь они честно будут его промокнуть к релизу, то есть, к рекомендации к использованию, и все на него могут переходить, тестировать и так далее.
873.80 879.24 "Анатолий Кулаков" Посмотрим, что это нам даст и как это будет подано в релиз ноутсах.
879.24 882.12 "Анатолий Кулаков" Еще одно интересное изменение.
882.12 888.24 "Анатолий Кулаков" У Docker Image по дефолту изменился UID, то есть, User Identifier.
888.24 910.44 "Анатолий Кулаков" Раньше он был 64198, такое-то тоже почти рандомное число, но внимательные пользователи заметили, что на Debian существует букворм Scanner, который сканирует имиджи, и этот сканер давал предупреждение, что больше 60 тысяч UID - это что-то странное, поэтому вы используете какой-то странный имидж.
910.44 917.52 "Анатолий Кулаков" Я не сильно в курсе, насколько этот сканер был критичен, но почему-то люди к нему прислушались и создали специальную ищи.
917.52 935.72 "Анатолий Кулаков" И поэтому Microsoft пересмотрела свою позицию и действительно там нашлись в комментариях знатоки, которые рассказали, что большие юзеры-идишники, они почему-то подозрительные и обычно их не используют, обычно стараются придерживаться к минимальной границы возможных нерутовых ID-шников.
935.72 941.00 "Анатолий Кулаков" Граница нерутовых - это тысяча где-то, ну вот в общем, возле тысячи все нерутовые крутятся.
941.00 945.48 "Анатолий Кулаков" И поэтому добрая команда Microsoft выдумала новое странное число.
945.48 948.48 "Анатолий Кулаков" И то, как они выдумывали эти странные числа - это как бы отдельная история.
948.48 953.96 "Анатолий Кулаков" То есть, ну просто так взять тысячу или тысячу один - это несерьезно, да, это не по-программистски.
953.96 956.08 "Анатолий Кулаков" Что нужно сделать?
956.08 957.88 "Анатолий Кулаков" Придумали замечательный вариант.
957.88 973.52 "Анатолий Кулаков" Нужно взять слово .NET, представить каждую букву в виде чаров, взять у этого чара скан-код, ну то есть ASCII-код, под которым подставлена эта буква в латинской таблице символов и сложить все эти буквы.
973.52 982.44 "Анатолий Кулаков" И вот когда вы сложите все значения интовые букв в .NET, вы получите число, которое называется 654.
982.44 991.00 "Анатолий Кулаков" Поэтому тысяча - это минимально для нерутовых пользователей, плюс 654 - вот у нас готов новый User ID для всех докер-контейнеров.
991.00 996.60 "Анатолий Кулаков" Теперь вот под именно такой цифрой вы будете встречать пользователя в ваших докер-контейнерах.
996.60 998.84 "Анатолий Кулаков" Вот так надо подходить к магическим цифрам.
998.84 1001.28 "Анатолий Кулаков" Все равно какой-то симпатический смысл должен в этом быть.
1001.28 1003.48 "Анатолий Кулаков" Понимаешь, душу вкладывают.
1003.48 1007.80 "Игорь Лабутин" Главное комменты ставить в каждом докер-файле.
1007.80 1011.92 "Анатолий Кулаков" Я думаю, там не будут раскрывать, как это генерилось.
1011.92 1018.40 "Анатолий Кулаков" Дальше у нас появились новые докер-имеджи, которые состоят из композит-контейнеров.
1018.40 1023.24 "Анатолий Кулаков" Это GemiChiseled и MarinaDistroles.
1023.24 1027.64 "Анатолий Кулаков" Сколько же не с этими контейнерами придумали разных оптимизаций названий.
1027.64 1031.64 "Анатолий Кулаков" И AlpineChiseled, и Distroles, и композиты, и гибриды.
1031.64 1035.44 "Анатолий Кулаков" Уже скоро придется отдельный словарик заводить, чтобы более-менее ориентироваться.
1035.44 1041.24 "Анатолий Кулаков" Короче, у нас появилось два новых композит-имеджа, но что же такое это за композит-имеджи?
1041.24 1042.24 "Анатолий Кулаков" Давайте вспоминать.
1042.24 1046.08 "Анатолий Кулаков" Композит-имеджи изначально появились в превью 5.
1046.08 1048.32 "Анатолий Кулаков" Это новая фишка дотнет 8.
1048.32 1053.84 "Анатолий Кулаков" Это, прежде всего, оптимизация ISPnet приложений, которые работают пока только на альпайнах.
1053.84 1054.84 "Анатолий Кулаков" Ну, это пока.
1054.84 1070.92 "Анатолий Кулаков" И смысл в которых - это то, что там взяли все ассембли, которые нужны для запуска дотнет-приложений, и фреймворка, и всего остального, и собрали из этого одно единое бинарник.
1070.92 1073.20 "Анатолий Кулаков" При том, этот бинарник Ready to Run.
1073.20 1078.80 "Анатолий Кулаков" То есть, его прооптимизировали, частично откомпилировали для быстрого старта.
1078.80 1089.00 "Анатолий Кулаков" Таким образом, мы сохранили время джета, по сути, весь фреймворк у нас уже проджидчен, и мы улучшили время старта.
1089.00 1098.84 "Анатолий Кулаков" А также, так как мы их собрали все вместе и прооптимизировали, у нас улучшилась размер, то есть, мы сократили размер на диске данного имиджа.
1098.84 1105.08 "Анатолий Кулаков" Минус такого подхода, ну, то есть, это плюс, да, там быстрее стартует, меньше размер, и все такое, поэтому вот, пожалуйста, используйте.
1105.08 1112.24 "Анатолий Кулаков" Минус такого подхода, что вы не можете использовать кастомные какие-то свои собственные настроенные версии фреймворков и ICP-net бинарников.
1112.24 1120.96 "Анатолий Кулаков" Мне не приходит в голову, чтобы когда-то я хотел это сделать, ну, наверное, особо приближенным к фреймворкам людям такое ограничение было бы страшно.
1120.96 1122.52 "Анатолий Кулаков" Но, наверное, обычным людям нет.
1122.52 1144.40 "Анатолий Кулаков" То есть, вот такой фреймворк, который распространен в виде отдельного бинарника, и который предкомпилен немножко, вот, его взяли, засунули в отдельный имидж, и поняли, что это работает, это работает хорошо, опять же, надо сравнивать, как это соотносится с числодами и с дистролесами, насколько там все быстрее и лучше.
1144.40 1148.88 "Анатолий Кулаков" Но надеюсь, что нам, как бы, при релизе какую-то общую свою табличку дадут по этому поводу.
1148.88 1152.04 "Анатолий Кулаков" Так, теперь можно поговорить, наконец, об ICP-net Core.
1152.04 1157.20 "Анатолий Кулаков" Он тоже перешел в седьмой превью, и там добавились тоже пару интересных вещей.
1157.20 1161.28 "Анатолий Кулаков" Например, стандартную middleware, которая добавляет антифорджерри токен.
1161.28 1168.72 "Анатолий Кулаков" Антифорджерри токен - это по-русски атака с подделкой межсайтовых запросов.
1168.72 1172.24 "Анатолий Кулаков" Или в оригинале - cross-site request forgery attack.
1172.24 1176.56 "Анатолий Кулаков" Вот от этой атаки этот антифорджерри токен защищает.
1176.56 1181.04 "Анатолий Кулаков" Она должна обязательно добавляться после аутентификации и авторизации.
1181.04 1186.80 "Анатолий Кулаков" И на самом деле, то есть, просто так, если вы ее добавите к вашему приложению, ничего магического не произойдет.
1186.80 1193.00 "Анатолий Кулаков" Отдельные фреймворки, такие как ICP-net, Blazor, Minimal API, они должны эту поддержку заиспользовать.
1193.00 1195.28 "Анатолий Кулаков" Как используется эта штука?
1195.28 1196.28 "Анатолий Кулаков" Все очень просто.
1196.28 1202.36 "Анатолий Кулаков" Вам нужно создать скрытое поле в ваших формах, в которое вы записываете специальный токен.
1202.36 1208.88 "Анатолий Кулаков" И когда форма будет заполняться пользователем и присылается к вам на сервер, этот специальный токен будет проверяться.
1208.88 1220.00 "Анатолий Кулаков" Если его не передали, значит, эта форма была сформирована где-то вне вашего сервиса, вне вашего реквеста, и была прислана вам, например, для подбора пароля или еще чего-то.
1220.00 1224.64 "Анатолий Кулаков" В общем, это такая проверка, что вам прислали ту же самую форму, которую у вас недавно запросили.
1224.64 1226.64 "Анатолий Кулаков" Что-то такое мини-Cookie получается.
1226.64 1233.08 "Анатолий Кулаков" Но это как бы стандартный стандарт между многими приложениями, многими аппликейшенами.
1233.08 1236.72 "Анатолий Кулаков" Не только в Дотонути, естественно, такая же вещь используется.
1236.72 1240.08 "Анатолий Кулаков" Дальше у нас появился реквест-делегат.
1240.08 1245.00 "Анатолий Кулаков" Не так, реквест-делегат у нас был всегда.
1245.00 1247.44 "Анатолий Кулаков" Давайте по порядку.
1247.44 1250.32 "Анатолий Кулаков" Прежде всего у нас был реквест-делегат.
1250.32 1260.84 "Анатолий Кулаков" Это специальный обработчик, который ловил запросы от Кестрила и с помощью рефлексии находил ваш контроллер и передавал его в ваш выполненный код.
1260.84 1274.16 "Анатолий Кулаков" После этого нам придумали реквест-делегат-генератор, который уже без рефлекшена может вызвать ваш хендлер со строгими типами, с оптимизацией и все такое, который просто может вызвать ваш тип очень быстро.
1274.16 1277.00 "Анатолий Кулаков" Потому что без рефлекшена, без всего этого добра.
1277.00 1279.48 "Анатолий Кулаков" А он был введен в превью 3.
1279.48 1283.16 "Анатолий Кулаков" Дальше у нас в C# 12 появились интерцепторы.
1283.16 1285.40 "Анатолий Кулаков" Это мы обсуждали в прошлом выпуске.
1285.40 1290.32 "Анатолий Кулаков" Такая мега прикольная штука, которая позволяет вам подменять методы в compile-time.
1290.32 1298.12 "Анатолий Кулаков" И вот, наконец, в превью 7 сейчас это все дело подружили вместе и засунули в minimal API.
1298.12 1307.16 "Анатолий Кулаков" И это позволило увеличить время старта приложения, если вы паблишите ваше приложение с включенным аутом.
1307.16 1312.16 "Анатолий Кулаков" Может быть, не стоило на этом так подробно останавливаться, но цифры там довольно впечатляющие.
1312.16 1319.08 "Игорь Лабутин" Только прежде чем ты назовешь цифры, давай мы поправимся и скажем, что это позволило все-таки не увеличить время старта приложения, а уменьшить.
1319.08 1321.76 "Игорь Лабутин" А то такая странная фича получается.
1321.76 1328.64 "Анатолий Кулаков" Да, просто в английском они все время увеличивают перформанс, стартап перформанс.
1328.64 1330.24 "Анатолий Кулаков" Вот у них там какая-то армелогия.
1330.24 1331.24 "Анатолий Кулаков" Стартап перформанс.
1331.24 1336.00 "Анатолий Кулаков" Поэтому его перформансы не увеличивают, а мы в русском время старта уменьшаем.
1336.00 1337.00 "Анатолий Кулаков" Ну да, окей.
1337.00 1339.08 "Анатолий Кулаков" Хорошая поправка, спасибо.
1339.08 1341.16 "Анатолий Кулаков" Итак, про циферки.
1341.16 1350.52 "Анатолий Кулаков" Давайте, вот тот request-делегат, который я говорил про reflection, вот он в каких-то попугаях 711 миллисекунд занимал, то есть на обработку запроса.
1350.52 1351.52 "Анатолий Кулаков" 711 миллисекунд.
1351.52 1362.76 "Анатолий Кулаков" После того, как мы переделали это все дело на compile-time-генератор, но еще без интерсепторов, эта цифра сократилась в два раза, то есть 350 миллисекунд.
1362.76 1366.56 "Анатолий Кулаков" Потом мы ввели сюда интерсепторы, которые всего лишь навсего научились подменять методы.
1366.56 1368.96 "Анатолий Кулаков" И эта цифра уменьшилась на порядок.
1368.96 1370.64 "Анатолий Кулаков" Это 38 миллисекунд.
1370.64 1379.60 "Анатолий Кулаков" То есть мы пришли из 711 миллисекунд на выполнение делегата, на выполнение реквеста, а вот 711 до 38.
1379.60 1382.36 "Анатолий Кулаков" Это довольно интересные цифры.
1382.36 1388.72 "Анатолий Кулаков" Естественно, они там в вакууме, на пустых ответах и все такое, но относительно, просто на порядке.
1388.72 1400.96 "Игорь Лабутин" Это, скорее всего, цифры агрегированные, в смысле что это не один реквест-делегат у нас 700 миллисекунд занимает, а весь бенчмарт, грубо говоря, но действительно, улучшение хорошее.
1400.96 1409.56 "Игорь Лабутин" И, насколько я помню, это как раз то место, где они смогли избавиться от всяких словариков, лукапов и так далее.
1409.56 1414.20 "Анатолий Кулаков" Да, который реквест-делегат вынужден был держать, чтобы понимать, куда ему роутить.
1414.20 1418.72 "Игорь Лабутин" Да, но, видимо, еще что-то успели сделать, потому что, по-моему, про словарики мы уже в прошлый раз рассказывали.
1418.72 1420.72 "Игорь Лабутин" Сейчас стало, видимо, еще круче.
1420.72 1423.08 "Анатолий Кулаков" Ну окей, давай дальше.
1423.08 1432.64 "Анатолий Кулаков" Изменился по умолчанию TrimMod, это один из breaking changes, то есть раньше ваших веб-проектов, там где был разрешен тримминг, по умолчанию использовался partial TrimMod.
1432.64 1435.08 "Анатолий Кулаков" Теперь по умолчанию будет использоваться full.
1435.08 1441.24 "Анатолий Кулаков" Все, full протестировали, убедились, что там все хорошо работает, везде посмотрели, теперь им уверят.
1441.24 1442.52 "Анатолий Кулаков" Включили его по умолчанию.
1442.52 1452.04 "Анатолий Кулаков" Поэтому, если у вас был раньше какой-то по умолчанию тримминг, изменится, поэтому смотрите внимательно на поведение вашего приложения.
1452.04 1454.40 "Анатолий Кулаков" Немножко про web-аппликацию CreateBuilder напомним.
1454.40 1462.24 "Анатолий Кулаков" Мы его недавно обсуждали в каком-то выпуске статью Эндрю Лока, где он подробно разбирал, что делает Empty Builder.
1462.24 1463.80 "Анатолий Кулаков" Кратко напомню, что...
1463.80 1467.48 "Игорь Лабутин" Опять же, по-моему, мы обсуждали, что делает обычный билдер,
1467.48 1475.56 "Анатолий Кулаков" а не Empty. Мы обсуждали статью, как мы перешли на Empty, что он внутри себе представляет и какие сервисы регистрирует.
1475.56 1476.56 "Анатолий Кулаков" Именно про Empty.
1476.56 1477.56 "Анатолий Кулаков" Окей, хорошо.
1477.56 1481.20 "Анатолий Кулаков" Это вот эта серия как раз про ISP, которую он сейчас пишет.
1481.20 1484.72 "Анатолий Кулаков" Там первая или вторая статья за этой серией была.
1484.72 1496.48 "Анатолий Кулаков" Поэтому подробнее можно найти наш предыдущий выпуск, послушать, но кратко я напомню, что у нас раньше был обычный web-аппликацион CreateBuilder, который внутри себя напихивал абсолютно все, что должен уметь нормальный ISP-хост.
1496.48 1507.88 "Анатолий Кулаков" А должен уметь там кучу middle-varий, настраивать опции, настраивать переменные отвержения, скачивать и сканировать конфиги, в общем, все, что мы любим.
1507.88 1512.12 "Анатолий Кулаков" За что мы любим ISP-приложение, что оно такое умное, красивое и само все делает.
1512.12 1526.60 "Анатолий Кулаков" Но люди пришли и говорят, что нам хочется строить очень маленькие приложения, которые ничего этого не умеют, а то, что им надо уметь, мы сами ручками пропишем, вы, пожалуйста, не умничайте, дайте нам просто красивый маленький хост-билдер.
1526.60 1532.44 "Анатолий Кулаков" И вот для таких маленьких приложений мы придумали штуку, которая называется CreateEmptyBuilder.
1532.44 1541.20 "Анатолий Кулаков" CreateEmptyBuilder, как говорят, добавляет только самые необходимые для запуска вещи и никаких там больше middle-varий не засовывает вам.
1541.20 1545.40 "Анатолий Кулаков" Поэтому никакого непредсказуемого поведения вы там не увидите.
1545.40 1549.96 "Анатолий Кулаков" Все остальное, что вам нужно, вы должны будете наконфигурировать самостоятельно.
1549.96 1579.96 "Анатолий Кулаков" Вот, и эта штука, например, на ISP.NET Core проекте, на обычном Hello World приложении, который там запускает кестрил и возвращает на какой-то смапленный endpoint Hello World, если откомпилить NativeAuto под Linux контейнеры, SelfContained и откопилить по SelfContained, если запустить NativeExecutable, включить, в общем, все вот эти оптимизации, которые тут навешивают со всех сторон, то .NET приложение, даже не приложение, а сервер, но все-таки на запрос отвечает, будет занимать 8,5 МБ.
1579.96 1589.20 "Анатолий Кулаков" То есть вот такой минимальный сайз, в том числе благодаря вот этому EmptyBuilder, который не тащит с собой кучу middle-varий, которые, может быть, вам и совсем не нужны.
1589.20 1605.68 "Игорь Лабутин" Я тебя снова дополню и поправлю, Andrew Log не описывал CreateEmptyBuilder, EmptyBuilder - это штука, которая появилась только в этом превью, а Andrew Log описывал CreateSlimBuilder, который промежуточное состояние между полным CreateBuilder и новым последним CreateEmptyBuilder.
1605.68 1610.84 "Игорь Лабутин" Да, вот оно что, у нас теперь есть SlimBuilder и EmptyBuilder, все, я понял.
1610.84 1621.40 "Игорь Лабутин" Да, и в SlimBuilder входит, я сейчас открыл документацию специально на сайте Microsoft, в SlimBuilder будет входить вот эта поддержка AppSettings.json и AppSettings.development.json, в EmptyBuilder этого не будет.
1621.40 1624.48 "Игорь Лабутин" Если вам нужна конфигурация из файликов, добавляйте вручную.
1624.48 1631.40 "Игорь Лабутин" В SlimBuilder еще входит конфигурация UserSecrets, консоль логирований, ну и в целом настройка логирования.
1631.40 1635.64 "Игорь Лабутин" То есть в EmptyBuilder даже логирования не будет, ничего не будет вообще.
1635.64 1637.32 "Игорь Лабутин" Все, что нужно, собирайте сами.
1637.32 1641.24 "Анатолий Кулаков" Угу, ну удобно, удобно, почему бы нет.
1641.24 1643.36 "Анатолий Кулаков" Хорошо, хорошо.
1643.36 1644.36 "Анатолий Кулаков" Спасибо.
1644.36 1649.92 "Анатолий Кулаков" Так, Blazor Auto Render Mode, это уже серфиция Blazor.
1649.92 1654.96 "Анатолий Кулаков" Мы немножко упоминали уже про гибридный мод, который предоставляет Blazor приложение новые.
1654.96 1663.52 "Анатолий Кулаков" Я напомню, что это возможность Blazor приложения использовать и WSML режим, и сервер режим одновременно.
1663.52 1665.20 "Анатолий Кулаков" Работает это следующим образом.
1665.20 1673.80 "Анатолий Кулаков" Если пользователь загружает ваше приложение, то данная магическая штука смотрит, сможет ли WSML загрузиться быстро.
1673.80 1676.00 "Анатолий Кулаков" Для Blazor это до 100 мс.
1676.00 1689.76 "Анатолий Кулаков" Если она может загрузиться до 100 мс, это обычно значит, что фреймворк WSML был уже, не WSML, а именно .NET фреймворк для запуска WSML, был уже до этого скачен и закеширован.
1689.76 1694.44 "Анатолий Кулаков" Если он скачен и закеширован, то это 100 мс и все счастливы.
1694.44 1706.56 "Анатолий Кулаков" Если же пользователь еще ни разу не загружал этот фреймворк, то включается серверный режим, и страничка рендерится на сервере, что происходит гораздо быстрее, чем если мы дожидались скачивания фреймворка.
1706.56 1717.88 "Анатолий Кулаков" И после того, как страничка отрендерилась на сервере, в это время в бэкграунде как раз скачивается .NET WebAssembly Runtime, вот этот фреймворк в бэкграунде скачивается.
1717.88 1726.92 "Анатолий Кулаков" И вот он один раз скачается, и дальше уже опять же он будет закеширован, и ваше приложение будет использовать WebAssembly RenderMod прямо на клиенте.
1726.92 1729.08 "Анатолий Кулаков" Тоже интересный, хитрый ход.
1729.08 1733.60 "Анатолий Кулаков" Продолжается экспансия на идентити, область у .NET.
1733.60 1756.36 "Анатолий Кулаков" Я напомню, что в предыдущих превью-4 было добавлено несколько очень полезных endpoints, такие как, такие endpoints позволяли регистрироваться и логиниться пользователю, а также была добавлена поддержка cookie-based авторизации, и для того, чтобы сделать это в single-page-applications возможным.
1756.36 1762.72 "Анатолий Кулаков" И вот в этом превью появилась дополнительная возможность это делать, аутентификацию с помощью токенов.
1762.72 1769.68 "Анатолий Кулаков" Например, это можно делать в каких-нибудь клиентах, где нет кук, таких как мобильные клиенты, допустим.
1769.68 1771.52 "Анатолий Кулаков" Они могут использовать токены.
1771.52 1779.44 "Анатолий Кулаков" Тут подчеркивается, что токен является self-contained, то есть содержит внутри себя всю необходимую информацию, но при этом не JVT.
1779.44 1783.56 "Анатолий Кулаков" Непонятно почему они не завязали JVT в таком случае, но допустим.
1783.56 1793.40 "Анатолий Кулаков" И таким образом, Identity API уже покрывает довольно большую область для работы с пользователями.
1793.40 1795.12 "Анатолий Кулаков" Вот зацените сами в принципе.
1795.12 1816.88 "Анатолий Кулаков" Регистрация пользователя, логин пользователя, поддержка рефреш токенов, подтверждение e-mail, пересылка e-mail, reset пасворда, смена пароля, потом управление двухфакторной аутентификацией и получение информации о пользователе.
1816.88 1819.04 "Анатолий Кулаков" Клеймы и прочая такая информация.
1819.04 1828.84 "Анатолий Кулаков" Вот то есть уже достаточно, чтобы сделать такой хороший пользовательский кабинет и пользовательский экспириенс на уровне входа, выхода, двухфакторной аутентификации и так далее.
1828.84 1829.84 "Анатолий Кулаков" И это хорошо.
1829.84 1838.76 "Анатолий Кулаков" Так, и следующая новость, я не знаю, которая просто достоина отдельной статьи и отдельных маркетинговых дифферамбов, я не знаю почему ее там так вставили бедно отдельным абзациком.
1838.76 1842.60 "Анатолий Кулаков" Это в то, что у нас появились новые Visual Studio темплейты.
1842.60 1846.24 "Анатолий Кулаков" Но мне тут кажется, что вещь даже не в самих темплейтах.
1846.24 1851.44 "Анатолий Кулаков" Visual Studio дерзновенно выходит на новый уровень поддержки джаваскрипта.
1851.44 1855.20 "Анатолий Кулаков" Раньше у него были там шаблончики для ангуляров, реактов и так далее.
1855.20 1861.48 "Анатолий Кулаков" Но теперь она заявляет, что раньше был реп полная фигня и она сейчас делает все по-новому.
1861.48 1872.20 "Анатолий Кулаков" И Visual Studio теперь поддерживает новые темплейты ангуляра, вуя, и поддерживает новые фичи TypeScript и JavaScript.
1872.20 1874.88 "Анатолий Кулаков" Очень сильно, быстро, мощно и модно.
1874.88 1878.08 "Анатолий Кулаков" Для этого у нее был заведен отдельный проект, который теперь называется ESproj.
1878.08 1879.08 "Анатолий Кулаков" Не путайте с CSproj.
1879.08 1880.08 "Анатолий Кулаков" ESproj у нас есть.
1880.08 1885.08 "Анатолий Кулаков" И она, зачем все это делает?
1885.08 1899.84 "Анатолий Кулаков" Visual Studio обещает нам очень хорошую поддержку JavaScript и TypeScript и, наверное, хочет JavaScript-еров пересадить на вот этот замечательный редактор, которым пользуются обычно только бэкэндели.
1899.84 1902.20 "Анатолий Кулаков" И предлагает она им очень много всего.
1902.20 1906.56 "Анатолий Кулаков" Пилотную интеграцию с бэкэнд-проектами, вот этого я вообще боюсь.
1906.56 1914.52 "Анатолий Кулаков" Самую последнюю, самую модную, свежую и красивую поддержку всех самых последних модных красивых фреймворков и их версий.
1914.52 1918.96 "Анатолий Кулаков" Вот это тоже страшно вообще, как они будут успевать, ребята, за всем этим, я не представляю.
1918.96 1923.44 "Анатолий Кулаков" Поддержка всех самых модных команд-тулингов, которые есть в JavaScript.
1923.44 1928.64 "Анатолий Кулаков" Поддержку как JavaScript, так и TypeScript, я уже сказал.
1928.64 1941.76 "Анатолий Кулаков" Хороший, богатый опыт работы в IDE, там IntelliSense, опыт редактирования и вот это все прочее, прочее.
1941.76 1946.76 "Анатолий Кулаков" Чистое разделение между проектами фронтенда и бэкэнда, чтобы их не смешивать.
1946.76 1950.20 "Анатолий Кулаков" Ни в коем случае не смешивайте никогда фронтенда и бэкэнда, 200 раз пожалеете.
1950.20 1964.68 "Анатолий Кулаков" И интегрированные билд-тулы, которые собирают JavaScript прямо в MS Build и которые могут каким-то образом триггериться из .NET Build, тоже страшновато пока.
1964.68 1969.88 "Анатолий Кулаков" Различные UI для того, чтобы управлять NPM, менеджером пакетов.
1969.88 1978.16 "Анатолий Кулаков" Вот это интересно, это совместимая конфигурация с Visual Studio Code для отладки и запуска проектов.
1978.16 1981.56 "Анатолий Кулаков" Первый раз вижу, что они с Visual Studio Code чем-то на это начали совмещаться.
1981.56 1983.16 "Анатолий Кулаков" Это приятно.
1983.16 1987.44 "Анатолий Кулаков" И, естественно, support JavaScript тестовых фреймворков.
1987.44 1992.12 "Анатолий Кулаков" В общем, такая отдельная Visual Studio для GS у нас получается.
1992.12 1996.52 "Игорь Лабутин" Будут бороться со всякими, кто у нас там из мира фронтенда?
1996.52 2001.48 "Анатолий Кулаков" Я даже не знаю, где сейчас фронтендеры сидят, наверное, в чем-то из JetBrains?
2001.48 2005.12 "Игорь Лабутин" Ну да, я забыл, как называется.
2005.12 2006.12 None WebStorm?
2006.12 2007.12 None WebStorm, да.
2007.12 2010.60 "Игорь Лабутин" Будут с ним бороться, видимо.
2010.60 2011.92 None Ну, будет интересно посмотреть.
2011.92 2016.68 "Игорь Лабутин" Да, ну увидим, увидим.
2016.68 2018.80 "Игорь Лабутин" Давай дальше пойдем.
2018.80 2024.08 "Игорь Лабутин" Мы традиционно ждали какого-то большого анонса от NFT Framework, потому что давно уже не было.
2024.08 2026.64 "Игорь Лабутин" По-моему, был третий превью, когда они выпустили статью.
2026.64 2027.64 "Игорь Лабутин" Сейчас могу ошибаться.
2027.64 2030.32 "Игорь Лабутин" И с тех пор от них никаких новостей.
2030.32 2032.92 "Игорь Лабутин" Но нет, от них снова нет никаких новостей.
2032.92 2036.04 "Игорь Лабутин" Я решил пойти посмотреть в их GitHub, что происходит.
2036.04 2037.64 "Игорь Лабутин" Не умерли ли они там вообще?
2037.64 2039.36 "Игорь Лабутин" Да, не умерли, они живут.
2039.36 2041.96 "Игорь Лабутин" У них достаточно активная движуха.
2041.96 2047.84 "Игорь Лабутин" На каждый превью у них выходит аккуратный превью, собственно, статейка, только она в виде маркдауна на GitHub.
2047.84 2051.52 "Игорь Лабутин" В шоу-ноутах будет ссылочка на папочку со всеми аккуратным перечислениями.
2051.52 2057.24 "Игорь Лабутин" Но в большинстве из них там написано, типа, мы зарелизили превью, вот смотрите список фич, вот список багов.
2057.24 2061.80 "Игорь Лабутин" Ссылка на GitHub с соответствующими настройками фильтров.
2061.80 2065.84 "Игорь Лабутин" Типа там с нужными таргетами, ну, нужными, короче, лейблами.
2065.84 2074.60 "Игорь Лабутин" Вот, я аккуратно посмотрел в поисках чего-то такого масштабного и суперкрутого, про что рассказать, но, честно говоря, ничего большого не нашел.
2074.60 2076.92 "Игорь Лабутин" То есть там какие-то очень точечные поддержки.
2076.92 2082.24 "Игорь Лабутин" Тут поддержали такой-то тип, тут поддержали такой-то, значит, новый, там, SQL, что-нибудь.
2082.24 2089.36 "Игорь Лабутин" Тут соптимизировали запрос, тут поменьше теперь скобочек генерим, тут запрос по оптимали, тут JSON обращаемся по-другому.
2089.36 2105.72 "Игорь Лабутин" Ну, то есть какие-то локальные фиксы для, возможно, многих полезных штук, но которые как-то не ложатся в какую-то стройную единую большую историю, как вот там со студией или со S/P/N/A, там, которые можно сгруппировать по каким-то большим темам и рассказать красиво.
2105.72 2109.96 "Игорь Лабутин" Поэтому про EF Core рассказывать ничего не будем, если вам интересно.
2109.96 2110.96 "Игорь Лабутин" Аккуратно просмотрите GitHub.
2110.96 2125.76 "Игорь Лабутин" На самом деле, если смотреть на фичи, их не так много, но в каждом превью их примерно 7-10 штук где-то, которые они считают фичами, то есть там поддержка новых типов, поддержка чего-то, если не считать багов.
2125.76 2128.56 "Игорь Лабутин" И, может быть, там что-то найдется интересное.
2128.56 2135.28 "Игорь Лабутин" Ну и уже традиционно вместо EF Core в этих превью-анонсах попадается Maui.
2135.28 2149.08 "Игорь Лабутин" Maui, после того, как ты прочитал .NET статью, после того, как ты прочитал S/P/N/A Core статью, которая там на много-много экранов, открывать Maui уже как-то неинтересно, потому что там всего 2 больших пункта.
2149.08 2150.08 "Игорь Лабутин" Обычно.
2150.08 2160.28 "Игорь Лабутин" Первый пункт в данном превью называется Desktop Keyboard Accelerators, то есть они добавили возможность назначать горячие клавиши для меню айтемов, либо вообще для любых UI элементов.
2160.28 2163.80 "Игорь Лабутин" Можно делать XAMPP через XAMPP, или можно это делать прямо в C#.
2163.80 2166.28 "Игорь Лабутин" Будет хорошо работать, все замечательно.
2166.28 2167.28 "Игорь Лабутин" А второй традиционный пункт...
2167.28 2169.16 "Игорь Лабутин" Да, шел 21 век.
2169.16 2170.16 "Игорь Лабутин" Да.
2170.16 2171.96 "Игорь Лабутин" А второй традиционный пункт это MoreFixes.
2171.96 2176.32 "Игорь Лабутин" Опять-таки memory leak, что-то улучшали, багов пофиксили, performance поимпровили.
2176.32 2186.80 "Игорь Лабутин" В общем, как-то чуть-чуть, чуть-чуть там, чуть-чуть здесь, чуть-чуть по чуть-чуть, и как-то не чувствуется такого масштабного движения к завоеванию всего UI.
2186.80 2187.80 "Анатолий Кулаков" Интересна разность подхода, да?
2187.80 2190.88 "Анатолий Кулаков" То есть у NTE Framework, если нечего сказать, они молчат.
2190.88 2194.52 "Анатолий Кулаков" А вот Maui, если нечего сказать, они просто высасывают какие-то маркетинговые буллшоты.
2194.52 2196.92 "Игорь Лабутин" Ну вот да, непонятно почему.
2196.92 2204.52 "Игорь Лабутин" То ли у них как бы задача у менеджеров каких-то пушить это все дело, хоть как-то пытаются оставаться в информационном поле.
2204.52 2205.52 "Игорь Лабутин" Не знаю.
2205.52 2211.84 "Игорь Лабутин" Ну, в общем, вот примерно такие дела у нас по основному анонсу Preview 7.
2211.84 2214.28 "Игорь Лабутин" Но дальше есть у нас еще немножко деталек.
2214.28 2221.44 "Анатолий Кулаков" Ну, у нас из основного анонса осталось еще пару классиков, которые хотелось бы подсветить отдельно.
2221.44 2227.68 "Анатолий Кулаков" Прежде всего это iHosted Lifecycle Service, новый интерфейс, который появился в .NET 8.
2227.68 2228.68 "Анатолий Кулаков" Давайте на него посмотрим.
2228.68 2232.32 "Анатолий Кулаков" Итак, как я уже сказал, это новый интерфейс.
2232.32 2235.88 "Анатолий Кулаков" Его особенность заключается в том, что он пронаследован от iHosted Service.
2235.88 2244.32 "Анатолий Кулаков" Я думаю, что с iHosted Service уже большинство из вас сталкивались или с бэкграунд задачами, которые наследованы от iHosted Service.
2244.32 2251.36 "Анатолий Кулаков" Еще напомню, да, iHosted Service это специальный интерфейс, у которого всего-навсего два метода - StartAsync и StopAsync.
2251.36 2262.22 "Анатолий Кулаков" И с помощью него вы можете переопределить ваши классики, они будут получать, то есть вот эти методы будут вызываться по сути на старте приложения и когда приложение завершает свою работу.
2262.22 2266.12 "Анатолий Кулаков" Вы можете в этих методах что-то сделать полезненькое.
2266.12 2272.60 "Анатолий Кулаков" Сервисы очень полезные, интерфейсы то есть очень полезные, очень часто где используются, очень часто где юзаются.
2272.60 2277.80 "Анатолий Кулаков" И вот появился наследник от этого iHosted Service, который предоставляет расширенную функциональность.
2277.80 2288.24 "Анатолий Кулаков" Теперь вы можете ловить ивенты не только когда у вас сервис стартует и стопается, но и перед, а также после этих двух методов.
2288.24 2298.88 "Анатолий Кулаков" То есть теперь вы можете использовать еще дополнительные четыре метода - StartingAsync, StartedAsync, StoppingAsync и StoppedAsync.
2298.88 2299.88 "Анатолий Кулаков" Поподробнее.
2299.88 2309.04 "Анатолий Кулаков" StartingAsync - это метод, который вызывается перед тем, как вызовется любой из методов StartAsync.
2309.04 2327.60 "Анатолий Кулаков" То есть это какая-то самая-самая ранний вызов, когда еще ничего не начинало подниматься, это может быть какая-нибудь очень ранняя валидация, которую вы можете запустить даже перед тем, как любой iHosted Service, перед тем, как стартанул.
2327.60 2334.64 "Анатолий Кулаков" Например, вы в нем можете проверить какие-то критические зависимости для вашего сервиса.
2334.64 2344.28 "Анатолий Кулаков" И, например, если вы убедитесь, что нет какого-то файлика, без которого вы работать не можете или что-то в этом духе, вы можете упасть прямо на старте.
2344.28 2351.44 "Анатолий Кулаков" И вы это можете сделать до того, как все бэкграунд-сервисы начнут свою работу основную.
2351.44 2355.92 "Анатолий Кулаков" То есть до того, как запустится любой StartAsync метод.
2355.92 2362.28 "Анатолий Кулаков" Потому что обычно в StartAsync методе могут делаться какие-то долгие, тяжелые, большие задачи.
2362.28 2374.88 "Анатолий Кулаков" И будет не очень приятно, если вы там начали делать долгую, тяжелую какую-то задачу, а другой хостед-сервис в этот момент запустился, проверил, что ему не хватает какого-то важного файлика и начал гасить приложение.
2374.88 2380.52 "Анатолий Кулаков" То есть начал обрывать всю вашу работу, которую вы там делали не по сильным трудам.
2380.52 2381.84 "Анатолий Кулаков" Теперь вы можете этого избежать.
2381.84 2389.12 "Анатолий Кулаков" Вы можете сначала проверить, а потом уже запускать все вот эти большие массивные ворклоуды, которые есть в вашем приложении.
2389.12 2395.32 "Анатолий Кулаков" Ну и StartAsync - это тот, что запускается после StartAsync.
2395.32 2409.44 "Анатолий Кулаков" То есть после всех StartAsync, которые прошли в вашем приложении, может запустить какую-нибудь валидацию уже состояния самого приложения, какие-нибудь условия, что приложение полностью пронициализировалось, у него все хорошо, все доступно, можно работать.
2409.44 2412.48 "Анатолий Кулаков" Можно открывать двери для входящих запросов, допустим.
2412.48 2421.48 "Анатолий Кулаков" Ну и соответственно StoppingAsync - это специальный хук, который запускается перед тем, как приложение начнет гаснуть, завершаться.
2421.48 2429.28 "Анатолий Кулаков" И StoppedAsync - это специальный хук, который вызывается после того, как ваше приложение зашатдаунилось.
2429.28 2430.28 "Анатолий Кулаков" Так написано.
2430.28 2437.56 "Анатолий Кулаков" Ну и естественно после того, как все сервисы зашатдаунились, и это последний шанс, последняя возможность что-то перехватить.
2437.56 2441.64 "Анатолий Кулаков" Также у нас появилась новая опция, которая называется StartUpTime.
2441.64 2446.24 "Анатолий Кулаков" Она указывает на максимальное время, которое разрешается приложению для старта.
2446.24 2451.32 "Анатолий Кулаков" То есть то время, которое мы как раз и будем проводить в этих старт-сервисах.
2451.32 2457.16 "Анатолий Кулаков" По дефолту оно бесконечное, поэтому наше приложение будет ждать бесконечно, когда сервисы стартанут.
2457.16 2459.40 "Анатолий Кулаков" А здесь интересный вопрос.
2459.40 2461.04 "Анатолий Кулаков" Вот смотрите.
2461.04 2465.40 "Анатолий Кулаков" Мы недавно изобрели такую гениальную штуку, как Default Interface Implementation.
2465.40 2476.64 "Анатолий Кулаков" И Default Interface Implementation, она была специально сделана для того, чтобы если нам понадобилось добавить какие-то новые методы к интерфейсу, мы могли это безбоязненно сделать.
2476.64 2479.60 "Анатолий Кулаков" Напомню, что просто так это считается breaking changes.
2479.60 2488.56 "Анатолий Кулаков" Ибо когда мы добавляем методы к интерфейсу, все наследники от этого интерфейса автоматически перестают компилироваться, пока они не заимплементят эти методы.
2488.56 2497.08 "Анатолий Кулаков" Соответственно, Microsoft не мог идти на такие шаги, поэтому интерфейс они писали с первого раза, с наскоку, но на сто лет вперед, железобетонно.
2497.08 2504.12 "Анатолий Кулаков" И чтобы избежать вот этого ограничения, были как раз и введены Default Interface Implementation.
2504.12 2509.20 "Анатолий Кулаков" Но здесь мы с вами видим, что как раз добавили почему-то отдельный классец.
2509.20 2521.00 "Анатолий Кулаков" Вместо того, чтобы в существующий класс добавить вот эти четыре метода, сделать им какую-то Default имплементацию, которая по дефолту бы раскладывалась в ничего, и были бы все счастливы.
2521.00 2523.44 "Анатолий Кулаков" Никто бы ни на что не обиделся.
2523.44 2525.24 "Анатолий Кулаков" Microsoft по этому пути не пошел.
2525.24 2533.72 "Анатолий Кулаков" Не пошел он по той единственной причине, что вот этот iHosted Service находится в сборке, которая затаргетчена на NETSTANDARD 2.0.
2533.72 2537.68 "Анатолий Кулаков" То есть вот этот старый, унылый, никому не нужный STANDARD 2.0.
2537.68 2548.00 "Анатолий Кулаков" И только для того, чтобы соблюсти совместимость с этим стандартом, было принято решение все-таки сделать по старинке, сделать отдельный класс и пронаследоваться.
2548.00 2549.56 "Анатолий Кулаков" Вот это единственная причина.
2549.56 2558.68 "Анатолий Кулаков" А так, в принципе, было бы такое хрестоматийное место, где бы как раз эти Default Interface Implementation пригодились.
2558.68 2561.60 "Анатолий Кулаков" Ну, давайте вернемся к нашим старт-сервисам.
2561.60 2565.40 "Анатолий Кулаков" Рассмотрим еще один типичный пример, который часто случается в приложениях.
2565.40 2570.32 "Анатолий Кулаков" Допустим, у вас есть два сервиса, которые называются сервис А и сервис Б.
2570.32 2582.76 "Анатолий Кулаков" Первый сервис инициализирует базу данных, допустим, создает нужные таблички, может быть сидит какими-то данными словарными, таблицы заполняет какими-то данными.
2582.76 2586.32 "Анатолий Кулаков" А второй сервис Б, он уже использует эту таблицу.
2586.32 2592.32 "Анатолий Кулаков" То есть он уже подсчитывает какие-то важные отчетики, которые надо считать из этой таблицы.
2592.32 2594.96 "Анатолий Кулаков" Оба этих сервиса должны запускаться в бэкграунде.
2594.96 2600.48 "Анатолий Кулаков" То есть, по сути, мы должны их реализовать с помощью А и хостед сервиса.
2600.48 2604.88 "Анатолий Кулаков" Но очевидно, что один сервис зависит от другого сервиса.
2604.88 2615.36 "Анатолий Кулаков" И в принципе, раньше проблемы в этом не было, потому что все хостед сервисы выполнялись поочередно в том порядке, в котором они были зарегистрированы в контейнере.
2615.36 2623.36 "Анатолий Кулаков" То есть нам достаточно было зарегистрировать сервис А, после этого сервис Б, и фреймворк нам гарантировал, что они будут выполняться по очереди.
2623.36 2631.96 "Анатолий Кулаков" Но недавно в Дотнет 8 у нас была введена такая штука, как конкарнси выполнения хостед сервисов.
2631.96 2633.96 "Анатолий Кулаков" Мы тоже про нее отдельно рассказывали.
2633.96 2640.96 "Анатолий Кулаков" Теперь вы можете указать в опциях специальный флажок, когда все хостед сервисы запускаются параллельно, конкурентно.
2640.96 2651.36 "Анатолий Кулаков" И это может привести к тому, в данном случае, что у вас сервис Б, который использует базу данных, запустится до того, как сервис А закончил ее инициализировать.
2651.36 2652.96 "Анатолий Кулаков" Естественно, это приведет к ошибкам.
2652.96 2654.56 "Анатолий Кулаков" Так мы сделать не можем.
2654.56 2663.56 "Анатолий Кулаков" Стоит ли нам отказываться от конкурентного запуска наших сервисов из-за такой мелочи?
2663.56 2664.56 "Анатолий Кулаков" Конечно же, не стоит.
2664.56 2674.96 "Анатолий Кулаков" Нам поможет как раз наша новая фича про lifetime hosted service, которая позволяет вынести инициализацию базы данных не в метод старт, а в метод стартинг.
2674.96 2691.36 "Анатолий Кулаков" То есть, когда ваше приложение только начинает подыматься, только начинает инициализироваться, искать конфиги и чесаться, в этот момент вы можете в бэкграунде запустить инициализацию базы данных, и она пойдет уже вам накатывать какие-то нужные для вас информации.
2691.36 2701.48 "Анатолий Кулаков" И сервис Б, который использует эту базу данных, он гарантированно будет выполняться только после того, как все стартинг бэкграунд сервисы закончатся.
2701.48 2704.32 "Анатолий Кулаков" Здесь у нас устраивается уже более-менее какая-то цепочка.
2704.32 2713.68 "Анатолий Кулаков" Но при этом сервис Б уже может запускаться конкурентно со всеми вашими другими бэкграунд сервисами, которые в этот момент стартуют у вашего приложения.
2713.68 2722.28 "Анатолий Кулаков" И еще один интересный побочный эффект, что теперь мы не зависим от порядка регистрации в контейнере, что тоже довольно такая стабильная, хрупкая и спорная штука.
2722.28 2725.40 "Анатолий Кулаков" Мало ли кто в контейнере ступочки местами переставит.
2725.40 2728.70 "Анатолий Кулаков" А здесь у нас мы уже четко от интерфейса декларации зависимости.
2728.70 2734.08 "Анатолий Кулаков" Стартинг выполняется четко перед тем, как начнется любой старт.
2734.08 2741.52 "Анатолий Кулаков" И это нам позволяет развязать вот этот небольшой клубочек и зависимость уже становится более явной, более чистой и более предсказуемой.
2741.52 2743.80 "Анатолий Кулаков" Вот такой новый интерфейс.
2743.80 2755.56 "Анатолий Кулаков" И таким образом его можно интересно использовать для всяких инициализации данных и прочих проверок, которые нужно сделать еще до того, как все остальные ваши бэкграунд приложения, бэкграунд сервисы начали свою работу.
2755.56 2760.36 "Игорь Лабутин" Ну, добавили еще одну абстракцию.
2760.36 2762.28 "Игорь Лабутин" Поверх старой, если она нужна, используйте.
2762.28 2764.68 "Игорь Лабутин" Если не нужна, в принципе, можно обойтись и без нее.
2764.68 2767.72 "Игорь Лабутин" Она вам никак не помешает, по идее.
2767.72 2769.16 "Игорь Лабутин" И это хорошо.
2769.16 2770.76 "Игорь Лабутин" Давай пойдем дальше.
2770.76 2776.08 "Игорь Лабутин" Дальше у нас тоже кусочек еще .NET 8, вот этого превью 7.
2776.08 2785.40 "Игорь Лабутин" Это добавление в dependency injection, точнее в контейнер, который умеет работать, и в resolving интерфейсов вокруг этого контейнера.
2785.40 2795.08 "Игорь Лабутин" Давайте сначала вспомним, что же у нас умеет наш встроенный обычный DI контейнер, которым мы все пользуемся так или иначе, когда работаем в .NET.
2795.08 2803.72 "Игорь Лабутин" По сути, вы для каждого регистрируемого сервиса можете контролировать всего три вещи.
2803.72 2808.92 "Игорь Лабутин" Во-первых, вы задаете lifetime, ну понятно, transient, singleton и scope.
2808.92 2815.92 "Игорь Лабутин" Вы можете задать service type, в большинстве случаев это интерфейс, ну может быть не интерфейс, а конкретный тип.
2815.92 2820.60 "Игорь Лабутин" И вы задаете implementation type, либо даже конкретный instance, если это singleton.
2820.60 2827.32 "Игорь Лабутин" Например, на основе этих трех вещей, собственно, устроится весь контейнер, больше там особо ничего нет.
2827.32 2830.72 "Игорь Лабутин" Теперь добавляется четвертая вещь под названием service key.
2830.72 2845.04 "Игорь Лабутин" Это может быть вообще говоря любой объект, но в большинстве случаев это будет скорее всего либо строчка, либо enum, просто потому что его значение нужно будет использовать в атрибуте, а в атрибуте мы не можем использовать прям вообще произвольную-произвольную штуку.
2845.04 2847.40 "Игорь Лабутин" Но аргумент там объект, если что.
2847.40 2865.84 "Игорь Лабутин" И теперь, если раньше у нас только service type определял регистрацию, ну в смысле определяли все три вещи, но поиск происходил только по сервису, по типу сервиса, который нужно нам зарезовывать, то теперь это будет комбинация ключика этого service key и service type, если конечно service key задан.
2865.84 2870.92 "Игорь Лабутин" Как эту штуку надо использовать и вообще зачем она вам может быть нужна?
2870.92 2888.52 "Игорь Лабутин" Нужна она вам может быть за тем, что у вас для одного и того же интерфейса, одного и того же типа сервиса нужно зарегистрировать несколько реализаций, причем эти реализации нужно использовать в разных частях приложения, ну и разные реализации соответственно, не то что вы регистрируете разные, а используете все вместе.
2888.52 2890.36 "Игорь Лабутин" Такое можно было сделать и до этого.
2890.36 2901.76 "Игорь Лабутин" Вы просто в качестве аргумента у себя принимаете не конкретный тот самый тип сервиса, а innumerable от этого типа сервиса и тогда вам выдадут все регистрации, которые были в контейнере.
2901.76 2905.24 "Игорь Лабутин" Если вы принимаете один, но несколько раз зарегистрировали, вам выдадут последний.
2905.24 2909.80 "Игорь Лабутин" Инстанс, ну последний точнее тип реализации, который был зарегистрирован.
2909.80 2942.72 "Игорь Лабутин" А теперь вы можете вместо этого, ну не вместо, а в дополнении к этому использовать новый метод, ну точнее там большая понятно коллекция методов, add_keyed, singletone, есть такой же add_keyed, scoped и кто там еще у нас, transient, и stride, все что вы знаете про добавление есть теперь в такой же версии только с keyed, который добавляет по сути один новый аргумент, object_key, и вы регистрируете, ну с таким key, для такого-то типа мы регистрируем такую-то реализацию.
2942.72 2968.84 "Игорь Лабутин" Для того, чтобы это дело использовать потом, в конструкторе, например класса, куда вы передаете все ваши зависимости, точнее где вы ожидаете все ваши зависимости, и который DI по умолчанию будет подставлять, вы дописываете атрибутик, который называется from_keyed_services, и передаете туда в конструктор этого атрибута, вы передаете туда ключ, тот самый, с которым был зарегистрирован нужный вам тип.
2968.84 2977.52 "Игорь Лабутин" Напоминаю, это может быть, скорее всего это будет либо строчка, либо какой-нибудь там enum, потому что их можно использовать в качестве аргументов в атрибутах.
2977.52 2986.68 "Игорь Лабутин" И все, все будет работать, то есть DI найдет эту самую нужную реализацию нужного типа с нужным ключом.
2986.68 2989.08 "Игорь Лабутин" Все как бы хорошо и все здорово.
2989.08 2991.68 "Игорь Лабутин" Было бы, если бы не несколько но.
2991.68 2994.76 "Игорь Лабутин" Точнее, если бы не два но, но они довольно большие.
2994.76 3005.96 "Игорь Лабутин" На данный момент, если вы вдруг скажете, вау, это штука, которая мне нужна, я пойду пробовать прямо сейчас, знайте, что эта штука, вот этот атрибут, точнее from_keyed_services не работает ни в minimal API, ни в контроллерах.
3005.96 3010.16 "Игорь Лабутин" То есть в методах контроллеров.
3010.16 3012.44 "Игорь Лабутин" То есть оно работает сейчас только в конструкторах.
3012.44 3022.80 "Игорь Лабутин" Но это обещает пофиксить крылья с кандидатами, поэтому подождите немножко и где-нибудь в сентябре наверняка все будет пофикшено и все будет работать.
3022.80 3035.40 "Игорь Лабутин" При этом надо понимать, что никто не мешает вам сказать add_keyed_transient и для одного и того же ключа зарегать несколько реализаций, как мы это делали для одного и того же типа раньше.
3035.40 3039.08 "Игорь Лабутин" Для одного и того же ключа, для одного и того же типа, конечно же.
3039.08 3045.52 "Игорь Лабутин" И тут поведение будет ровно такое же, как было раньше с несколькими регистрациями для без ключей.
3045.52 3050.72 "Игорь Лабутин" Если вы попросите одиночный instance, то вам дадут последний зарегистрированный.
3050.72 3058.88 "Игорь Лабутин" Если вы попросите коллекцию этих типов, вам дадут вообще все, но при этом на коллекцию можно к ней все еще применить from_keyed_services.
3058.88 3070.00 "Игорь Лабутин" То есть у вас параметр конструктора будет звучать как from_keyed_services от нужного вам ключика, а и numerable от вашего типа.
3070.00 3073.60 "Игорь Лабутин" И вам дадут все зарегистрированные реализации за одным ключиком.
3073.60 3078.60 "Игорь Лабутин" Технически так можно, хотя непонятно, кому нужно регистрировать несколько реализаций с одним и тем же ключом.
3078.60 3079.60 "Игорь Лабутин" Это выглядит как-то странно.
3079.60 3082.04 "Игорь Лабутин" Ну, в общем, вот такая штука.
3082.04 3090.44 "Игорь Лабутин" Кажется, что это фича, которая есть, по-моему, ну я могу ошибаться, наверное, во всех DI-контейнерах, кроме собственно стандартного майкрософтовского.
3090.44 3095.32 "Игорь Лабутин" Но теперь она уже есть, наверное, чуть меньше аргументов за то, чтобы использовать что-то стороннее.
3095.32 3100.48 "Анатолий Кулаков" А ты сам пользовался keyed_services когда-нибудь, ну в любом фрейдворке?
3100.48 3103.88 "Игорь Лабутин" Мне кажется, один раз мы где-то...
3103.88 3113.76 "Игорь Лабутин" Давай так, я не пользовался в смысле, что не то чтобы я в тот момент сознательно решил, что я буду этим пользоваться, но я был на проекте, где такая штука была.
3113.76 3123.12 "Анатолий Кулаков" На проектах я тоже видел, но абсолютно никогда не то, что не понимал, а специально избегал использования вот такой вещи.
3123.12 3127.24 "Анатолий Кулаков" Потому что, мне кажется, это как раз-таки мы уже пошли не туда.
3127.24 3135.68 "Анатолий Кулаков" То есть мы уже немножко течем, мы уже знаем о контейнере не только в CompositionRoot, где по-хорошему должны о нем знать.
3135.68 3139.04 "Анатолий Кулаков" То есть это единственное место, где должен фигурировать контейнер, регистрация и так далее.
3139.04 3140.04 "Анатолий Кулаков" Это CompositionRoot.
3140.04 3143.04 "Анатолий Кулаков" Все остальное оно должно не знать о контейнере, оно должно просто работать.
3143.04 3147.76 "Анатолий Кулаков" Мы не зря аргументы принимаем в конструктор, потому что...
3147.76 3152.96 "Анатолий Кулаков" А не вытаскиваем там его, допустим, из ServiceLocator или не инжектируем в property, мы же так не делаем.
3152.96 3163.96 "Анатолий Кулаков" А здесь нам уже приходится принимать какой-нибудь на своих аргументах атрибут писать, который нас четко отправляет к конкретной реализации контейнера.
3163.96 3168.28 "Анатолий Кулаков" И, соответственно, очень большое протекание идет.
3168.28 3170.16 "Анатолий Кулаков" И опять же неясно почему.
3170.16 3178.28 "Анатолий Кулаков" Если вам нужно отделять два интерфейса друг от друга, ну заведите себе маркерные интерфейсы дополнительные.
3178.28 3180.80 "Анатолий Кулаков" Третий интерфейс, пронаследуйте интерфейс.
3180.80 3182.64 "Анатолий Кулаков" Работы ровно на одну строчку.
3182.64 3192.04 "Анатолий Кулаков" Намного меньше, чем писать вот эти атрибуты в начале, то есть в регистрации, писать эти атрибуты в потреблении, потом еще запутывать как бы джунов, которые сюда придут.
3192.04 3199.96 "Анатолий Кулаков" То есть это все больше проблем, чем просто-напросто завести еще один интерфейс и разделить те сервисы, которые вам нужны просто по имени данного интерфейса.
3199.96 3202.88 "Анатолий Кулаков" Поэтому мне кажется, не делайте так.
3202.88 3204.64 "Игорь Лабутин" Ну, посмотрим на adoption.
3204.64 3209.88 "Игорь Лабутин" Будем следить и наверняка будут статьи на тему того, вау, круто или нет, никто не пользуется.
3209.88 3225.56 "Игорь Лабутин" Вообще было бы интересно с какой-нибудь, знаешь, сейчас реализуется восьмерка, будет собрать наиболее часто используемые или неиспользуемые фичи, ну семерки, ладно, шестерки даже, уже два года прошло почти.
3225.56 3228.48 "Игорь Лабутин" Вот была какая-то крутая фича, но никто не пользуется.
3228.48 3229.48 "Анатолий Кулаков" Ну, да, действительно.
3229.48 3235.40 "Анатолий Кулаков" У дотнет в принципе есть телеметрия, но по-моему Microsoft ей никогда не делится какими-нибудь отчетами.
3235.40 3244.88 "Игорь Лабутин" Ну я не думаю, что по телеметрии прям так легко понять вообще в принципе прям конкретные фичи, особенно там, ну, языковые, ну не будет, что у тебя рослин, там, телеметрии сообщать.
3244.88 3252.24 "Игорь Лабутин" Я компилирую код, тут встретилось 350 слов wait, там не знаю ни одного слова там, async, что-то странное.
3252.24 3264.24 "Анатолий Кулаков" Мне кажется, когда они внедряли телеметрию, они именно на это и ссылались, что у нас есть там дотнет 1, где там фичи, которые может быть никогда никем не используются и вообще в жизни не компилируются, а мы их там тратим очень много времени на поддержку.
3264.24 3265.96 "Анатолий Кулаков" Вот хотелось бы нам такие штуки выпиливать.
3265.96 3270.48 "Анатолий Кулаков" Поэтому я не удивлюсь, если они по статистикам там по окням и фичам все-таки собирают.
3270.48 3272.84 "Игорь Лабутин" Ну может быть, может быть, ладно.
3272.84 3276.12 "Игорь Лабутин" Посмотрим, может быть мы как-то это, ну косвенно слушая про это узнается.
3276.12 3287.56 "Игорь Лабутин" Мне кажется, вот раньше, по крайней мере во времена 4Х, да, дотнет фреймворка, мне кажется через пару релизов дотнет фреймворка появлялось какое-то такое общее мнение, что там, не знаю, динамики не взлетели.
3287.56 3292.00 "Игорь Лабутин" В таком духе, то есть через лет 5-6, мне кажется.
3292.00 3297.48 "Анатолий Кулаков" Это все-таки как-то было на настроении в среде комьюнити, что никакой официальной информации от Микрософта не было.
3297.48 3302.16 "Анатолий Кулаков" Ну кроме того, что они увольняли сотрудников, которые там Iron Python разрабатывали и Iron Ruby.
3302.16 3309.68 "Анатолий Кулаков" Ну а в общем-то, Микрософт никаких таких заявлений не давал, что мы собрали статистику и мы теперь точно знаем, что эти лоботрясы нам не нужны.
3309.68 3318.12 "Игорь Лабутин" Ну, поэтому я и говорю, что да, много лет и какое-то такое, да, неформальное понимание, что же происходит.
3318.12 3324.52 "Игорь Лабутин" Ну ладно, давай пойдем пока опять в современность, посмотрим, что там будет со всем этим добром в будущем.
3324.52 3332.00 "Игорь Лабутин" А сейчас у нас вышла Visual Studio, официально выпущена 17.7 уже без превью, это нормальный релиз.
3332.00 3339.76 "Игорь Лабутин" Там довольно много всяких разных изменений, но практически все мы про них уже рассказывали, про всех них.
3339.76 3351.88 "Игорь Лабутин" Быстренько напомню, в разделе Productivity мы теперь можем сравнивать файлы, мы теперь можем копировать с учетом отрезания вот этих передних пробелов, которые никому не нужны, если вы копируете блок какой-нибудь сильной вложенности.
3351.88 3375.32 "Игорь Лабутин" В гид графе изменений в истории показываются теперь несколько бранчей одновременно, можно создавать новые GitHub Action из студии, в ParallelStack окошке можно теперь фильтровать то, что там показывается, чтобы сокращать количество, потому что если вы идете в ParallelStack, скорее всего там будет очень много тридов и там иногда сложно ориентироваться.
3375.32 3383.08 "Игорь Лабутин" В Performance улучшили скорость отладки, улучшили отклик в то, что они называют All-in-One Search в окошке.
3383.08 3399.48 "Игорь Лабутин" Find in files тоже на 50% улучшился, и больше всего в процентах улучшился потребление памяти в C# spellchecker на 90%, я не знаю, на что они тратили время, но теперь spellchecker будет очень оптимальным.
3399.48 3403.44 "Анатолий Кулаков" Да, я вообще не помню, что по студии было spellchecker.
3403.44 3406.96 "Игорь Лабутин" Не, ну, какой-то есть, видимо, не знаю.
3406.96 3421.16 "Игорь Лабутин" В .NET здесь две вещи, это decompile.netcode, то есть студия теперь автоматически декомпилирует, они показывают это окошечко, типа вот тут есть файлик, но мы его не покажем, где-то он там есть.
3421.16 3444.92 "Игорь Лабутин" И в CPUusageTool, если вы пользуетесь встроенной CPUusageTool, там появились некоторые новые инсайты на предмет, как вы можете пооптимизировать ваше приложение на основе того, чего появляется на вершинке в топ-ьюзеджах, то есть если там много каких-нибудь странных, там не знаю, лямбд или еще чего-нибудь, вот, наверное, студия вам подскажет, что надо там что-нибудь пооптимизировать.
3444.92 3455.76 "Игорь Лабутин" В C++ и геймдевелопменте много улучшений, не буду углубляться, в Linux и Beta тоже, там с VSL интеграция получше стала и ее можно теперь автоматически из студии прям поставить.
3455.76 3479.16 "Игорь Лабутин" В веб-девелопменте ты уже сказал, что там прямо много улучшений, в частности, например, зависимости NPM-овские теперь показываются прямо в dependency даже для SPNet-проектов, то есть если у вас есть SPNet-проект, внутри которого лежит фронтендовая часть, как я говорил, никогда так не делайте, то если вы вдруг так сделали, то в dependency у вас требуют только не только NuGet-пакеты, но и NPM-все зависимости тоже.
3479.16 3492.36 "Игорь Лабутин" И одновременно с релизом 17.7 вышла традиционно 17.8 Preview 1, там, как всегда, очень мало пока всего нового, но тем не менее на статью набралось.
3492.36 3500.08 "Игорь Лабутин" В Productivity части они развивают возможность работать с pull-requests прямо из студии, и теперь можно добавлять ревьюеров.
3500.08 3506.92 "Игорь Лабутин" Если вы работаете с pull-requests в Azure DevOps или в GitHub, вы можете прямо из студии теперь докидать ревьюеров в ваш pull-request.
3506.92 3513.08 "Игорь Лабутин" В Diff-фолке, которая показывает разницу файлов, появился режим SummaryDiff.
3513.08 3521.08 "Игорь Лабутин" По-моему, дефолтный режим почти во всех диффолках — это когда он показывает, собственно, только различающиеся части плюс несколько строк контекста вокруг.
3521.08 3528.40 "Игорь Лабутин" В студии раньше такого, как я понимаю, не было, никогда не пользовался студийным, теперь есть.
3528.40 3540.28 "Игорь Лабутин" Дальше странная фича, которую мы с тобой обсуждали и, по-моему, не очень поняли, зачем она нужна — это multi-repo solutions, когда у тебя в одном солюшене несколько репозиториев разных собирается.
3540.28 3549.16 "Игорь Лабутин" В общем, по словам Microsoft, были пользователи, которые сказали, что ограничения на 10 репозиториев мало, сделайте больше, теперь их 25 можно.
3549.16 3552.40 "Игорь Лабутин" То есть были пользователи, которые знают, зачем это надо?
3552.40 3553.40 "Игорь Лабутин" Да, да.
3553.40 3554.40 "Игорь Лабутин" Уже хорошо.
3554.40 3555.40 "Игорь Лабутин" Да.
3555.40 3564.52 "Игорь Лабутин" И фича, которая мне кажется прикольной, я не видел нигде, на самом деле, такой фичи, хотя, может быть, просто не обращал внимания, называется case-preserving find-and-replace.
3564.52 3565.52 "Игорь Лабутин" Смысл фичи в чём?
3565.52 3581.64 "Игорь Лабутин" То есть, если у вас вы ищете, например, слово, не знаю, там, int, а у вас где-то оно написано большими буквами, где-то написано маленькими буквами, где-то написано с большой буквы, то когда вы, например, replace-ите int на string, то string зареплейсится в соответствии с кейсингом.
3581.64 3586.20 "Игорь Лабутин" То есть там, где был int за большой буквы, будет string за большую буквы, где int большими буквами, будет string большими буквами.
3586.20 3587.20 "Игорь Лабутин" Интересно, интересно.
3587.20 3592.24 "Игорь Лабутин" То есть я, короче, такого не видел, но на самом деле фича прям интересная.
3592.24 3599.76 "Анатолий Кулаков" Ну, погоди, если ты ищешь, как бы, что-то в коде, то у тебя там они чётко или с маленькой, или с большой буквы, у тебя они могут прыгать и туда, и сюда.
3599.76 3601.60 "Анатолий Кулаков" Поэтому ты точно знаешь, на что реплейсишь.
3601.60 3606.12 "Игорь Лабутин" Не, могут, если у тебя, например, класс и переменная называются одинаково, и поле.
3606.12 3612.76 "Игорь Лабутин" Ну, в смысле, одинаково, но с учётом кейсинга класс у тебя будет с большой буквы, а переменная, очевидно, с маленькой.
3612.76 3615.88 "Игорь Лабутин" Да, ну, в таком случае… Ну, это первое, что мне пришло
3615.88 3622.60 "Анатолий Кулаков" в голову. Да, но опять же, когда ты в последний раз переименовал переменные с помощью реплейсинга… Слушай, и так не переименовывал,
3622.60 3627.52 "Игорь Лабутин" но на самом деле, то, что я делал, с помощью реплейсинга я на самом деле бывало менял терминологию в комментах.
3627.52 3641.84 "Игорь Лабутин" То есть, когда мы, например, поняли, что какой-то там термин мы переименовываем по бизнесу, то вот там вот просто, как бы, сказатель replace, и вон, не важно, там было в начале предложение первым словом, он станет с большой буквы, то будет нормально, мне кажется.
3641.84 3642.84 "Игорь Лабутин" Ну, ладно, может быть.
3642.84 3648.76 "Игорь Лабутин" Ну, то есть, мне кажется, что это фича, которая хуже не сделает, а лучше может сделать в каких-то случаях вполне.
3648.76 3649.76 "Игорь Лабутин" Да, точно.
3649.76 3656.24 "Игорь Лабутин" В дебайкинге мы много раз рассуждали про то, что есть такой тул, называется dotnet counters, вот это всё.
3656.24 3660.36 "Игорь Лабутин" В студию, наконец, добавили окошко, в котором можно посмотреть dotnet counters.
3660.36 3665.76 "Игорь Лабутин" Теперь прямо в diagnostics window есть вкладочка, где можно посмотреть dotnet counters.
3665.76 3669.52 "Игорь Лабутин" То же самое, что вам покажет dotnet counters тул.
3669.52 3680.20 "Игорь Лабутин" И сравните тем, что он вам показывает, например, что вы в студии можете видеть те же значения, которые вы, например, будете видеть, когда вы запустите ваше приложение в контейнере и на него натраиваете dotnet counters уже настоящий.
3680.20 3685.60 "Игорь Лабутин" Можете заранее посмотреть, что там показывается, поотлаживать там, как ваши каунтеры кастомные, например, показываются.
3685.60 3691.84 "Игорь Лабутин" В Razor Tooling появилась возможность автогенерить хендлер методы.
3691.84 3701.08 "Игорь Лабутин" Помнишь, была возможность такая в каких-нибудь, не знаю, в информовых дизайнере, ты даблкликал на кнопочку, и тебе появлялась автогенерированный метод с правильной сигнатурой.
3701.08 3702.08 "Игорь Лабутин" Ну да, обязательно.
3702.08 3718.72 "Игорь Лабутин" Вот, теперь в Razor точно так же можно, теперь в разметке написать, типа он какой-нибудь клик = и имя придумать, а потом что-то там, то ли нажать, то ли комплишек какой-то появляется, и тебе автогенерится, соответственно, обработчик с правильными всякими аргументами.
3718.72 3724.24 "Анатолий Кулаков" И точно так же из UI-ной кнопочки можно будет в базку ходить, запросы делать, да, все как положено?
3724.24 3725.24 "Анатолий Кулаков" Пока нет, но...
3725.24 3726.24 "Анатолий Кулаков" Всю бизнес-логику записывать.
3726.24 3728.24 "Игорь Лабутин" Но скоро, скоро, скоро, скоро.
3728.24 3739.56 "Игорь Лабутин" И второе изменение в Razor Tooling, это если вы хотите в ваших Razor темплейтах C# код показывать с другим бэкграундом, теперь это можно, я не знаю, зачем, я очень не люблю бэкграунд, ну, короче.
3739.56 3744.08 "Игорь Лабутин" Я не люблю, когда у меня код раскрашен разным бэкграундом, но кому-то может быть...
3744.08 3746.80 "Анатолий Кулаков" То есть картинку там на бэкграунде поставить, или что значит?
3746.80 3753.16 "Игорь Лабутин" Нет, ну, фон раз, не знаю, там у тебя на черном фоне у тебя будет разметка, а на синем фоне код на C#.
3753.16 3766.28 "Анатолий Кулаков" Окей, ну если ты смотри, если ты сравниваешь, ой, смешиваешь какой-нибудь Blazer, Jazz и C# вместе, может там у тебя нужно каким-то образом их различать, потому что так уже по подсветке не видно, у тебя же глаз весь замыливается.
3766.28 3767.28 "Игорь Лабутин" Ну, может быть, действительно.
3767.28 3768.28 "Игорь Лабутин" Действительно.
3768.28 3769.28 "Анатолий Кулаков" Ладно, мои личные предпочтения.
3769.28 3772.36 "Игорь Лабутин" Слава богам, да, что мы не сталкиваемся с таким кодом.
3772.36 3781.20 "Игорь Лабутин" И интеллитест еще раз улучшили, там какую-то новую завезли модель, по которой она анализирует ваши исходники и придумывает еще лучшие тесты, еще более качественные.
3781.20 3787.04 "Игорь Лабутин" Посмотрим, не знаю, интеллитестом я не пользовался, тест пишу сам, поэтому никогда не генерил их автоматически.
3787.04 3789.36 "Игорь Лабутин" По старинке, да, без всякого ай-и-и-я.
3789.36 3791.32 "Игорь Лабутин" Да, пока да, пока по старинке.
3791.32 3793.36 "Игорь Лабутин" Мне своего пока интеллекта хватает.
3793.36 3800.52 "Анатолий Кулаков" Ну, хорошо, так, холодный аперитивчик мы тут с тобой пропустили, давай горяченького перейдем.
3800.52 3802.60 "Анатолий Кулаков" Вроде чего, как бы все сегодня собрались.
3802.60 3816.88 "Игорь Лабутин" Да, мы действительно записывали, как корректно отметили в комментариях к прошлому подкасту, почему мы не осветили историю с MockU, потому что она произошла ровно через день, если я правильно помню, после того, как мы записали
3816.88 3822.36 "Игорь Лабутин" выпуск. И более того, по-моему, даже доп-нот превью вышел, типа
3822.36 3826.36 "Игорь Лабутин" там через день, через два дня после записи. Да, по-моему, через день.
3826.36 3837.52 "Игорь Лабутин" То есть, это на самом деле далеко не первый раз так случается, мы встречаемся, записываем выпуск, я его свожу или еще что-то, и вот буквально там, тут же Microsoft выкатывает какой-нибудь аптейд большой.
3837.52 3842.84 "Игорь Лабутин" Блин, подождали бы денек, и вот уже было бы больше новостей.
3842.84 3846.48 "Игорь Лабутин" Ну, ничего, всегда войдет в следующий выпуск, так что мы сильно не опоздали.
3846.48 3853.88 "Анатолий Кулаков" Зато мы как бы посмотрели историю, пыль улеглась, мнения прозвучали, и мы можем немножко обозреть побольше.
3853.88 3854.88 "Анатолий Кулаков" Тоже верно.
3854.88 3864.08 "Анатолий Кулаков" Итак, одной, наверное, из самых горячих новостей этого года точно, я думаю, всего десятилетия, было это самоубийство МОКУ.
3864.08 3878.36 "Анатолий Кулаков" К сожалению, за все это время, пока случился данный конфьюз, не вышло какой-то хорошей интересной расследовательской статьи, с обзорами, с метриками, с мнениями, с людьми и так далее.
3878.36 3880.80 "Анатолий Кулаков" Поэтому придется до сих пор все еще собирать по частям.
3880.80 3884.84 "Анатолий Кулаков" Я все-таки надеюсь, что кто-то такой обзорчик напишет для будущих поколений.
3884.84 3887.04 "Анатолий Кулаков" Просто незаменимая вещь.
3887.04 3890.28 "Анатолий Кулаков" Итак, что же произошло?
3890.28 3896.60 "Анатолий Кулаков" История связана с библиотекой МОКУ, которая используется в тестах для того, чтобы мокать объекты.
3896.60 3903.80 "Анатолий Кулаков" Казалось бы, не то чтобы какая-то богатая большая функциональность, но на самом деле практически в любом приложении есть тесты.
3903.80 3907.76 "Анатолий Кулаков" И практически в любых тестах всегда вам нужно будет что-нибудь мокать.
3907.76 3910.92 "Анатолий Кулаков" Если тесты более или менее сложные, то мокать вам их нужно.
3910.92 3915.52 "Анатолий Кулаков" И МОКУ - это самая популярная библиотека для мокирования в тестах.
3915.52 3919.20 "Анатолий Кулаков" Настолько популярная, что ее использует даже сам Микрософт везде.
3919.20 3922.72 "Анатолий Кулаков" И в ронтаймах, и в компиляторах, и где только ее нет.
3922.72 3926.92 "Анатолий Кулаков" В общем, это дефолтная библиотека практически на всех дот-нет проектах.
3926.92 3932.40 "Анатолий Кулаков" Она занимает 11 место среди вообще всех пакетов, которые есть в нугете по числу скачиваний.
3932.40 3937.56 "Анатолий Кулаков" То есть после ЕФ, Серилога, Ньютон Софт Джессона и прочих.
3937.56 3938.88 "Анатолий Кулаков" В общем, 11 место - это довольно хорошо.
3938.88 3941.44 "Анатолий Кулаков" Там их всего нет, естественно, где-то рядом придется.
3941.44 3946.40 "Анатолий Кулаков" Но она намного популярнее по идее, потому что используется должна чаще.
3946.40 3947.40 "Анатолий Кулаков" Вот.
3947.40 3950.40 "Анатолий Кулаков" Соответственно, очень популярная штука.
3950.40 3957.84 "Анатолий Кулаков" Для примера, другие моковские библиотеки, которых в дот-нете тоже абсолютно полно, они не вошли даже в топ 100.
3957.84 3959.80 "Анатолий Кулаков" А это на 11 месте.
3959.80 3963.40 "Анатолий Кулаков" То есть среди моков она первая, среди пакетов она популярная.
3963.40 3965.72 "Анатолий Кулаков" И в принципе, среди...
3965.72 3967.20 "Анатолий Кулаков" Почему она сыскала такую популярность?
3967.20 3971.76 "Анатолий Кулаков" У нее идеальный просто интерфейс для того, чтобы мокать объекты.
3971.76 3984.56 "Анатолий Кулаков" Он не минималистичный, как есть, например, в других библиотеках, которые позволяют вам на какой-то динамической магии, на каких-то методах расширения, которые появляются не в том месте и не там, где надо.
3984.56 3986.72 "Анатолий Кулаков" В общем, сделать чуть-чуть покороче.
3986.72 3988.96 "Анатолий Кулаков" Он как раз именно шарповый.
3988.96 3996.04 "Анатолий Кулаков" У него есть строгие типы, у него хорошие понятные сигнатуры, у него ноль магии, по крайней мере для API.
3996.04 3999.80 "Анатолий Кулаков" Все читается хорошо, выполняется быстро, в общем, все, что нужно для библиотеки.
3999.80 4004.68 "Анатолий Кулаков" Библиотека была шикарная, все годы она очень старая, уважаемая была.
4004.68 4005.68 "Анатолий Кулаков" И все такое.
4005.68 4008.04 "Анатолий Кулаков" Что же, собственно, произошло?
4008.04 4010.48 "Анатолий Кулаков" А произошло страшное.
4010.48 4021.76 "Анатолий Кулаков" Люди начали замечать, что как только они обновлялись на новейшую версию, которая была в тот момент 4.20, у них начинали происходить волшебные вещи.
4021.76 4031.24 "Анатолий Кулаков" Например, компилятор начинал ходить в интернет на какой-то там подозрительный сайт в клауде и сливать данные.
4031.24 4039.20 "Анатолий Кулаков" Все это происходило благодаря специальному проекту, у которого были закрыты исходники.
4039.20 4042.52 "Анатолий Кулаков" Более того, у него были обфуцированные бинарники.
4042.52 4047.44 "Анатолий Кулаков" Этот проект затаскивался из библиотеки МОКУ, который я выше описывал.
4047.44 4049.24 "Анатолий Кулаков" И этот проект как?
4049.24 4056.36 "Анатолий Кулаков" Он сканировал какие-то локальные данные и затем отсылал их в облако, в интернет.
4056.36 4061.88 "Анатолий Кулаков" И запускался он из дотнет-анализаторов, в тот момент, когда происходил билд вашего проекта.
4061.88 4065.64 "Анатолий Кулаков" И никаких возможностей, опций отключить это не было.
4065.64 4068.04 "Анатолий Кулаков" По всем поведениям это типичный вирус.
4068.04 4074.20 "Анатолий Кулаков" Если вы такое видите, значит вас взломали и все ваши пароли на данный момент куда-то утекаются.
4074.20 4087.84 "Анатолий Кулаков" Как мы уже вас не раз предупреждали, все, что вы качаете с интернета, это экзешники и потенциально вирусы, которые могут заражать ваши компы, стирать ваши данные и отправлять пароли неизвестным кругу лиц.
4087.84 4090.80 "Анатолий Кулаков" Вот, практически такая штука произошла.
4090.80 4096.96 "Анатолий Кулаков" Опять же, пошли разбираться, как взломали МОКУ, как заразили МОКУ.
4096.96 4101.56 "Анатолий Кулаков" Оказывается, что при втором взгляде уже на эту проблему никто никого не заражал.
4101.56 4110.20 "Анатолий Кулаков" Ибо автор этой библиотеки, которого зовут GZU, он сам добавил данную функциональность.
4110.20 4111.64 "Анатолий Кулаков" То есть, это была никакая не middleware.
4111.64 4118.44 "Анатолий Кулаков" Это был предустановленный нормальный pull-request, референс на специальную библиотеку, которая называется SponsorLink.
4118.44 4124.24 "Анатолий Кулаков" И эта библиотека не просто сканировала ваши данные на компьютере, она сканировала вашу репозиторию.
4124.24 4143.44 "Анатолий Кулаков" Она запускала команду git config get user email, то есть получала email пользователя текущего, который вы сейчас билдите, хешировала этот email с помощью SHA-256 и отправляла это на сервера в клауде.
4143.44 4153.24 "Анатолий Кулаков" И делала она это для того, чтобы проверить, участвуют ли данные пользователи, то есть, поддержит ли данный пользователь библиотеку МОКУ на sponsorship.
4153.24 4160.76 "Анатолий Кулаков" Ну, то есть, спонсор он или не спонсор данной библиотеки.
4160.76 4163.08 "Анатолий Кулаков" Проверяла она это по email.
4163.08 4169.36 "Анатолий Кулаков" Довольно злобный хак, и недаром у большинства пользователей волосы встали дыбом.
4169.36 4173.96 "Анатолий Кулаков" Потому что прежде всего без спроса забирают ваш email.
4173.96 4176.12 "Анатолий Кулаков" Никто не знает, что это за email.
4176.12 4179.20 "Анатолий Кулаков" Корпоративный email, скрытый email, открытый email.
4179.20 4181.32 "Анатолий Кулаков" Можно его вообще забирать или нельзя его забирать.
4181.32 4193.44 "Анатолий Кулаков" И потом то, что относится к какой-то подвидности персональных данных, отправляют на неизвестный сервер.
4193.44 4199.68 "Анатолий Кулаков" Если с этой точки подходить с юридической точки зрения, то это прямое нарушение GDPR.
4199.68 4205.60 "Анатолий Кулаков" Не важно, что email хешировался, этот хеш довольно слабый и легко подбирается через радужные таблицы.
4205.60 4207.48 "Анатолий Кулаков" В принципе, здесь нет никаких проблем.
4207.48 4217.88 "Анатолий Кулаков" И, соответственно, большинство пользователей скричали, что за безобразие, как можно без нашего спроса наши email забирать и куда-то отсылать.
4217.88 4223.84 "Анатолий Кулаков" Вторая половина скричала, мы сидим под GDPR, нас сейчас всех срочно с работы выгонят за такое, вы что это делаете.
4223.84 4227.48 "Анатолий Кулаков" В общем, много было криков, много еще чего было.
4227.48 4231.08 "Анатолий Кулаков" Из интересных настроек программа не просто так сканировала и отсылала.
4231.08 4238.88 "Анатолий Кулаков" У нее было прям несколько настроек, достойных нормального вируса, типа мои первые шаги в вирусописании.
4238.88 4246.08 "Анатолий Кулаков" Например, у нее скачивался с интернета конфиг, который говорил, что первые 15 дней по дефолту надо себя никак не проявлять.
4246.08 4251.60 "Анатолий Кулаков" Также она себя никак не проявляла, если определяла билд-систему в переменных окружениях.
4251.60 4260.48 "Анатолий Кулаков" То есть искала переменные окружения CI, TeamCityVersion, TFBuild, FWare, такие стандартные типичные билд-тулзы, в которых есть.
4260.48 4270.64 "Анатолий Кулаков" После этого она писала файлик на диске, в котором пыталась записать информацию о том, увидел пользователь ее сообщение или не увидел.
4270.64 4272.08 "Анатолий Кулаков" Она показывала сообщение.
4272.08 4278.20 "Анатолий Кулаков" Самое интересное, что при билде иногда она с помощью анализатора выдавала warning.
4278.20 4291.48 "Анатолий Кулаков" То есть показывала сообщение, и в этом сообщении было или "Спасибо, мой друг, что ты поддерживаешь Моку", если вдруг спонсор действительно одобрился, или наоборот сообщение было "Не хотите ли вы поддержать Моку, то донатьте нам, пожалуйста".
4291.48 4296.64 "Анатолий Кулаков" И информацию о том, увидел пользователь сообщение или не увидел, эта утилита пыталась записать в файлик.
4296.64 4304.92 "Анатолий Кулаков" И все бы хорошо, если бы не проклятый Mac и Linux, у которых настроены политики безопасности так, что просто так им файлик ничего там не запишешь.
4304.92 4309.48 "Анатолий Кулаков" И вот на этих операционных системах утилита это падала.
4309.48 4314.36 "Анатолий Кулаков" И соответственно, крашила весь анализатор, или что-то там, что она там еще могла зацепить.
4314.36 4318.00 "Анатолий Кулаков" И именно так ее быстро обнаружили.
4318.00 4329.12 "Анатолий Кулаков" И именно благодаря вот этому падению автору пришлось ненадолго отключить поддержку спонсор Линка в Моку.
4329.12 4338.40 "Анатолий Кулаков" И отключил он ее именно с таким комментарием, что я пока уберу, потому что не кроссплатформенно, падает на файликах, но потом по идее починю и верну обратно.
4338.40 4347.56 "Анатолий Кулаков" Но до отключения прошло еще много-много истерик, которые проявлялись на Reddit, на GitHub, в Twitter и где их только не было.
4347.56 4352.52 "Анатолий Кулаков" Самое интересное, что, как я уже говорил, эта утилита пишет с помощью ворнингов сообщения.
4352.52 4356.48 "Анатолий Кулаков" Сообщения благодарности или сообщения о том, что нас просят задонетить.
4356.48 4361.12 "Анатолий Кулаков" И все бы ничего, но у большинства нормальных людей включен флаг "Warning us error".
4361.12 4365.32 "Анатолий Кулаков" То есть любое сообщение, которое дает нам анализатор, оно считается за ошибку.
4365.32 4367.72 "Анатолий Кулаков" То есть по сути проект не собирался.
4367.72 4375.20 "Анатолий Кулаков" И даже если вы спонсор, то в этом сообщении эта утилита благодарила вас за то, что вы спонсор, и проект у вас тоже не собирался.
4375.20 4377.16 "Анатолий Кулаков" Вот такая там была интересная бага.
4377.16 4386.80 "Анатолий Кулаков" Ну то есть вот таким образом автор решил каким-то образом себя, не себя, а как-то привлечь деньги к проекту.
4386.80 4390.24 "Анатолий Кулаков" Это не было сделано каким-то там сильно скрытным образом.
4390.24 4393.00 "Анатолий Кулаков" Он написал большую статью перед этим.
4393.00 4395.48 "Анатолий Кулаков" Как я хочу монетизировать свой проект.
4395.48 4402.24 "Анатолий Кулаков" Он в этой статье расписал, что он много лет занимается, там много сил отнимает, денег он не видел никогда.
4402.24 4404.72 "Анатолий Кулаков" Библиотека всеми компаниями используется.
4404.72 4408.24 "Анатолий Кулаков" Я такой бедный, хочу денег, пойду вот по такому именно пути.
4408.24 4413.72 "Анатолий Кулаков" Он сделал публично этот коммит, когда зареференсировал по SourceLink в МОКу.
4413.72 4415.08 "Анатолий Кулаков" Там у него была ища.
4415.08 4416.08 "Анатолий Кулаков" То есть человек не прятался.
4416.08 4419.04 "Анатолий Кулаков" Человек просто пытался решить свою проблему тем, что ему не донатят.
4419.04 4441.12 "Анатолий Кулаков" Но, к сожалению, довольно вот таким вот варварским плохим способом, который, конечно, подорвал доверие и к самому автору, и к библиотеке, и большинство сообщений, которые пестрели практически везде, это то, что мы не знаем, мы удаляем МОКу, мы переходим на другие пакеты, нет прощения этому вандалу и прочие вещи.
4441.12 4445.24 "Анатолий Кулаков" Ещё один интересный тренд развязался в репозиториях рантайма.
4445.24 4450.04 "Анатолий Кулаков" То есть, естественно, самым главным потребителем МОКу, как я уже говорил, являлся Microsoft.
4450.04 4452.84 "Анатолий Кулаков" Ну, до сих пор является, в принципе.
4452.84 4453.84 "Анатолий Кулаков" Является Microsoft.
4453.84 4455.60 "Анатолий Кулаков" Там всё завязано на МОКу.
4455.60 4459.20 "Анатолий Кулаков" Я даже боюсь себе представить, что будет, если они начнут переходить.
4459.20 4461.72 "Анатолий Кулаков" Там, скорее всего, просто всё встанет.
4461.72 4463.32 "Анатолий Кулаков" Потому что тестов миллион.
4463.32 4466.32 "Анатолий Кулаков" Это, я не знаю, как менять тестовый фреймворк.
4466.32 4467.32 "Анатолий Кулаков" Сравни задачи.
4467.32 4472.68 "Анатолий Кулаков" Там тоже, соответственно, встал вопрос, товарищи, что будем делать?
4472.68 4474.52 "Анатолий Кулаков" Опять же, паника, мы все тонем.
4474.52 4493.68 "Анатолий Кулаков" Пришёл Ричард Лендер и говорит, что типа сейчас, на данный момент, проблемы не существует, потому что, как я уже сказал, из-за ошибки чтения и записи файлов вот эта утилита была почищена, то есть в SponsorLink удалили из МОКу, поэтому никакой проблемы сейчас не существует.
4493.68 4498.80 "Анатолий Кулаков" Но как бы мы видим проблему, что автор такую штуку может сделать.
4498.80 4503.80 "Анатолий Кулаков" Мы сейчас проанализируем это всё внутри.
4503.80 4506.44 "Анатолий Кулаков" Так, никакой спешки нет.
4506.44 4510.36 "Анатолий Кулаков" Но мы понимаем, что решение это будет непростое, поэтому взвесим все за и против.
4510.36 4514.60 "Анатолий Кулаков" И решили, что пока ничего делать не будут.
4514.60 4521.28 "Анатолий Кулаков" Но если вдруг проблема сохранится, то они, конечно же, будут искать альтернативы.
4521.28 4526.20 "Анатолий Кулаков" На что автор сразу написал, что проблемы никакой нет, я всё откатил, вы чего, вы чего.
4526.20 4527.76 "Анатолий Кулаков" И на что ему резонно заметили.
4527.76 4533.00 "Анатолий Кулаков" Типа ты откатил по причине той, что у тебя там эксепшн, и ты обещал это всё вернуть обратно.
4533.00 4534.52 "Анатолий Кулаков" На что опять же автор ничего не ответил.
4534.52 4536.40 "Анатолий Кулаков" То есть позиция у него довольно странная.
4536.40 4542.04 "Анатолий Кулаков" Там, где его ловят, он говорит, что смотрите, сейчас всё хорошо, что вы беситесь, я всё учёл.
4542.04 4552.68 "Анатолий Кулаков" Но при этом у него опять же выходят статьи, продолжают выходить, выходят оправдательные какие-то посылы с тем направлением, что как-то монетизироваться надо.
4552.68 4563.28 "Анатолий Кулаков" Сейчас я мой спонсорлимит допишу, он будет ещё лучше всё хешировать, он будет ещё лучше всё сканировать, падать не будет, и как бы всем вам понравится.
4563.28 4567.04 "Анатолий Кулаков" Все вы поймёте, что произошло.
4567.04 4568.72 "Анатолий Кулаков" Вот такая интересная история.
4568.72 4574.08 "Анатолий Кулаков" Ну, в сухом остатке кажется, что это действительно конец МОКУ, как в самой популярной библиотеке.
4574.08 4577.00 "Анатолий Кулаков" Но тут последнее слово, конечно, за Микрософтом.
4577.00 4581.80 "Анатолий Кулаков" То есть, если Микрософт перейдёт, то шансов уже выжить никаких у него не будет.
4581.80 4590.52 "Анатолий Кулаков" Если Микрософт останется, он, скорее всего, сообщество будет вынуждено смириться и по-прежнему будем дальше кусать кактус и плакать, и использовать.
4590.52 4593.28 "Игорь Лабутин" Нет, но есть ещё технически другой вариант.
4593.28 4602.08 "Игорь Лабутин" Никто же не мешает форкнуть, там лицензия абсолютно позволяет, то есть либо найдётся кто-то, кто форкнет, и по какой-то причине какой-то из форков станет суперпопулярным.
4602.08 4604.20 "Игорь Лабутин" Тогда возможно все перейдут на него.
4604.20 4605.84 "Игорь Лабутин" Ну, все не все, а кто-то.
4605.84 4607.88 "Анатолий Кулаков" Справедливости ради форки уже появились.
4607.88 4611.32 "Анатолий Кулаков" Ну, естественно, одну кнопочку нажать, все понажимали.
4611.32 4612.68 "Анатолий Кулаков" Никакой проблемы в этом нет.
4612.68 4616.44 "Анатолий Кулаков" Форки появились и почистили, конечно, всё там и всё такое.
4616.44 4619.24 "Анатолий Кулаков" Но тут же видишь, самая большая проблема - это в доверии.
4619.24 4628.40 "Анатолий Кулаков" То есть, если ты уже не можешь доверять автору, которому доверяет Микрософт, то что говорить о случайном дяде Васе, который нажал кнопочку "форк" на гитхабе.
4628.40 4630.76 "Анатолий Кулаков" Опять же, никакого доверия к такому пакету нет.
4630.76 4634.76 "Анатолий Кулаков" Я на самом деле удивляюсь, почему до сих пор Микрософт не форкнул эту библиотеку.
4634.76 4639.68 "Анатолий Кулаков" И с его точки зрения искать какую-то альтернативу - это просто самоубийство было.
4639.68 4646.64 "Анатолий Кулаков" А вот форкнуть, поддержать официально где-нибудь в Микрософте, тем более у него нет ещё такого продукта, то есть не с чем конкурировать.
4646.64 4653.76 "Анатолий Кулаков" И чтобы люди увидели перед собой авторитетного автора, и вот на этот форк точно бы все перешли.
4653.76 4659.48 "Анатолий Кулаков" Я вот всё-таки надеюсь, что вот так вот эта ситуация разрешится, вот так вот всё и будет.
4659.48 4670.76 "Игорь Лабутин" И я, честно говоря, надеюсь, что будет не так, потому что это будет очередной кусочек в историю, что у нас нет нормальных open-source библиотек, кроме как от Микрософта.
4670.76 4714.00 "Игорь Лабутин" Вот, поэтому хотелось бы, чтобы они, конечно, появлялись не только от Микрософта, и в данном случае, может быть, было бы интересно, чтобы кто-нибудь форкнул, кто-нибудь, может быть, известный относительно, но тем не менее готовый поддерживать MockU, что, скорее всего, там тоже работ поддержки дофигища, то есть можно, понятно, не апгрейдиться, а остаться на 4, что там, 19, да, или какая там сейчас вышла вот эта последняя с фиксом, грубо говоря, и в которой пока можно пользоваться, то есть остаться на ней, ну, опять же, это тестовая зависимость, это не рантайм, то есть может быть и окей какое-то время, но понятно, что там, у него там были какие-то большие планы по переписыванию на всякие там reflection-free, source-генераторы, вот это вот такая фигня.
4714.00 4769.96 "Игорь Лабутин" Вот, сейчас он, кстати, в твиттере, ну, какое-то время назад написал, что он придумал новый способ, как правильно делать спонсорлинк, теперь это будет не, точнее, билд-ворнинг-то вроде как будет, но он теперь не будет посылать имейл, и там теперь какая-то адская смесь, нужно будет себе поставить гитхаб, это приложение, которое gh, да, github.com/online-tool, к нему поставить global tool, там, я так понимаю, такая же идея, как с dotnet, можно туда добавлять global tool, нужно будет поставить global tool от спонсорлинка, и через него, и типа раз в месяц запускать вот этот самый tool от спонсорлинка, который будет тебе прописывать переменное окружение, куда будет на месяц запихивать за подписанный jwt-токен, ну, грубо говоря, jwt-токен, jwt-токен style, которому написано, что на этот месяц у тебя все хорошо, ты все оплатил, можно ворнинг не показывать.
4769.96 4774.00 "Анатолий Кулаков" Ну, то есть такая лицензия своеобразная, да, которую нужно ручками уже и продлевать.
4774.00 4775.00 "Анатолий Кулаков" Типа того, да.
4775.00 4795.00 "Игорь Лабутин" То есть вот это сейчас, pull request я этот видел, я там не вчитывался, понятно, в детали, я видел это большое обсуждение, в нем он как бы вмерзнет сейчас в спонсорлинк сам, соответственно, ну, какое-то время там, видимо, нужно, чтобы обновить серверную инфраструктуру вокруг этого, и после этого все это залетит уже куда надо.
4795.00 4815.76 "Игорь Лабутин" Там дальше, конечно, возникает вопрос, как действительно, вообще, в принципе, ко всей этой истории возникает вопрос, ну, например, не знаю, я там хороший пользователь, я тебе, товарищ, даже плачу, ну, предположим, но я использую твой MockYou в моем корпоративном проекте, где я коммичу рабочим e-mail, который с GitHub не связан никак, ну, вообще.
4815.76 4816.76 "Игорь Лабутин" Вот.
4816.76 4821.56 "Игорь Лабутин" И как ты поймешь в моем рабочем проекте, что MockYou я использую и являюсь твоим спонсором?
4821.56 4830.16 "Анатолий Кулаков" Ну, насколько я помню, у него там было в бэклоге как-то поддержать корпоративных пользователей, поэтому наверняка он найдет какую-нибудь галочку или переменное окружение для этого.
4830.16 4832.16 "Игорь Лабутин" Ну, вот непонятно, непонятно.
4832.16 4839.12 "Анатолий Кулаков" Просто, опять же, ты платишь, там собираешь, допустим, а коллега твой по работе, который откомпилирует твой проект, он не платит и не собирает.
4839.12 4840.12 "Анатолий Кулаков" Что ему делать?
4840.12 4841.12 "Игорь Лабутин" Я понимаю, да.
4841.12 4842.12 "Игорь Лабутин" Непонятно.
4842.12 4860.12 "Игорь Лабутин" Нет, ну, опять же, если я могу на этом же компе, например, свой иметь персональный, да, ну, в смысле, склонировать свой GitHub, да, и поставить GitHub, исходить с этого компа в GitHub, то, видимо, вызвав этот global tool, я глобально себе в переменное окружение пропишу, что я, типа, правильный.
4860.12 4864.52 "Игорь Лабутин" И тогда неважно, откуда ты ее используешь, у тебя все прописано уже, все хорошо.
4864.52 4867.08 "Анатолий Кулаков" Все разработчики пропишут себе, да, твое переменное.
4867.08 4873.40 "Игорь Лабутин" Нет, в смысле, вот этот GitHub tool, он подпишет лично твою подпись.
4873.40 4875.04 "Игорь Лабутин" Так другим-то как собирать твой проект?
4875.04 4876.04 "Игорь Лабутин" Никак.
4876.04 4878.04 "Игорь Лабутин" Ну, а у них будут билд-ворнинги, да.
4878.04 4885.04 "Анатолий Кулаков" Да, тут еще надо сказать, что там не только ворнинги были, там еще у него есть бипы, то есть он мог бипать бипер, что ужасно вообще.
4885.04 4894.64 "Анатолий Кулаков" И у него еще были рандомные слипы, то есть ваши тесты могли, то есть ваши билды, по сути, могли выполняться иногда дольше, а не спали иногда.
4894.64 4898.60 "Анатолий Кулаков" В общем, вот такие вот курьезные, смешные вставочки были.
4898.60 4925.08 "Игорь Лабутин" Да, и я дополню, действительно, статей вышло огромное количество, было огромное количество статей, все, все бежим на n-substitute, было забавно, в репу n-substitute пришли товарищи и создали ishu со словами, короче, вот такая фигня произошла с MockU, а можете ли вы, товарищи авторы n-substitute, гарантировать, что вы никогда в жизни, так сказать, не будете делать того же самого?
4925.08 4929.00 "Игорь Лабутин" Прям такой ishu, вопрос, типа вот гарантируйте мне в это ishu, что вы такого никогда не сделаете.
4929.00 4941.80 "Игорь Лабутин" Также тоже в n-substitute пришли товарищи с словами, чуваки, почему вы до сих пор не написали тул, который спортирует автоматический код из MockU в n-substitute?
4941.80 4953.92 "Игорь Лабутин" Значит, те такие, да нам не надо, мы как бы за разнообразие хотите MockU пользоваться, хотите n-substitute, нам это че, комьюнити, пожалуйста, надо пишить, скини, чуваки, вы должны написать.
4953.92 4978.28 "Игорь Лабутин" Ну в общем, много всяких таких забавных вещей, плюс довольно много статей от известных людей, то есть Ayenda отметился, Dylan отметился, Aaron Stannard отметился, ну в общем, много кто высказал свое мнение на эту тему, так что если вы поищите MockU и .NET за последние 2-3 недельки, будет много чего интересного.
4978.28 4985.32 "Анатолий Кулаков" Где угодно при этом, да, большинство конечно из компании уже перешли, заменили и все такое.
4985.32 4987.60 "Игорь Лабутин" Ну либо золочили, я так понимаю, что…
4987.60 5000.68 "Анатолий Кулаков" Да, либо золочили, мы у себя просто золочили, последние версии, которые нормальные и в принципе я не помню каких-то нововведений крутинских, которые я как-то ждал от MockU.
5000.68 5004.28 "Анатолий Кулаков" Все, что в ней есть, работало еще пару лет назад и мне пока хватало.
5004.28 5010.40 "Игорь Лабутин" Ну и даже если там будут какие-то супер уязвимости, это опять же тестовая зависимость, поэтому по идее на продакшн влиять как бы не должна.
5010.40 5013.92 "Анатолий Кулаков" Да, да, именно так.
5013.92 5023.80 "Анатолий Кулаков" Просто обидна сама ситуация, то есть одна из самых популярнейших библиотек развивалась всегда, долго, стабильно, красиво, хорошо, и тут такое.
5023.80 5037.72 "Анатолий Кулаков" Ну и тут нужно понять, что опять же тема того, что опенсорс не зарабатывает, что донейшны не работают, что как бы на всех опенсорсах в основном наживаются большие там страшные капиталистические компании.
5037.72 5041.92 "Анатолий Кулаков" Эта тема ходит не первый год, она уже давно подымалась в том и рельевом виде.
5041.92 5049.68 "Анатолий Кулаков" Тот же самый Aaron Stenner, у него есть проект, который он специально делает для монетизации опенсорс-проектов.
5049.68 5056.32 "Анатолий Кулаков" Опять же другие примеры, когда опенсорс-проекты закрываются своими коммерческими лицензиями.
5056.32 5068.48 "Анатолий Кулаков" Мария Де Бе сейчас с HashiCorp объявила, что он все свои проекты закроет, больше не будет у него опенсорсных, они будут под специальной лицензией, которые там предполагают какие-то ограничения в коммерческом использовании.
5068.48 5091.60 "Анатолий Кулаков" Вот эта волна, она все больше и чаще, но просто это, наверное, первый раз, где обычно в стабильном, нормальном дотнет-мире произошла вот такая большая истерика, которая там заразила практически очень много компьютеров и по чистой случайности не заразила просто всех, потому что вовремя подняли кипиш, потому что была ошибка, потому что автор быстро откатил это изменение.
5091.60 5098.80 "Анатолий Кулаков" Но могла бы заразить всех, в том числе и рантайм в микрософте, и весь дотнет, и весь микрософт.
5098.80 5104.56 "Анатолий Кулаков" Если бы действительно на месте автора был бы какой-то зломышленник-психопат, то он мог бы наделать огромное количество дел.
5104.56 5109.04 "Анатолий Кулаков" Но здесь автор довольно-таки упорот в хорошем смысле этого слова.
5109.04 5117.20 "Анатолий Кулаков" То есть он продолжает писать, продолжает воспринимать критику, позволяет какую-то улучшение сделать, естественно, в том направлении, в котором он считает нужным.
5117.20 5122.12 "Анатолий Кулаков" Несмотря на то, что абсолютно все авторитетные люди говорят, что "человек, ты не туда пошел-ка".
5122.12 5125.84 "Анатолий Кулаков" Не так надо деньги зарабатывать в open-source, есть другие способы.
5125.84 5129.04 "Анатолий Кулаков" Как бы хорошего не существует, но работающие вроде есть.
5129.04 5132.08 "Анатолий Кулаков" Но пока автор лежит на своем.
5132.08 5136.52 "Анатолий Кулаков" То есть, скорее всего, хорошо эта история для него не закончится.
5136.52 5146.64 "Игорь Лабутин" Ну, другие способы есть, но кажется, что другие способы в основном относятся к продуктам open-source, а у него все-таки либа, который вроде не...
5146.64 5151.40 "Игорь Лабутин" Ну, SAS на ней не построишь, моки по подписке.
5151.40 5158.80 "Анатолий Кулаков" Ну, есть Rhinomoc от Aengi, платный, есть кто там, Televik, по-моему, тоже платный.
5158.80 5161.16 "Анатолий Кулаков" То есть платные моки-то существуют, почему нет?
5161.16 5163.40 "Игорь Лабутин" Ну, да, наверное, не знаю.
5163.40 5166.68 "Игорь Лабутин" Может, поэтому все и пользуются мокью, потому что остальные платные.
5166.68 5178.20 "Игорь Лабутин" Другое дело, что, может быть, тебе достаточно, не знаю, 10-50 платящих пользователей, чтобы уже за хорошую цену отбивать все, а не 20 миллионов тех, кто не платит.
5178.20 5181.24 "Анатолий Кулаков" Это смотря как раз еще к вопросу о том, на фига нужен .NET Foundation.
5181.24 5190.36 "Анатолий Кулаков" Если весь Microsoft сидит на этой штуке, Foundation, по идее, должен был первым делом идти и донатить ее проектам, которые использует хотя бы Microsoft.
5190.36 5195.12 "Анатолий Кулаков" Не говоря уже о том, что просто какой-нибудь топ-100 из нугета должен был брать и донатить.
5195.12 5201.24 "Анатолий Кулаков" Вот если бы он через какую-то такую штуку пошел, может быть, все закончилось бы лучше.
5201.24 5202.60 "Игорь Лабутин" Ну, да.
5202.60 5205.36 "Игорь Лабутин" Ладно, давай пойдем дальше.
5205.36 5209.52 "Игорь Лабутин" История интересная, печальная в каком-то смысле.
5209.52 5215.24 "Игорь Лабутин" Будем смотреть, куда разовьется, что будет с мокью и что там будет изменяться.
5215.24 5228.56 "Игорь Лабутин" Наткнулся я на заметочку-незаметочку в блоге Жени Пешковой, если кто не знает, у него есть блог, будет в шоу-ноутах, подпишитесь, с ссылкой на Reddit с интересным вопросом.
5228.56 5232.48 "Игорь Лабутин" А что вам не нравится в .NET, что бесит в .NET?
5232.48 5239.48 "Игорь Лабутин" Там подобралось довольно большое количество разных комментов, там некоторые вообще не по делу, некоторые как бы такие не очень популярные, но в целом…
5239.48 5243.32 "Анатолий Кулаков" А есть какая-то предыстория, то есть почему что-то должно бесить, почему именно сейчас?
5243.32 5248.92 "Игорь Лабутин" Слушай, я не знаю, мне кажется, это такой стандартный вопрос для…
5248.92 5250.92 "Анатолий Кулаков" Стандартный вопрос на каждый год, да? Что дискритически что-то сразу бесит.
5250.92 5263.52 "Игорь Лабутин" Да, причем там прямо вот, я вот сейчас смотрю на него, там вопрос типа "What do you find most frustrating about .NET?" без какого-либо, ну, боди этого вопроса, просто вопрос "Что вам не нравится в .NET?"
5263.52 5264.52 "Анатолий Кулаков" И 416 комментариев.
5264.52 5276.56 "Игорь Лабутин" Ну ладно, допустим. Вот, и если их так суммировать, там 416 штук, много, и если как-то их погруппировать и так далее, то получается следующая конструкция.
5276.56 5285.40 "Игорь Лабутин" Самый популярный, который самый прям заголосованный, это про… по-английски он звучит "Lack of UI direction".
5285.40 5300.08 "Игорь Лабутин" Ну, то есть у нас UI в .NET дадуре всяких разных, Windows only, не Windows only, кроссплатформенных, не кроссплатформенных, но нет какого-то единого качественного кроссплатформенного при этом от Microsoft.
5300.08 5302.08 "Игорь Лабутин" Опять от Microsoft.
5302.08 5303.08 "Игорь Лабутин" Да, да, да.
5303.08 5305.24 "Игорь Лабутин" А зачем нам это Microsoft?
5305.24 5307.12 "Игорь Лабутин" Ну вот… Так положено, да?
5307.12 5308.12 "Игорь Лабутин" Да, да, да, так положено.
5308.12 5314.44 "Игорь Лабутин" Единый качественный, вроде бы, хочется верить, что может быть Avalonia сможет занять эту нишу.
5314.44 5317.52 "Игорь Лабутин" То есть у нас есть, как же его?
5317.52 5319.76 "Игорь Лабутин" Во-вторых, кроссплатформенность у нас большая.
5319.76 5320.76 "Игорь Лабутин" Uno?
5320.76 5325.48 "Игорь Лабутин" Uno, да, Uno платформ есть, но я тоже не видел, чтобы он прям был суперпопулярным.
5325.48 5336.88 "Игорь Лабутин" То есть он, наверное, какую-то нишу занимает, но не то, что прям из каждого утюга, если ты думаешь про UI на .NET, ты, наверное, не с первого раза даже вспомнишь, что есть Uno.
5336.88 5347.76 "Игорь Лабутин" То есть вот Avalonia сейчас на слуху, но, опять же, Avalonia на слуху у меня, по крайней мере, просто потому что там наши люди ее пишут в каком-то смысле, поэтому ты про нее знаешь.
5347.76 5354.92 "Анатолий Кулаков" А так, среди… Ну да, если так вспомнить, какими приложениями ты пользовался, написанными на Avalonia?
5354.92 5355.92 "Анатолий Кулаков" Да никакими.
5355.92 5356.92 "Анатолий Кулаков" Ну, никакими, да.
5356.92 5362.12 "Игорь Лабутин" Я все думаю попробовать как-нибудь сам что-нибудь написать, но не настолько.
5362.12 5365.60 "Игорь Лабутин" То есть понятно, что… В общем, это одна из основных больших претензий.
5365.60 5370.76 "Игорь Лабутин" Вторая – это зоопарк.
5370.76 5384.28 "Игорь Лабутин" Стороннему человеку очень сложно объяснить про .NET, потому что есть .NET, есть .NET Core, есть .NET Framework, есть .NET Standard, есть… Ну и вот эта вся вот петрушка с именованием и переименованием.
5384.28 5387.28 "Игорь Лабутин" Это все единый .NET, но попробуем.
5387.28 5391.40 "Анатолий Кулаков" Чуть не знаю, а кого-то это волнует, ну какая разница?
5391.40 5392.40 "Анатолий Кулаков" Кому надо, кто-то разберется.
5392.40 5393.40 "Игорь Лабутин" Кому не надо, кто-то разберется.
5393.40 5394.40 "Игорь Лабутин" Что бесит .NET?
5394.40 5395.40 "Игорь Лабутин" Вот это бесит.
5395.40 5399.12 "Анатолий Кулаков" Я же это… Я еще даже как-то никогда не задумывался, что это проблема.
5399.12 5400.12 "Игорь Лабутин" Ну, допустим, ну ладно.
5400.12 5404.44 "Игорь Лабутин" Ну потому что мы, блин, с тобой уже три года подробно рассказываем, что же это такое.
5404.44 5405.44 "Игорь Лабутин" Чем они отличаются.
5405.44 5407.48 "Игорь Лабутин" И на работе, и не на работе.
5407.48 5414.44 "Игорь Лабутин" То есть я помню, что я и на работе рассказывал, что такое .NET Standard и зачем он, когда появлялся только .NET Core.
5414.44 5423.28 "Игорь Лабутин" Поэтому мы-то просто в теме довольно сильно, а просто сторонний .NET разработчик, или даже не .NET разработчик, ему совсем тяжело.
5423.28 5424.28 "Игорь Лабутин" Ну ладно.
5424.28 5427.04 "Игорь Лабутин" Ну ладно, вопросов там еще есть.
5427.04 5428.80 "Игорь Лабутин" Переусложненные проекты.
5428.80 5434.88 "Игорь Лабутин" Ну причем, как бы вот в русском переводе Женя перевел как переусложненные проекты, там всякие медиаторы и прочее.
5434.88 5438.64 "Игорь Лабутин" А в английском это было overengineering and a lot of abstractions.
5438.64 5445.80 "Игорь Лабутин" Честно говоря, я думал, что этим славится Java, но вот глядя со стороны .NET видимо тоже про это.
5445.80 5448.32 "Анатолий Кулаков" Но мы идем в этом направлении.
5448.32 5453.32 "Анатолий Кулаков" Java это вообще слишком overengineering, а мы пока стараемся overengineering.
5453.32 5458.40 "Игорь Лабутин" Ну вот смотри, на самом деле мне кажется, какие-то отголоски этого прозвучали уже сегодня.
5458.40 5466.32 "Игорь Лабутин" Вот мы сегодня когда обсуждали Cade Services в dependency injection, ты же сам сказал, ну как бы, что за фигня, давай лучше новых интерфейсов нафигачим.
5466.32 5471.44 "Анатолий Кулаков" Слушай, у меня вообще ко всей индустрии dependency инженерное материало на пару докладов.
5471.44 5472.68 "Анатолий Кулаков" Я как-нибудь выдам.
5472.68 5483.76 "Игорь Лабутин" Вот, то есть опять же, вот какой-нибудь там, не знаю, не Java конечно, там Python или Go, ты там просто бы, ну да, ключики, строчки и погнали.
5483.76 5486.56 "Игорь Лабутин" А в .NET новый интерфейсик заведи.
5486.56 5488.88 "Игорь Лабутин" Нет, в Java ты бы завел еще и фабрику, наверное.
5488.88 5492.68 "Анатолий Кулаков" В Java есть Spring, ты бы навесил атрибуты, он бы за тебя завел фабрику.
5492.68 5493.68 "Игорь Лабутин" Ну хорошо, да.
5493.68 5501.52 "Игорь Лабутин" Spring, нет, там нужен какой-нибудь резолвер был бы написать Spring, который бы резолвил атрибуты, из которых ты бы уже получал что-нибудь.
5501.52 5502.52 "Игорь Лабутин" Ну неважно, ладно.
5502.52 5506.12 "Игорь Лабутин" Тоже, наверное, переусложняем, конечно, там все попроще, но тем не менее.
5506.12 5510.04 "Игорь Лабутин" То есть кажется со стороны, что все-таки, ну довольно много у нас всего такого.
5510.04 5514.32 "Игорь Лабутин" Может быть это так, может быть не так, не знаю, мы просто привыкли.
5514.32 5516.32 "Игорь Лабутин" Опять же, глядя внутри, ну нам норм.
5516.32 5519.16 "Игорь Лабутин" Ну заведем интерфейсик, что такого.
5519.16 5522.52 "Игорь Лабутин" А те, кто приходят может быть снаружи, не знаю.
5522.52 5526.28 "Игорь Лабутин" Хотя по идее вопрос был для тех, кто занимается на этом.
5526.28 5529.76 "Анатолий Кулаков" Так, для тех, кто занимается, мне кажется, сложность не слишком большая.
5529.76 5534.92 "Анатолий Кулаков" Но опять же, мы долго сидим, может кто занимается, джуны там пришли и первый год это увидели.
5534.92 5539.12 "Анатолий Кулаков" У них совсем другие какие-то мысли по этому поводу.
5539.12 5540.12 "Игорь Лабутин" Да, ладно, дальше.
5540.12 5541.12 "Игорь Лабутин" Дейт тайм аппи.
5541.12 5542.12 "Игорь Лабутин" Окей, дальше.
5542.12 5549.36 "Анатолий Кулаков" Ну первое, вообще можно бы согласиться, правда же, но дейт тайм не починить 20 лет, это позор.
5549.36 5553.68 "Игорь Лабутин" Есть нода тайм, но ее надо сделать как сделала джава.
5553.68 5557.96 "Игорь Лабутин" Как говорят многие, в джаве же тоже был йода тайм, из которого нода тайм родился.
5557.96 5565.00 "Игорь Лабутин" Джава просто выкинула свои дейт тайм, ну не выкинула, они как бы задеприкейтнули их и сказали, берем йоду тайм и заталкиваем внутрь.
5565.00 5567.96 "Игорь Лабутин" Просто говоря, у них сейчас нормальный дейт тайм в стандартной библиотеке.
5567.96 5568.96 "Игорь Лабутин" Благодаря этому.
5568.96 5573.84 "Анатолий Кулаков" Ну вот, когда у нас появлялся дейт онли, тайм онли, там же опять вставал вопрос.
5573.84 5578.92 "Анатолий Кулаков" Скид приходил, говорил, типа, возьмите мою библиотеку и не любите коневую маму.
5578.92 5582.24 "Анатолий Кулаков" Давайте сделаем по-человечески, раз такой шанс пошел.
5582.24 5586.68 "Анатолий Кулаков" Когда на dotnet core переделывали, там же тоже какие-то несовместимости вводили.
5586.68 5590.92 "Анатолий Кулаков" Говорили, вот давайте выбросим, вот сейчас кроссплатформина, сделаем нормальная дата времени.
5590.92 5593.92 "Анатолий Кулаков" Один раз люди помучаются, потом будут зато радоваться.
5593.92 5594.92 "Анатолий Кулаков" Опять же нет.
5594.92 5595.92 "Анатолий Кулаков" Ну да.
5595.92 5599.36 "Анатолий Кулаков" Там где надо, как бы вот, не хватает уверенности
5599.36 5601.36 "Игорь Лабутин" у них. Да, ладно.
5601.36 5605.72 "Игорь Лабутин" Следующий пункт вот к нашему предыдущей теме, это мало open source проектов.
5605.72 5615.00 "Игорь Лабутин" Причем в смысле, что мало open source, который именно проектов, продуктов, которые бы все пользовались.
5615.00 5619.88 "Игорь Лабутин" То есть, любую инфраструктурушную штуку возьми, но мы это как-то уже с тобой обсуждали.
5619.88 5624.16 "Игорь Лабутин" Ну условно, кавка и прочие базы данных все и так далее.
5624.16 5629.28 "Игорь Лабутин" То есть, java, go, питончик может быть, раст сейчас стал появляться.
5629.28 5630.96 "Игорь Лабутин" На dotnet почти ничего нет.
5630.96 5632.84 "Анатолий Кулаков" Да, да, так и есть.
5632.84 5635.00 "Анатолий Кулаков" Очень бедная комьюнити, я согласен.
5635.00 5641.52 "Игорь Лабутин" То есть, понятно, что это исторически, и это вытекает возможно из следующего пункта, что есть стереотип о том, что dotnet windows only.
5641.52 5647.00 "Игорь Лабутин" Это, кстати, наверное, правильная мысль от тех, кто внутри dotnet.
5647.00 5652.04 "Игорь Лабутин" Те, кто внутри dotnet, они понимают, что он уже кросс-платформенный, но объяснить это сторонним людям иногда бывает сложновато.
5652.04 5653.84 "Игорь Лабутин" Так а зачем тебе объяснять?
5653.84 5657.80 "Анатолий Кулаков" Мы же говорим, проблема, почему те, кто внутри dotnet, не пишут нормального open source продукта.
5657.80 5660.36 "Анатолий Кулаков" Они же не пишут, потому что они не знают, что он
5660.36 5663.36 "Игорь Лабутин" windows only. А потом, что все уже написаны продукты на других языках.
5663.36 5664.36 "Анатолий Кулаков" Ну так не бывает.
5664.36 5666.60 "Анатолий Кулаков" Все были написаны, кавка вышла и не было написано.
5666.60 5671.36 "Анатолий Кулаков" Ну а сейчас потом после кавки… Датаметер появился, когда уже все было написано.
5671.36 5672.96 "Игорь Лабутин" Ну нет, не все написано.
5672.96 5693.76 "Игорь Лабутин" А тут вот может быть еще одна штука, которая тоже упоминается в этом треде на реддите, про то, что big tech, ну там имеются в виду всякие фанги, грубо говоря, не используют dotnet, а на самом деле, что кубернет, что кавка, они же все как бы родились, ну в большинстве случаев, да, рождались в каких-то больших конторах, ну и потом только уже отдавались плюс-минус open source.
5693.76 5696.40 "Анатолий Кулаков" Ну на самом деле это тоже большое заблуждение.
5696.40 5698.68 "Анатолий Кулаков" То есть, в России big tech, как dotnet, используется.
5698.68 5701.24 "Анатолий Кулаков" Может он просто используется для внутренних проектов.
5701.24 5702.24 "Анатолий Кулаков" Да.
5702.24 5705.92 "Анатолий Кулаков" Там все ремы на нем пишут, админки всякие пишут, и так далее.
5705.92 5706.92 "Анатолий Кулаков" То есть, его полно.
5706.92 5713.32 "Игорь Лабутин" Ну вот есть опять плюс-минус стереотип, что если ты хочешь идти там в Google или куда-нибудь в какую-нибудь мету, да,
5713.32 5718.68 "Анатолий Кулаков" в фейсбук, скорее всего, dotnet тебе не потребуется. Там тоже ни про какой big tech разговора не было.
5718.68 5728.12 "Анатолий Кулаков" И тот же кубернет, он практически там делался, конечно, в виду три компании, но не знаю, вряд ли на это повлиял, как это выбор языка.
5728.12 5729.96 "Игорь Лабутин" Скорее всего, но тем не менее.
5729.96 5730.96 "Игорь Лабутин" В общем, как-то так.
5730.96 5733.32 "Игорь Лабутин" Ну опять же, пункт, который многие упомянули.
5733.32 5734.32 "Игорь Лабутин" Ну и C#.
5734.32 5735.32 "Игорь Лабутин" Многословно.
5735.32 5736.32 "Игорь Лабутин" Да ладно.
5736.32 5739.32 "Игорь Лабутин" Что жалуются на синтексе C#?
5739.32 5741.32 "Анатолий Кулаков" На многословность, да.
5741.32 5749.32 "Игорь Лабутин" Он очень многословный, он это… void не тип, но mobility кривой, вот это все.
5749.32 5752.40 "Анатолий Кулаков" Не, void не тип, это, конечно, нормуль проблема.
5752.40 5754.72 "Анатолий Кулаков" Но синтексе C#, по-моему, вообще идеальный.
5754.72 5758.52 "Анатолий Кулаков" Как раз строгий баланс между многословностью и выразительностью.
5758.52 5759.52 "Анатолий Кулаков" Ты привык.
5759.52 5762.72 "Анатолий Кулаков" Да я не привык, я на многих языках пишу просто.
5762.72 5776.40 "Игорь Лабутин" Не, я согласен, что возвращаясь в C#, каждый раз, ну опять же, непонятно, чувствуешь это от того, что ты вернулся в то, на чем писал последние 15 лет, или как бы… хотя, опять же, 10 лет назад мы писали на другом C#.
5776.40 5782.68 "Анатолий Кулаков" Ну типа да, я, например, с плюсов переходил, и там, где принято переменки из одной буквы называть и все такое.
5782.68 5787.36 "Анатолий Кулаков" И когда я перешел в C#, действительно, там первые пару дней было непривычно, потому что надо много тайпить.
5787.36 5796.28 "Анатолий Кулаков" Но зато, когда я возвращался через месяц к своему проекту, и там все называлось не "into C", блин, а нормально "into string" какой-нибудь, или "into char".
5796.28 5802.76 "Анатолий Кулаков" В общем, ты понимаешь, что ты не зря писал один раз, но после этого ты еще раз прочитал, и тебе стало хорошо и понятно.
5802.76 5804.40 "Анатолий Кулаков" И всем твоим коллегам, кстати, тоже.
5804.40 5805.76 "Анатолий Кулаков" Поэтому не зря, не зря.
5805.76 5811.56 "Анатолий Кулаков" То есть, мне кажется, это не такой многословный, как Java, допустим, не такой там лаконичный, как C или Rust.
5811.56 5813.16 "Анатолий Кулаков" Но, по-моему, у него баланс очень хороший.
5813.16 5814.16 "Анатолий Кулаков" Ну, наверное.
5814.16 5820.92 "Игорь Лабутин" Я не спорю, что C# хороший язык, но вот кто-то отмечает, что могло бы быть попроще.
5820.92 5827.56 "Игорь Лабутин" Ну вот, а потом Женя задал этот же вопрос его подписчикам, там тоже накопилось некоторое количество комментариев.
5827.56 5837.20 "Игорь Лабутин" Один из них это был ".net=C#", то есть почти все, подразумевая .net, практически всегда говорят о C#.
5837.20 5842.84 "Анатолий Кулаков" Ну, это минус, опять же, не от плохой жизни, а просто C# прекрасен.
5842.84 5858.68 "Игорь Лабутин" Ну, C# прекрасен, да, но понятно, что даже я, когда меня спрашивают, на чем я пишу, я говорю, я пишу на .net, хотя я пишу на C#, я не пишу на F#, я не пишу на Visual Basic, но ты так привычно говоришь на .net.
5858.68 5862.12 "Игорь Лабутин" Хотя на Java, понятно, что там сложнее.
5862.12 5863.64 "Игорь Лабутин" Тоже всегда все говорят на Java.
5863.64 5865.28 "Игорь Лабутин" Да, но там язык Java все-таки.
5865.28 5868.60 "Игорь Лабутин" То есть там как бы и платформа, и язык называются одинаково.
5868.60 5870.60 "Игорь Лабутин" Тут как бы поэтому, ладно.
5870.60 5875.12 "Игорь Лабутин" Второй момент это то, что нет аспектно-ориентированного программирования встроенного.
5875.12 5878.04 "Игорь Лабутин" Ну вот сейчас, а мы эти интерсепторы завезем.
5878.04 5881.00 "Игорь Лабутин" Ну, там вот пока такое, зачаточное, ну да.
5881.00 5888.80 "Игорь Лабутин" Configure await, кто-то упомянул, от которого все, ну как-то может быть хотели бы избавиться, но пока никак.
5888.80 5896.68 "Игорь Лабутин" Ну и дальше там стандартные, так скажем, обсуждения про всякие discriminated unions, вот это все.
5896.68 5900.72 "Игорь Лабутин" Все то, что давно предлагают добавить в C#, но все никак не добавится.
5900.72 5902.72 "Игорь Лабутин" В общем, вот такая штука.
5902.72 5913.68 "Игорь Лабутин" Интересно, я надеюсь, что вы уже многие отметились, может быть даже и у Жени, те, кто нас слушают, но если вам есть что добавить, про то, что вас конкретно бесит на .net, оставляйте комментарии.
5913.68 5916.56 "Игорь Лабутин" Посмотрим, может какая дискуссия завяжется у нас тоже.
5916.56 5921.48 "Анатолий Кулаков" Ну, тут опять же, смотри, хотелось бы отметить, что бесит это неправильное слово, да.
5921.48 5926.48 "Анатолий Кулаков" Многих нормальных людей ничего не бесит этот код, он не должен вызывать у тебя больших эмоций.
5926.48 5930.92 "Анатолий Кулаков" Но то, что вы хотели бы улучшить, так было бы, наверное, правильнее.
5930.92 5938.12 "Игорь Лабутин" Ну да, но то, что вы хотели бы улучшить, может быть правильнее писать прямо в Microsoft в репозитории, нет?
5938.12 5945.48 "Анатолий Кулаков" Ну опять же, у Microsoft есть там какие-то позиции, например, на то же самое discriminated union, что он концептуально не подходит в нашу повесточку.
5945.48 5948.64 "Анатолий Кулаков" Поэтому зачем писать в Microsoft, можно нам написать.
5948.64 5957.08 "Игорь Лабутин" Не, ну нам всегда полезно написать, мы всегда обсудим если интересная тема, забежит в комментарии, мы ее в выпуск как-нибудь добавим, так что, ну да, пишите.
5957.08 5964.92 "Анатолий Кулаков" Да, да, приходите, жалуйтесь, пишите, просите, может быть тоже обсудим или что-нибудь подскажем, мало ли.
5964.92 5966.24 "Игорь Лабутин" Давай дальше.
5966.24 5972.28 "Игорь Лабутин" Выпустила Microsoft статью недавно, буквально несколько дней назад, про логирование внезапно.
5972.28 5981.60 "Анатолий Кулаков" Ну да, и в принципе про логирование Microsoft писала еще в самых первых версиях .NET, казалось бы, ничего такого интересного, но статья довольно не банальная.
5981.60 5987.44 "Анатолий Кулаков" Она новая, при том раскрывает нам некоторые интересные аспекты, что не в каждом проекте используется.
5987.44 5996.00 "Анатолий Кулаков" Как бы не то, что берите и логируете какие-нибудь ваши методы под какими-то уровнями.
5996.00 5999.56 "Анатолий Кулаков" То есть здесь статья, несмотря на то, что называется, гайдлайны.
5999.56 6007.08 "Анатолий Кулаков" Она не очень похожа на гайдлайны, она похожа на редко используемые хорошие практики, поэтому назвать ее где-то примерно лучше вот так.
6007.08 6015.48 "Анатолий Кулаков" И более того, это гайдлайн для авторов библиотек, то есть не для приложений, которые используют логирование, а для библиотек.
6015.48 6019.92 "Анатолий Кулаков" По сути там разница небольшая, в паре абзацев.
6019.92 6022.40 "Анатолий Кулаков" В основном рекомендации, естественно, подойдут всем.
6022.40 6029.84 "Анатолий Кулаков" Ну что ж, давайте посмотрим, что же такое Microsoft, интересно, нам рекомендует для авторов библиотек в разрезе логирования.
6029.84 6035.52 "Анатолий Кулаков" Прежде всего, ну, наверное, да, зачем нужны логирования для библиотек, казалось бы.
6035.52 6050.70 "Анатолий Кулаков" Ну, наверное, для того же, для самого, для всех нужны и в приложении, для того, чтобы показать разработчикам или вашим потребителям, кастомерам, пользователям, что творится в вашей библиотеке внутри, какие у нее там ошибки были, как она приняла то или иное решение и куда пошла.
6050.70 6054.96 "Анатолий Кулаков" Поэтому, в принципе, прокинуть логер в библиотеку - это довольно правильное решение.
6054.96 6071.84 "Анатолий Кулаков" Есть альтернативные мнения, которые утверждают, что библиотека должна вам просто-напросто сообщать какие-то коды ошибок или возвращать какие-то строки с ошибками, а логировать их, анализировать их или делать с ними что-то другое - это уже должно решать само приложение.
6071.84 6086.48 "Анатолий Кулаков" Но обычно на практике эта концепция разбивается, как только у вас появляется более или менее сложная библиотека или какой-нибудь фреймворк или еще что-то такое сложное, где этих кодов возврата не довозвращаешься или эксепшенов не добросаешься.
6086.48 6090.76 "Анатолий Кулаков" Все-таки иногда полезно залогировать подробно, а то в чем происходишь.
6090.76 6096.48 "Анатолий Кулаков" Что там происходило, в чем была проблема или как ворклоу себя вел.
6096.48 6103.96 "Анатолий Кулаков" Прежде всего, давайте вспомним, что для того, чтобы что-то залогировать, вам прежде всего нужно получить классик, который называется iLogger.
6103.96 6107.48 "Анатолий Кулаков" И получить этот классик можно двумя стандартными способами.
6107.48 6116.68 "Анатолий Кулаков" Во-первых, это через фабрику, которая называется iLogger Factory, а во-вторых, это просто-напросто попросить iLogger уже готовый через конструктор.
6116.68 6121.44 "Анатолий Кулаков" Что же выбирать?
6121.44 6123.96 "Анатолий Кулаков" Выбор сделался по следующему образом.
6123.96 6143.88 "Анатолий Кулаков" Если в вашей библиотеке вы внутри используете много различных всяких сервисов, классиков, которые инстанцируете сами, то есть какими-то собственными средствами, и вам для этих классиков нужно передать их собственный конкретный iLogger, тогда, естественно, вам нужна фабрика.
6143.88 6146.68 "Анатолий Кулаков" Фабрика, которая сможет породить много логеров.
6146.68 6154.44 "Анатолий Кулаков" Для каждого класса рекомендуется использовать отдельный логер, чтобы мы четко знали, какой класс эту логовую запись записал.
6154.44 6162.56 "Анатолий Кулаков" Поэтому очень часто делают в библиотеках именно какой-нибудь билдер или метод конфигурации, который принимает фабрику.
6162.56 6175.60 "Анатолий Кулаков" Как раз для того, чтобы независимо от DI-фриворка или от чего-то еще, можно было наблодить себе внутри внутренних классиков, выдать им по отдельному логеру, и они пошли уже дальше что-то там писать.
6175.60 6194.24 "Анатолий Кулаков" Если же вдруг вы используете логер в классе самостоятельно, ни с кем его не шарите, никаким образом не планируете передавать кому-то новый экземпляр, а просто попросили для того, чтобы пописать, мне кажется, это 99% всех случаев, то в конструкторе вам нужно просить сразу iLogger и все, и не загоняться.
6194.24 6198.12 "Анатолий Кулаков" И с помощью dependency injection вам его всегда обеспечат.
6198.12 6218.88 "Анатолий Кулаков" Если же вы делаете какой-то дизайн библиотеки и ничего сами не создаете, то есть вам какой-то классик не нужен, то всегда помните, что если вы автор библиотеки, вам нужно всегда помнить, что это вы сейчас ничего не создаете и ничего вам не нужно, вам нужен всего один логер.
6218.88 6244.64 "Анатолий Кулаков" Но так как конфигурация и билдинг, и вообще entry point в вашу библиотеку - это обычно публичный API, а публичный API должен быть стабильным, и менять его крайне не рекомендуется, то там точно так же рекомендуют все-таки на будущее просить Fabric, даже если сейчас вам достаточно одного логера, но на будущее для того, чтобы развязать себе руки во внутренней имплементации, то просите всегда Fabric.
6244.64 6252.64 "Анатолий Кулаков" И если у вас будут появляться внутренние какие-то классики, вы уже будете готовы к тому, чтобы предоставить им по отдельному логеру, при этом не ломая внешний API.
6252.64 6255.92 "Анатолий Кулаков" Следующий интересный вопрос - это source-генераторы.
6255.92 6273.52 "Анатолий Кулаков" В логерах в одним из первых появились source-генераторы, то есть когда появились эти чудесные инструменты, логеры первых задоптили под себя, потому что это самая часто используемая штука, которая очевидно сильно влияет на перформанс.
6273.52 6287.92 "Анатолий Кулаков" Если там ваши запросы выполняются по 30 миллисекунд, а логер в это время идет и начинает авацировать память и тратить время на форматирование строчек и записывание куда-то, и там занимает какие-нибудь еще 100 миллисекунд, то это довольно существенная разница.
6287.92 6299.96 "Анатолий Кулаков" Поэтому еще одна интересная рекомендация - это предпочитайте использовать source-генераторы для логирования, ибо логеры поддерживают два типа API.
6299.96 6308.00 "Анатолий Кулаков" Во-первых, это наши привычные методы, которые там - logError, logInformation, которые вы можете пользоваться и скорее всего пользуетесь каждый день.
6308.00 6310.56 "Анатолий Кулаков" А во-вторых, это source-генераторы.
6310.56 6315.92 "Анатолий Кулаков" И они как раз дают больше бенефитов, чем вызовы через logError.
6315.92 6319.68 "Анатолий Кулаков" Например, они очень сильно улучшают перформанс.
6319.68 6328.88 "Анатолий Кулаков" Все, что там можно преаллоцировать, все типы, которые можно прикастить, все, что можно распарсить, делает за вас генератор в compile-time, и вам ничего не нужно делать в рантайме.
6328.88 6331.44 "Анатолий Кулаков" Также они используют строгие типы.
6331.44 6349.80 "Анатолий Кулаков" Вы никогда не ошибетесь в порядке аргументов, в том, какой метод вызвать, потому что безчувственный, бессердечный и безименованный logInformation вполне можно перебутать и не с той строчки вызвать, или вызвать местами logError и так далее.
6349.80 6360.72 "Анатолий Кулаков" А когда вы генерите, вы даете строго типизированные имена, например, logCustomerOrder, и он уже запишет только ту информацию, которая отражается в семантике, в сигнатуре метода.
6360.72 6377.72 "Анатолий Кулаков" Также вы изолируете различные специфичные для логирования параметры внутри отдельного метода, такие как MessageTemplate, вы туда и передаете ID-шники, logLevels, то есть у вас больше среди вашего бизнес-кода не фигурируют какие-то logLevels и непонятные строчки.
6377.72 6383.56 "Анатолий Кулаков" У вас фигурирует просто вызов определенного строго типизированного метода.
6383.56 6385.04 "Анатолий Кулаков" И это прекрасно.
6385.04 6388.32 "Анатолий Кулаков" Ваш код становится чище и понятнее, и читабельнее.
6388.32 6391.76 "Анатолий Кулаков" Вот такие преимущества у автоматических source-генераторов.
6391.76 6395.16 "Анатолий Кулаков" И в принципе получить их довольно легко.
6395.16 6412.12 "Анатолий Кулаков" Вам достаточно всего лишь навесить специальный атрибутик, заполнить его специальные поля, которые объясняют каким образом сгенерировать метод логирования, передать ему параметры, которые должны участвовать в логах, и в принципе там все.
6412.12 6413.76 "Анатолий Кулаков" Вся остальная магия произойдет за вами.
6413.76 6416.04 "Анатолий Кулаков" В принципе подробных статей у Microsoft миллион.
6416.04 6417.88 "Анатолий Кулаков" Следующая рекомендация.
6417.88 6428.76 "Анатолий Кулаков" Используйте специальный флаг isEnabled для того, чтобы его проверить перед логированием сложно вычисляемых параметров.
6428.76 6430.72 "Анатолий Кулаков" Бывают специальные параметры, которые...
6430.72 6433.20 "Анатолий Кулаков" Ну то есть как мы пишем логи в обычной жизни.
6433.20 6439.48 "Анатолий Кулаков" Мы просто пишем logInformation и передаем туда message template, конечно же, и передаем туда кучу каких-то аргументов.
6439.48 6442.28 "Анатолий Кулаков" Вот тебе строчка, вот тебе int, пожалуйста, залогируй.
6442.28 6446.08 "Анатолий Кулаков" Но бывают ситуации, когда ту же самую строчку вычислить довольно сложно.
6446.08 6450.28 "Анатолий Кулаков" Например, вы пытаетесь залогировать какую-то сложно вычисляемую диагностическую информацию.
6450.28 6455.08 "Анатолий Кулаков" Может быть для нее вам нужно сходить в базу данных или прочитать файл с диска.
6455.08 6470.16 "Анатолий Кулаков" И будет довольно обидно, если вы сгоняете в базу данных, сформируете там месяц, годовой отчет, всячески его там оформите, передадите его в лог, а в это время в логе данный уровень логирования выключен.
6470.16 6478.76 "Анатолий Кулаков" То есть вы логируете это как debug information или как info-информацию, но у вас включен минимальный уровень error и никакой инфы вы не увидите.
6478.76 6481.96 "Анатолий Кулаков" И всю работу, которую вы проделали, вы потратили абсолютно зря.
6481.96 6493.00 "Анатолий Кулаков" Поэтому именно в таких случаях, когда вы понимаете, что будет сделана глобальная работа для этой строчки или для этого int, рекомендуется проверять специальный флаг, который называется isEnabled.
6493.00 6497.08 "Анатолий Кулаков" И вы можете проверить, разрешен ли сейчас уровень логирования information.
6497.08 6501.40 "Анатолий Кулаков" Если он разрешен, тогда вперед, формируйте свою строчку.
6501.40 6503.08 "Анатолий Кулаков" Если не разрешен, то даже не тратьте время.
6503.08 6506.20 "Анатолий Кулаков" Скейпайте логирование вместе с созданием вот этого отчета.
6506.20 6512.24 "Анатолий Кулаков" Интересный момент в том, что автоматически вот этот генератор поддерживает данную функциональность.
6512.24 6519.92 "Анатолий Кулаков" То есть ему вы можете сказать, что "чувак, я сейчас сам уже проверил этот log level и пожалуйста, внутри не генери мне такую проверку".
6519.92 6523.36 "Анатолий Кулаков" Ну потому что любое логирование на самом деле внутри эту проверку все равно делает.
6523.36 6530.36 "Анатолий Кулаков" И вы можете избежать вот этой двойной проверки, двойного чека с помощью специального атрибута для генераторов.
6530.36 6534.68 "Анатолий Кулаков" Следующая рекомендация - избегайте интерполированных строк в логировании.
6534.68 6537.68 "Анатолий Кулаков" Это действительно безумно частая ошибка.
6537.68 6541.44 "Анатолий Кулаков" Когда вы логируете, вы туда записываете интерполированные строки.
6541.44 6543.80 "Анатолий Кулаков" Это очень плохо по разным причинам.
6543.80 6548.44 "Анатолий Кулаков" Они все мелкие в принципе, но из них собирается довольно таки весомый комок.
6548.44 6553.04 "Анатолий Кулаков" Прежде всего, 3-string interpolation - это всегда performance проблемы.
6553.04 6559.40 "Анатолий Кулаков" Потому что когда ты собираешь строку, у тебя может возникнуть та же самая ситуация.
6559.40 6561.52 "Анатолий Кулаков" Этот лог-левел мог быть выключен.
6561.52 6563.40 "Анатолий Кулаков" И ты всю эту строку мог не собирать.
6563.40 6565.72 "Анатолий Кулаков" На самом деле это вам кажется, что там строка.
6565.72 6573.24 "Анатолий Кулаков" Под капотом там специально создаются билдеры, они специальные форматоры вызывают, культура учитывается, это все там форматируется и так далее.
6573.24 6574.24 "Анатолий Кулаков" То есть это с виду все просто.
6574.24 6576.44 "Анатолий Кулаков" Под капотом там нормальная магия таки происходит.
6576.44 6581.28 "Анатолий Кулаков" Опять же, когда вы считаете миллисекунды, это может вылиться в довольно существенный performance.
6581.28 6589.12 "Анатолий Кулаков" И еще более частая проблема - это когда вы используете 3-string interpolation, вы забываете, по-моему, про message templating.
6589.12 6604.48 "Анатолий Кулаков" На самом деле принципиальная разница между структурным логированием и обычным логированием, которое у нас было во времена доструктурного логирования, принципиальная разница в том, что несмотря на то, что вы передаете и там, и там строчку, эти строчки сильно отличаются.
6604.48 6606.48 "Анатолий Кулаков" У них разные требования к этим строчкам.
6606.48 6608.92 "Анатолий Кулаков" Строчка в message templating должна меняться как можно реже.
6608.92 6611.96 "Анатолий Кулаков" То есть в строчке в message templating не должно быть переменных.
6611.96 6617.28 "Анатолий Кулаков" Вы туда забацали имена ваших полей, и все, они там в этих именах никогда не меняются.
6617.28 6625.28 "Анатолий Кулаков" Когда же вы используете 3-string interpolation, у вас очень велик соблазн вместо именов полей в эту строчку запихнуть непосредственно значение.
6625.28 6634.52 "Анатолий Кулаков" Какой-нибудь datatime now, или int, или guid, или счетчик, или еще что-то, что мгновенно убивает кардиналити вашей системы хранения логов.
6634.52 6640.44 "Анатолий Кулаков" И это самая частая проблема, которая бывает с системами, которые хранят структурное логирование.
6640.44 6644.92 "Анатолий Кулаков" Чтобы избежать такой ошибки, самая простая рекомендация - это не использовать interpolation.
6644.92 6651.64 "Анатолий Кулаков" Тогда намного сложнее такую ошибку сделать, а если вы ее сделаете, то скорее всего на код ревью это уже будет видно.
6651.64 6655.24 "Анатолий Кулаков" И соответственно, да, внимательно следите за message templating.
6655.24 6658.96 "Анатолий Кулаков" Он очень сильно концептуально отличается от message.
6658.96 6662.44 "Анатолий Кулаков" Поэтому вот это нужно обязательно отслеживать.
6662.44 6666.72 "Анатолий Кулаков" И последняя рекомендация - это используйте пустые логеры.
6666.72 6681.08 "Анатолий Кулаков" То есть когда ваше приложение требует какой-то логера или какого-то logger factory, но при этом ему этот логгер factory не передали, у вас есть два выхода.
6681.08 6689.24 "Анатолий Кулаков" Во-первых, положить null в ваш логгер, допустим, и все время проверять на null перед тем, как вы логируете.
6689.24 6692.48 "Анатолий Кулаков" Есть второй выбор, называется null object pattern.
6692.48 6698.48 "Анатолий Кулаков" То есть вы передаете туда не null, а специальный instance, который есть у класса, который называют null logger.
6698.48 6705.72 "Анатолий Кулаков" То есть вы вызываете null logger instance, и вам передается интерфейс ненулябельный, но который по факту ничего не делает.
6705.72 6712.64 "Анатолий Кулаков" То есть когда вы будете вызывать лог, он практически вам без потери перформанса вернёт управление обратно.
6712.64 6714.04 "Анатолий Кулаков" И ничего делать не будет.
6714.04 6716.96 "Анатолий Кулаков" В общем рекомендуется использовать именно такие null object.
6716.96 6719.52 "Анатолий Кулаков" Их стандартных есть три штуки.
6719.52 6724.80 "Анатолий Кулаков" Null logger instance, null logger factory instance и null logger provider instance.
6724.80 6728.24 "Анатолий Кулаков" В общем вот, их тоже рекомендуется использовать.
6728.24 6732.84 "Анатолий Кулаков" Такие довольно интересные, несложные, но в то же время неочевидные и полезные советы.
6732.84 6737.60 "Игорь Лабутин" Да, действительно, здорово, что их собрали в одном единственном месте.
6737.60 6740.24 "Игорь Лабутин" Отличная статья в правильном разделе про логирование.
6740.24 6743.88 "Игорь Лабутин" Так что все пользуйтесь, прям всё, что нужно.
6743.88 6746.08 "Игорь Лабутин" Ну что, давай последнюю темку.
6746.08 6752.12 "Игорь Лабутин" Наш стандартный, кратко о всяком разном, то, что не попало в основной список.
6752.12 6760.48 "Игорь Лабутин" Во-первых, нашёлся репозиторий, увидел в каком-то из Telegram чатчиков, где я состою, под названием Vanara.
6760.48 6778.60 "Игорь Лабутин" Если вы знаете, есть всякие разные репозитории, типа там CS, по-моему, Win32 называется, где собраны всяческие разные paintwalk, даже не библиотеки, не профи, как же это, ну это, короче, кусочки кода с paintwalk'ом.
6778.60 6779.60 "Игорь Лабутин" Сигнатуры.
6779.60 6784.24 "Игорь Лабутин" Сигнатуры, да, для уже готовой, прям написанной paintwalk'и для вызова стандартных винтовых функций.
6784.24 6797.76 "Игорь Лабутин" Здесь это ещё один, причём он, как мне кажется, интересен тем, что там, ну так, на первый взгляд, довольно много всяких, ну, давай так, резко встречающихся в нем в основных местах Delelic.
6797.76 6801.88 "Игорь Лабутин" То есть, понятно, что если вам нужен там Chiron32, он, скорее всего, есть почти везде.
6801.88 6802.88 "Игорь Лабутин" Вот.
6802.88 6807.12 "Игорь Лабутин" А вот если вам нужно что-то более экзотическое, гляньте, может быть, тоже сюда, может, что-то интересное будет.
6807.12 6808.12 None Дальше.
6808.12 6809.12 "Игорь Лабутин" Nougat67 версия.
6809.12 6818.88 "Игорь Лабутин" Это прям интересная штука, потому что они продолжают дальше закручивать гайки вокруг security.
6818.88 6824.60 "Игорь Лабутин" Мы уже рассказывали про package source mapping, когда вы говорите, какие пакеты из какого сервера можно качать и так далее.
6824.60 6826.60 "Игорь Лабутин" Теперь это всё доползло до Visual Studio.
6826.60 6831.92 "Игорь Лабутин" Называется это Nougat67, но, тем не менее, упоминается Visual Studio.
6831.92 6842.04 "Игорь Лабутин" Во-первых, package manager Visual Studio теперь поддерживает показ package source mapping'ов, он показывает вам статус, включён, выключен, и если надо, его можно сконфигурить.
6842.04 6850.32 "Игорь Лабутин" Причём прямо через Visual Studio, там теперь есть отдельная диалога, что какие-то пакеты брать оттуда, и это всё аккуратно сложится в ваш Nougat конфиг локальный.
6850.32 6875.64 "Игорь Лабутин" В Nougat теперь есть API у сервера, собственно, чтобы показывать vulnerability info, то есть для каждого пакета теперь собирается информация про то, насколько там много уязвимостей, в том числе с учётом зависимости, и можно теперь её получить через API, и при этом package manager теперь тоже показывает, какие пакеты уязвимы, какие версии пакетов уязвимы.
6875.64 6881.60 "Игорь Лабутин" Можно прямо в списке версий выбирать неуязвимые, ну или те, в которых ничего не нашли пока ещё.
6881.60 6884.72 "Игорь Лабутин" Это, собственно, всё, что касается Nougat.
6884.72 6898.24 "Игорь Лабутин" Дальше попалась интересная статья, она не сколько интересна какими-то там супертехническими подробностями, сколько просто хороший how-to, если вам нужно собирать memory дампы для дотнетных приложений на кубере.
6898.24 6907.00 "Игорь Лабутин" Там прямо в конце выдаётся готовый криптик, который сходит за вас на под, там всё правильно запустит, сдампит, берёт обратно.
6907.00 6914.92 "Игорь Лабутин" Короче, готовый скрипт, укажите имя пода, укажите, по-моему, название процесса, и вам всё остальное будет работать само.
6914.92 6918.32 "Игорь Лабутин" И последний, это репозиторий на гитхабе.
6918.32 6925.24 "Игорь Лабутин" По-моему, мы к нему уже когда-то обращались в районе, по-моему, семёрки, а может, даже шестёрки.
6925.24 6935.64 "Игорь Лабутин" Вот репозиторий не умер, называется он Practical ASP.NET Core, и он содержит в себе просто большое количество различных примеров того, как нужно что писать на ASP.NET.
6935.64 6940.60 "Игорь Лабутин" Там хотите раутинг, пожалуйста, хотите идентификацию, пожалуйста, хотите middleware, пожалуйста.
6940.60 6959.24 "Игорь Лабутин" На данный момент нам 494 примера, ну, в общем, и постоянно обновляется, так что такой интересный сборник простых рецептов, подсмотреть, как что делать, если вдруг лень гуглить и так далее, вот можно сюда сходить и положить в закладочки, и там всё увидеть.
6959.24 6966.44 "Анатолий Кулаков" Ну и почти 8 тысяч лайков, звёздочек, что для обычного репозитория с самплами довольно много.
6966.44 6968.68 "Анатолий Кулаков" Да, это прям… Чем, интересно, он так популярен?
6968.68 6970.32 "Игорь Лабутин" Не обратил внимания, но действительно прикольно.
6970.32 6973.88 "Анатолий Кулаков" Странно-странно, ну да, надо полазить.
6973.88 6987.60 "Игорь Лабутин" Ну я так потыкался туда-сюда, действительно просто как интересно, ну вот по принципу типа слушать чё-то, я забыл как там писать какой-нибудь хитро вывернутый, не знаю, iOptions что-нибудь, да, вот там с автообновлением, что-нибудь такое.
6987.60 6988.60 "Игорь Лабутин" Ну, можно найти.
6988.60 6993.24 "Игорь Лабутин" Оно там сгруппировано по темам, по каким-то разделам.
6993.24 6997.80 "Игорь Лабутин" Не знаю, зачем группировка по версиям, то есть там есть отдельные примеры для шестёрки, семёрки, восьмёрки.
6997.80 7009.52 "Игорь Лабутин" Понятно, что есть какие-то штуки, которые добавились там, какие-то там source-генераторы для minimal API, которые есть только в восьмёрке, но с другой стороны, если вы всё ещё живёте на шестом LTS, то вам примеры из восьмёрки может быть нерелевантны.
7009.52 7013.36 "Игорь Лабутин" Ну, как-то так, на этом у нас вроде всё.
7013.36 7019.40 "Анатолий Кулаков" Ну, отлично, хорошо посидели, и Microsoft затронули, и хайповые темы, и даже немножко что-то полезного сделали.
7019.40 7022.12 "Анатолий Кулаков" Больше, наверное, не успеем, пока на сегодня хватит.
7022.12 7042.32 "Игорь Лабутин" Да, мы сегодня посмотрели на DotNet 8 Preview 7, подробно разобрали, что там добавили, и в самом DotNet, в SPNet подробно обсудили две статьи, которые успели выйти по совсем уж деталям внутренности, про Hosted Lifecycle Service и про кит Stability Injection.
7042.32 7068.36 "Игорь Лабутин" Посмотрели на Visual Studio 2022, 17.7 Release и 17.8 Preview 1, обсудили, что произошло с MockU и Open Source в DotNet, поговорили, что кого бесит либо раздражает в DotNet, узнали новые, ну как новые, они не новые, просто хорошо систематизированные логин гайды от Microsoft, ну и всякие разные мелкие темы тоже обсудили.
7068.36 7070.72 "Анатолий Кулаков" Отлично, тогда на этом давай прощаться.
7070.72 7082.16 "Анатолий Кулаков" Друзья, комменты, посты, лайки, репосты, где вы там нас слушаете, везде ставьте звездочки и продвигайте наш подкаст среди таких же прекрасных слушателей, как и вы.
7082.16 7084.84 "Анатолий Кулаков" Будем делиться умными, интересными вещами на DotNet.
7084.84 7087.44 "Анатолий Кулаков" Всем счастливо, до новых встреч, пока.
