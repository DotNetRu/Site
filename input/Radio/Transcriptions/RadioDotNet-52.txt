0.00 12.32 "Анатолий Кулаков" Здравствуйте, дорогие друзья, в эфире Радио.нет и его постоянный ведущий Анатолий Кулаков.
12.32 14.84 "Игорь Лабутин" И Игорь Лобутин, привет.
14.84 30.56 "Анатолий Кулаков" Сегодня у нас уже 52 выпуск и большое спасибо, что мы дотянули до этого выпуска и особая благодарность нашим постоянным и прекрасным спонсорам, среди которых Александр, Сергей, Владислав, Алексей, Шевченко, Антон, Илья и Гурий Самарин.
30.56 34.20 "Анатолий Кулаков" Большое спасибо, что нас поддерживаете.
34.20 50.52 "Анатолий Кулаков" Из технических новостей я напоминаю, что у нас впереди ждет ДотНекст, два дня онлайн, один день офлайн, крутейшие спикеры, прекрасные темы, обалденные круглые столы, а самое главное - офлайновые обнимашки.
50.52 75.88 "Анатолий Кулаков" И все это вас ждет уже меньше, чем через месяц, поэтому если вы вдруг еще не купили билет или планируете, раздумываете ехать или не ехать, то надеюсь наш промокод со скидкой на персональный билет вам поможет решиться и соответственно увидимся там, потому что мы с Игорем тоже там собираемся быть и как я уже обещал в прошлом выпуске, сделаем для вас кучу наклейчиков и всем фанатам радио обязательно
75.88 81.92 "Игорь Лабутин" раздадим. Да, приходите на ДотНекст, мы вас ждем, будем рады встречи с вами, но кроме ДотНекст у нас есть еще
81.92 88.24 "Анатолий Кулаков" один блог, Толя. Представляем вам мир крутых IT решений.
88.24 92.96 "Анатолий Кулаков" Когда начинаешь думать о завтрашнем дне, приходит понимание своей индивидуальности.
92.96 98.76 "Анатолий Кулаков" Приходит время новых требований, мыслить масштабно, знать больше и видеть дальше, заявя о себе.
98.76 104.56 "Анатолий Кулаков" Компания Monopoly предлагает тебе создать вместе платформу цифровой логистики на пике технологий.
104.56 109.04 "Анатолий Кулаков" IT ландшафт компании разделен на продукты, востребованные клиентами и партнерами.
109.04 116.00 "Анатолий Кулаков" Продукты, которые разрабатываются в современной agile модели, опираясь на микросервисный подход с использованием актуального стека.
116.00 122.32 "Анатолий Кулаков" Если .NET, то Core, если интеграция, то на брокерах сообщений, если диплой, то в Kubernetes.
122.32 132.16 "Анатолий Кулаков" Это продукты для облегченно востребованной отрасли транспортной логистики, собственных машин компаний и машин-партнеров, которые предоставляют грузы по всей стране.
132.16 140.32 "Анатолий Кулаков" Уберизация грузовых перевозок - это направление актуальное и востребованное, что позволяет устойчиво держаться на рынке.
140.32 148.08 "Анатолий Кулаков" Внеси свой вклад в развитие цифровой логистики и по ссылке в описании можно ознакомиться с более подробной информацией о ближайшем ярком будущем.
148.08 155.52 "Игорь Лабутин" Ну а мы перейдем к нашему основному выпуску и начнем мы с конференций, как ни странно.
155.52 161.76 "Игорь Лабутин" Давно у нас не было никаких конференций, но потихонечку все возвращается и прошел Microsoft Build.
161.76 165.16 "Игорь Лабутин" Он, кстати, офлайн прошел или в онлайне?
165.16 168.60 "Игорь Лабутин" Насколько я понимаю онлайн, вроде как.
168.60 169.60 "Игорь Лабутин" Слабаки.
169.60 176.16 "Игорь Лабутин" Ну, там, трансляция из студии и все дела, но по-моему, они не собирали никакого большого ивента, я, по крайней мере, про это не слышал.
176.16 179.28 "Анатолий Кулаков" Ну, обычно там же у них раньше залы были какие-то, там,
179.28 184.24 "Игорь Лабутин" стадионы и все такое. Ну вот, сейчас всем это, презентажки рассказали онлайны и достаточно.
184.24 185.24 "Игорь Лабутин" Побежали работать дальше.
185.24 189.32 "Анатолий Кулаков" Ну, хорошо, давай посмотрим, что там интересного для дотнет разработчиков.
189.32 193.96 "Игорь Лабутин" Значит, для дотнет разработчиков там не так много интересного.
193.96 199.20 "Игорь Лабутин" Основное, что там презентовалось, это, конечно же, ажур.
199.20 207.04 "Игорь Лабутин" Microsoft ставит на него довольно, так сказать, большую часть всех своих ресурсов и рекламы и всего остального.
207.04 213.08 "Игорь Лабутин" То есть, ну и ажур, вроде как, приносит им довольно много денег, поэтому понятно, что ажур будет в тренде.
213.08 216.52 "Игорь Лабутин" И большая часть конференции, конечно, посвящена всему тому, что там нового.
216.52 221.40 "Игорь Лабутин" Поэтому, если вы вдруг используете ажур, посмотрите, там действительно много чего интересненького.
221.40 230.80 "Игорь Лабутин" В частности, например, они завезли, ну, мне показалось интересным, теперь там есть Nginx в качестве SaaS, то есть Software as a Service.
230.80 235.76 "Игорь Лабутин" То есть, можно прям парой кликов настроить себе Managed Nginx.
235.76 239.76 "Игорь Лабутин" Никогда не думал, что у меня будет Managed Nginx, но вот, в принципе, теперь можно сделать.
239.76 252.08 "Анатолий Кулаков" Ну, или может удобно тем, кто переезжает, потому что обычно на локальных всяких серверах Nginx - это первое решение, и переноситься в облако, не меняя любимого стэка, к которому уже все привыкли, наверное, удобно будет.
252.08 260.60 "Игорь Лабутин" Ну да, если вы все остальное держите в Managed варианте, то вроде как запускать там отдельный, не знаю, докер с Nginx или еще как-то будет странно.
260.60 269.64 "Игорь Лабутин" Кроме того, из того, что интересно будет девелоперам, Microsoft анонсировала штуку под названием Arm Developer Desktop.
269.64 278.56 "Игорь Лабутин" То есть, это железячка на каком-то арме, пока не известно на каком, которая будет, ну, такая стандартизированная Arm железка, под которую можно что-то разрабатывать.
278.56 284.80 "Игорь Лабутин" Вот, и, естественно, если под нее можно и нужно что-то разрабатывать, то нам нужны девелопер-тулы под нее.
284.80 296.04 "Игорь Лабутин" И, соответственно, Microsoft обещала сделать Visual Studio for Arm нативную, ну, а также VS Code, Visual C++, и понятно, что все вокруг причитающиеся тулы должны заработать на Арме.
296.04 301.48 "Анатолий Кулаков" Интересно, какую она версию возьмет, большую или все-таки та, которая маковская?
301.48 309.76 "Игорь Лабутин" Непонятно пока, потому что, в принципе, маковская она сейчас нативно работает на DotNet 6, и, ну, с этой точки зрения вроде как логично брать на маковскую.
309.76 311.52 "Игорь Лабутин" Но пока непонятно.
311.52 313.28 "Игорь Лабутин" Ну, скорее всего, да.
313.28 324.52 "Игорь Лабутин" Вот, при этом Visual Studio for Arm это второй по популярности, так сказать, фидбэк на сайте, где голосуют за фичи пользователей.
324.52 332.68 "Игорь Лабутин" Самое первое, это, конечно, сделать Visual Studio for Linux, но такой пока нету, поэтому вот решили взять второй пунктик и сделать для Арма.
332.68 341.92 "Игорь Лабутин" Ждем, анонс обещали в течение нескольких недель, поэтому, ну, я думаю, что до конца лета уж точно мы что-то про это узнаем, какие-нибудь превьюшки, может быть, выйдут.
341.92 349.60 "Анатолий Кулаков" А вот здесь вот непонятно, если у нас Visual Studio for Mac на DotNet 6, то какие проблемы перенести ее на Linux или вообще на Arm?
349.60 352.92 "Анатолий Кулаков" Она должна как в DotNet 6 записаться просто везде, включая
352.92 362.28 "Игорь Лабутин" Windows. Вот, непонятно, потому что там есть такая штука, как Visual Studio for Mac, только недавно перевели на максимально нативный маковский UI.
362.28 372.28 "Игорь Лабутин" Понятно, что там под капотом крутятся всякие Xamarin.Forms, MAUI и вот это все, но под Linux-ом-то нет, так скажем, нативного Linux-UI.
372.28 382.40 "Игорь Лабутин" Там, как обычно, зоопарк, как я понимаю, всяких разных вариаций, и, возможно, именно это и является какой-то, ну, не знаю, проблемой и причиной того, почему этого не делают.
382.40 390.20 "Анатолий Кулаков" Ну, наверное, там должно быть можно пропатчить ядро, там, призвать энтузиастов из пятого круга загрузки демонов, и это все должно взлететь.
390.20 397.32 "Игорь Лабутин" Да, и пользоваться Visual Studio из ком-онлайна, как положено, в принципе, там, из текстового редактора, из Emacs или VMA какого-нибудь.
397.32 401.80 "Анатолий Кулаков" Ну, ладно, позовем какого-нибудь Linux-уэда, который нам объяснит эту проблему.
401.80 402.80 "Игорь Лабутин" Да.
402.80 403.80 "Игорь Лабутин" Давай дальше.
403.80 410.20 "Игорь Лабутин" В принципе, из того, что касается напрямую девелопмента или девелопмента для дотлента, в принципе, больше ничего не было.
410.20 414.40 "Игорь Лабутин" Было еще объявлено про MAUI, у нас есть про это отдельная статья, мы чуть позже это затронем.
414.40 424.88 "Игорь Лабутин" Все остальные новости, они про Azure, разработку под Office, то есть они все каким-то образом к разработке относятся, но они больше именно такие прикладные.
424.88 447.60 "Игорь Лабутин" Если вам что-то очень сильно интересно, в описании будет ссылочка на так называемый Microsoft Build Book of News, то есть это полная коллекция всех анонсов в кратеньком текстовом виде, буквально по 2-3 абзаца на каждый анонс, где раскрывается суть анонса, ну и с линком на более подробную либо статью, либо презентацию, либо видео, либо еще что-нибудь.
447.60 451.80 "Игорь Лабутин" Поэтому посмотрите, проскрольте, хотя бы оглавление, может быть что-то зацепится.
451.80 459.56 "Анатолий Кулаков" Ну да, билд он в последние годы обычно для разработчика довольно слабенький, то есть действительно всякие ажуры и прочие маркетинговые презентации.
459.56 465.92 "Анатолий Кулаков" Для нас в основном хорошие конференции получаются на релиз .NET, вот там очень много всего интересного рассказывают.
465.92 469.64 "Анатолий Кулаков" Ну ладно, почему бы и нет, пусть ажура тоже будет.
469.64 478.04 "Анатолий Кулаков" Кто нас никогда не подводит с хорошими статьями, это Стивен Тауп, и он выпустил просто разгромную простыню про регулярные выражения.
478.04 479.04 "Анатолий Кулаков" Осилил ее?
479.04 481.32 "Игорь Лабутин" Да, я ее осилил.
481.32 493.00 "Игорь Лабутин" Там действительно все очень детально, очень подробно с огромным количеством примеров, и рассказывать это все в аудио формате будет, ну, наверное, довольно сложно.
493.00 500.84 "Игорь Лабутин" Поэтому я постараюсь осветить те кусочки, которые прям вот полезны и легко понимаемы на слух.
500.84 512.00 "Игорь Лабутин" А если вам интересны детали того, что же там сделано с перформансом, или не будет понятно какие-то мои рассуждения, то смотрите в статью, там все очень подробно и разжеванно прямо до малейших деталей.
512.00 521.52 "Игорь Лабутин" Итак, во-первых, конечно же, если это статья от Стивена Тауба, то это значит, что там будет огромное количество описания того, как улучшили перформанс.
521.52 526.04 "Игорь Лабутин" Тауп всегда пишет про перформанс-импрувмент, это здорово и это классно.
526.04 534.76 "Игорь Лабутин" Но помимо этого, в седьмом дотнете завезли не только перформанс-импрувменты, но и новые фичи в RegExp.
534.76 547.60 "Игорь Лабутин" Вы можете спросить, что за новые фичи, потому что, ну как бы, RegExp, они вроде как вот работают и работают, они в принципе полны, и я не слышал чего-нибудь такого, чтобы в дотнете бы не работало, например.
547.60 552.00 "Анатолий Кулаков" Ты знаешь, как… Я бы даже сказал, с самой первой версии, как только они появились, по-моему, у них было уже все.
552.00 563.28 "Игорь Лабутин" Да, действительно, у них было все, однако, однако выяснилось, что есть все, в смысле, что RegExp в дотнете умеют все, но они умеют все не всегда оптимально.
563.28 565.08 "Игорь Лабутин" И вот как раз над этим они работали.
565.08 571.40 "Игорь Лабутин" Во-первых, надо в RegExp вспомнить такое важное понятие, которое называется «бэктрекинг» по-английски.
571.40 577.92 "Игорь Лабутин" То есть, по-русски, что там, «возврат назад», я не знаю, на русский обычно переводят «бэктрекинг» и «бэктрекинг».
577.92 580.92 "Анатолий Кулаков" По-моему, «заглядывание назад» или что-то такое.
580.92 581.92 "Анатолий Кулаков" Заглядывание назад.
581.92 584.16 "Анатолий Кулаков" Если в терминах регулярных выражений именно брать.
584.16 587.08 "Игорь Лабутин" Ну, допустим, пусть будет так.
587.08 595.32 "Игорь Лабутин" Так вот, штука эта очень мощная и позволяет действительно собственно работать регулярным выражением и мачить все, что вы хотите замачивать.
595.32 609.00 "Игорь Лабутин" Но, к сожалению, в худшем случае сложность мачинга такого выражения растет экспоненциально от длины входной строчки.
609.00 623.24 "Игорь Лабутин" И понятно, что, наверное, в большинстве случаев у вас не будет строчек, которые прям такие плохие, что у вас будет экспонента, но пользовательский ввод он такой странный иногда, и поэтому может такое и случиться.
623.24 627.84 "Игорь Лабутин" Поэтому есть не только штука с «бэктрекингом».
627.84 642.44 "Игорь Лабутин" То есть это «бэктрекинг» — это, по сути, engine, который позволяет как-то нормально работать и исполнять в некотором смысле ваша regexp, проверять, соответствует ли входная строка заданному regexp.
642.44 646.48 "Игорь Лабутин" Кроме того, есть так называемые недетерминированные конечные автоматы.
646.48 651.04 "Игорь Лабутин" И есть в довесок к ним, конечно же, детерминированные конечные автоматы.
651.04 657.52 "Игорь Лабутин" Они, оба этих класса, engine для regexp, они работают чуть-чуть по-другому.
657.52 669.28 "Игорь Лабутин" Они не обладают всей полнотой фич, которые позволяют делать бэктрекинг, но зато они лучше немножко стараются, по крайней мере, оптимизировать для того, чтобы худшее время исполнения было более предсказуемым.
669.28 688.00 "Игорь Лабутин" То есть не пытаться надеяться, что в среднем будет всё хорошо, а пытаться писать код так, точнее, исполнять regexp таким образом, чтобы всё-таки даже в хорошем случае было не очень плохо, а в плохом случае тоже не очень плохо.
688.00 692.32 "Игорь Лабутин" В .NET всегда использовался бэктрекинг.
692.32 704.80 "Игорь Лабутин" Теперь в .NET 7 появилась новая опция в regexp options, когда вы создаете класс regexp, можно передать regexp options в точку non-backtracking, и тогда будет работать новый алгоритм, который мы только-только сейчас завезли в .NET.
704.80 706.68 "Игорь Лабутин" Алгоритм, кстати, делается не из воздуха.
706.68 716.36 "Игорь Лабутин" Эта штука называется Symbolic Regexp Matcher, и это работа подразделения Microsoft Research, то есть они над ним долго работали, как-то оптимизировали, и теперь уже затащили в основной .NET.
716.36 718.04 "Игорь Лабутин" Работает он интересно.
718.04 724.28 "Игорь Лабутин" Он начинает с того, что он пытается построить детерминированный конечный автомат, в котором...
724.28 731.20 "Игорь Лабутин" В смысле детерминированного конечного автомата, что, глядя на следующий символ в regexp, вы точно знаете, в какую ноду вы пойдёте.
731.20 735.44 "Игорь Лабутин" То есть там нет никаких вариаций, не нужно никогда возвращаться назад по дереву и так далее.
735.44 737.52 "Игорь Лабутин" Это прямой, как пробка.
737.52 748.80 "Игорь Лабутин" Но он не всегда хорошо работает, потому что для того, чтобы построить вот это дерево детерминированное, иногда приходится делать огромное количество вершин в таком графе.
748.80 749.80 "Игорь Лабутин" Даже не дерево, это граф.
749.80 752.68 "Игорь Лабутин" И поэтому алгоритм работает...
752.68 770.24 "Игорь Лабутин" Он хитрый, он, если строя детерминированный конечный автомат, он понимает, что что-то очень много вершин получается, он переключается на построение недетерминированного автомата, который, соответственно, содержит меньше вершин по сути своей работы и позволяет всё-таки всё это уместить нормально в память.
770.24 774.04 "Игорь Лабутин" Ценой, возможно, немножко возросшее время неисполнение.
774.04 780.44 "Игорь Лабутин" Не буду погружаться в детали и отличия, это надо смотреть на картинках, надо понимать, где какие ограничения есть, как оно всё работает.
780.44 787.80 "Игорь Лабутин" Но в целом у non-backtracking вот этих вот энжинов, у обоих вариантов, есть довольно существенные ограничения.
787.80 791.12 "Игорь Лабутин" То есть эти штуки не поддерживают atomic группы, так называемые.
791.12 798.32 "Игорь Лабутин" Они очевидным образом не поддерживают backreferences, то есть вы не можете сделать regresp, где вы, допустим, дубликаты ищете.
798.32 802.28 "Игорь Лабутин" Так не получится сослаться на предыдущую группу, так нельзя.
802.28 812.04 "Игорь Лабутин" Вы не можете делать balancing groups, вы не можете делать никаких условных групп, всяких штук под названием lookaround, если вы когда-то этим пользовались в регреспах.
812.04 816.40 "Игорь Лабутин" Ну и ещё некоторое количество фич, которые детально перечислены в статье.
816.40 836.16 "Игорь Лабутин" И как ни странно, несмотря на то, что я сказал, что эти алгоритмы пытаются быть, даже в худшем случае, довольно предсказуемыми по времени, всё-таки и их можно сделать таким образом, точнее им можно подсунуть такую строку, что они будут работать медленнее, чем backtracking-версия.
836.16 845.28 "Игорь Лабутин" То есть в различных сценариях, в различных случаях, в зависимости от regespa, может быть backtracking быстрее, может быть non-backtracking быстрее.
845.28 850.88 "Игорь Лабутин" Надо мерить, надо смотреть, надо понимать, какой input скорее всего будет у вас на входе к вашему regespa.
850.88 855.28 "Игорь Лабутин" Ну и смотреть, что получается по измерениям.
855.28 858.16 "Игорь Лабутин" Так что это новый большой кусочек алгоритма.
858.16 862.20 "Игорь Лабутин" Смотрите, возможно, вам поможет это для оптимизации ваших regespa.
862.20 863.20 "Игорь Лабутин" Дальше.
863.20 866.12 "Игорь Лабутин" Дальше чисто косметическое изменение.
866.12 867.72 "Игорь Лабутин" У нас появился новый атрибут.
867.72 871.00 "Игорь Лабутин" Называется string syntax attribute, который вы можете навесить
871.00 886.00 None на какой-нибудь параметр в методе. У этого атрибута есть набор статических проперций, которые можно указать в конструкторе этого атрибута и сказать, что это такое вообще за атрибут.
886.00 888.08 "Игорь Лабутин" У него есть три сейчас вариации.
888.08 892.56 "Игорь Лабутин" Это, соответственно, date/time формат, это JSON и regex.
892.56 894.28 "Игорь Лабутин" Атрибут делает простую штуку.
894.28 908.08 "Игорь Лабутин" Если параметр помечен таким атрибутом, и, например, у него стоит, что это string syntax.regex, то в этом случае параметр считается regex-ом, и студия вам при редактировании этого параметра будет подсказывать, что там есть regex.
908.08 919.76 "Игорь Лабутин" То есть если вы редактировали когда-нибудь конструктор regex, она там умеет подсказывать, что вот это будет класс пробеелов, это класс символов, в таком духе, какую-то валидацию regex делать и подсказки.
919.76 923.44 "Игорь Лабутин" Так теперь можно сделать для любого метода.
923.44 925.40 "Игорь Лабутин" Раньше этот список, кстати, был за хардкорен.
925.40 928.44 "Игорь Лабутин" Просто вижу у студии, какие методы принимают regex.
928.44 929.60 "Игорь Лабутин" Их было очень мало.
929.60 932.48 "Игорь Лабутин" Ну и, соответственно, такая же штука с date/time форматом.
932.48 936.20 "Игорь Лабутин" Он там начинает подсказывать вариации этих символов для date/time формата.
936.20 944.72 "Игорь Лабутин" И JSON-чик, если укажете, то оно будет проверять, что то, что передали, является валидным JSON-ом с точки зрения балансировки скобок и так далее.
944.72 948.52 "Игорь Лабутин" Такая небольшая полезняшка.
948.52 951.00 "Игорь Лабутин" Дальше еще одно функциональное изменение.
951.00 957.56 "Игорь Лабутин" Оно, в принципе, работало и раньше, но, тем не менее, сейчас поведение в синем дотнете тоже немножко изменилось.
957.56 963.28 "Игорь Лабутин" Это так называемое сопоставление без учета регистра, то есть case-insensitive matching.
963.28 967.96 "Игорь Лабутин" Оно было реализовано, конечно же, и раньше, но работало оно довольно забавным образом.
967.96 980.48 "Игорь Лабутин" Если вы задавали опцию, что regex нужно матчить без учета регистра, то конструктор regex-а прогонял, соответственно, все литеральные символы этого regex-а через функцию to_lower.
980.48 986.44 "Игорь Лабутин" А потом, когда непосредственно происходил матчинг, все входные символы тоже прогонялись через to_lower.
986.44 990.04 "Игорь Лабутин" И это работает, очевидно.
990.04 992.64 "Игорь Лабутин" Но возникают некоторые проблемы.
992.64 994.36 "Игорь Лабутин" На некоторых странных локалях.
994.36 1002.60 "Игорь Лабутин" А кроме того, это все-таки to_lower функция быстрая, но бывает, что все-таки требует какого-то времени для работы, и поэтому по перформансу не очень оптимально.
1002.60 1016.92 "Игорь Лабутин" А самое главное, поскольку на каждый входной символ по сути нужно вызвать to_lower, то есть отдельную функцию, то исчезает возможность сделать клевые большие оптимизации, викторизации, еще на чем-то.
1016.92 1020.36 "Игорь Лабутин" Потому что нужно все-таки каждый символ обрабатывать отдельно.
1020.36 1023.28 "Игорь Лабутин" В седьмом дотнете сделали теперь по-другому.
1023.28 1039.92 "Игорь Лабутин" Теперь если в момент создания регекса задана опция, что она будет case-sensitive, то тогда строчка, например, если вы зададите строчку "a, b" маленькими буквами, то эта строчка в итоговом регексе, который будет исполняться, будет заменена на строчку из двух групп символов.
1039.92 1041.52 "Игорь Лабутин" А большое "a" маленькое, а побольшое "b" маленькое.
1041.52 1045.56 "Игорь Лабутин" Ну, где разрешен только один из символов в каждой группе.
1045.56 1062.12 "Игорь Лабутин" Казалось бы, выражение распухает, то есть вариант как бы вроде больше, но фактически такой метод модификации позволяет использовать больше всяких оптимизаций про викторизацию и прочие фишечки внутренних оптимизаций регексов.
1062.12 1064.40 "Игорь Лабутин" Вот про это я сильно углубляться не буду.
1064.40 1068.04 "Игорь Лабутин" Смотрите детально статью, там все детально описано.
1068.04 1070.08 "Игорь Лабутин" Ну, собственно, что про performance.
1070.08 1077.52 "Игорь Лабутин" Про performance добавили поддержку спанов, добавили викторизацию ту самую, добавили генерацию сорсов.
1077.52 1094.16 "Игорь Лабутин" То есть раньше регекс-генератор, если вы указывали ему опцию compile, он генерил ill-код на лету, и была опция на самом деле сгенерить этот ill-код заранее в сборку, ну примерно так же как с сериализацией, да, можно сделать сборку с сериализатором отдельно, и его будет искать runtime.
1094.16 1098.76 "Игорь Лабутин" Также можно было сделать с регексом, чтобы не тратить время в момент создания регекса.
1098.76 1112.56 "Игорь Лабутин" Теперь это все делается в генераторе, и более того, в генераторе генериться адекватный нормальный читабельный код, который вполне можно поотлаживать даже, если вам что-то непонятно, почему не работает ваш регекс.
1112.56 1141.88 "Игорь Лабутин" Кроме того, Стивен пишет, что отдельная прикольная штука, что комменты к коду, который генерируется, они на самом деле очень прикольные, в том смысле, что они описывают внутреннюю логику работы регекс-парсера, потом даже регекс-энжина самого, и там довольно прикольно смотреть по комментам, то есть наведя вот мышку просто на метод match, вы увидите ваш регекс расписанный немножко в терминах того, как он будет исполняться на самом деле.
1141.88 1144.28 "Игорь Лабутин" Вот тоже очень прикольно.
1144.28 1172.88 "Анатолий Кулаков" Ну вообще отладка регулярных выражений, по-моему, богатая тема, то есть действительно, мне кажется, люди, которые первый раз с ними сталкиваются, у них могут возникнуть ряд вопросов о том, как это работает, и что там эти цифры означают, что как эти буковки переплетаются, и вот зайти внутрь, посмотреть, а вообще продебажиться по всем этим веточкам, мне кажется, это дорогого стоит, очень-очень клевая штука, особенно когда на ранних стадиях, когда ты только учишь регулярные выражения и делаешь первые шаги, полезная штука.
1172.88 1216.60 "Игорь Лабутин" Мне все-таки кажется, что когда ты только учишь, то лучше все-таки какой-нибудь визуальный, ну там, в том же райдере или есть всякие сайты типа RegEx101, да и в студии, по-моему, когда-то, не знаю, экстенджер наверно какие-нибудь есть, который позволяет вам там ввести регулярное выражение, ввести строчку, с которой вы пытаетесь ее заматчить, и он там цветом все расцветит, что где, к чему соответствует и так далее, мне кажется, это более интересно и полезно для совсем начинающих, а вот если вы видите, что у вас там что-то работает не так в вашем коде, то есть RegEx правильно, им партится правильно, но, например, работает долго или еще что-то, то отладчик или там даже не отладчик, а какой-нибудь профайлер поможет посмотреть, где, например, у вас что-то тормозит.
1216.60 1222.92 "Анатолий Кулаков" Правда, теперь же профайлеры тоже по сути, получается, могут смотреть внутри RegEx по?
1222.92 1236.48 "Игорь Лабутин" Ну они и раньше могли смотреть, просто раньше у тебя был только или код к ним, к исходнику, а теперь есть нормальный исходник и можно понять, что вот тут мы в каком-нибудь цикле, не знаю, или вот в этот свитч мы заходим очень много раз, давайте подумаем, как переписать RegEx.
1236.48 1240.60 "Анатолий Кулаков" Ну да, да, да, теперь это и какой-то смысл хотя бы имеет.
1240.60 1249.76 "Игорь Лабутин" Ну вот примерно так про RegEx и давай немножко вернемся к MS Build, где было объявлено про MAUI.
1249.76 1257.32 "Анатолий Кулаков" Да не просто объявлено, а анонсировано, зарелизено, запаблишено, general availability, так сказать.
1257.32 1266.56 "Анатолий Кулаков" В общем, то, о чем долго говорили большевики, уже наконец-то свершилось, наконец-то зарелизился на Build.net MAUI.
1266.56 1288.28 "Анатолий Кулаков" Это кроссплатформенный фреймворк, который дает нам UI для дотнет-разработчика, которая работает практически везде, должна работать и мега стабильно, и мега быстро и самое главное, это поддерживаемый Microsoft, потому что этот пункт нравится нашим разработчикам, менеджерам и продактовнеров больше всего.
1288.28 1304.80 "Анатолий Кулаков" Я думаю, все, кто следит за нашим подкастом регулярно, они в курсе, что это такое, какие там фичи, что поддерживается и так далее, но во время релиза всегда не грешно подвести какой-то краткий summary, особенно людям, которые может быть не слышали про такую замечательную технологию, узнать вообще, что это.
1304.80 1333.56 "Анатолий Кулаков" Как я уже сказал, это кроссплатформенный UI фреймворк, который прямо на анонсе сказал нам, что он поддерживает официально Android, iOS, macOS, Windows, Android Wear, это для часов, по-моему, AirPlay, это для машинок, по-моему, tvOS, Tizen от Samsung и куча еще всякой мелочи, но вот такие основные операционные системы, основные платформы, вот уже как бы внушают доверие.
1333.56 1351.24 "Анатолий Кулаков" Он нацелен как на десктоп, так и на мобилки, вы можете писать все в одном салюшене, в одном проекте и его основная гордость в том, что код теперь можно расшарить между всеми этими платформами настолько много, что вам прямо даже и не снилось.
1351.24 1384.96 "Анатолий Кулаков" Из еще прекрасных новостей, что этот релиз уже поддержали куча производителей компонентов, те, кто пишет UI, те знают, что самые лучшие, самые красивые, прекрасные компоненты, они обычно платные и сторонние, и здесь вписались наши знаменитости DevExpress, Syncfusion, Telerik, в общем, все те ребята, которые поддерживали всегда UI.net на других платформах, они здесь тоже предоставили свои компоненты и уже готовы продавать вам за большие деньги хорошие качественные вещи, за что им тоже отдельное спасибо.
1384.96 1413.80 "Анатолий Кулаков" Я напомню, что эта UI представлена в виде враппера над нативными компонентами операционной системы, то есть она не сама рисует эти кнопочки, эти коксики, она всего лишь нам все предоставляет легковесные байдинги, которые поднимают нативные компоненты на той операционной системе или на той платформе, где они запустились, и отрисовывают уже компоненты средства операционной системы, а к .net дает лишь какие-то легковесные адаптеры.
1413.80 1422.64 "Анатолий Кулаков" В частности, если мы возьмем Windows, то там бэкэндом для отрисовки MAUI является WinUI 3, про который мы тоже с вами уже говорили.
1422.64 1436.20 "Анатолий Кулаков" Соответственно, внутри это все на наших любимых C#, XAML, поддержка hot reload, то есть все то, что мы привыкли в принципе видеть уже на устоявшихся UI фреймворках.
1436.20 1453.56 "Анатолий Кулаков" И я напомню, что это фреймворк, который не строился с нуля, он базируется на Xamarin, поэтому все пользователи, которые раньше разрабатывали на Xamarin, они встретят очень много всего похожего, и для них переход будет наименее болезненный.
1453.56 1474.48 "Анатолий Кулаков" И снова, что раньше не было в Xamarin, и чем гордятся товарищи разработчики, они добавили мульти-Window-десктоповое приложение, то есть теперь у вас в приложении может быть несколько окошек, добавили поддержку меню-бара, кучу новых анимаций и новый Blazor WebView-компонент.
1474.48 1500.32 "Анатолий Кулаков" Соответственно, так как это нативное приложение, у него есть доступ к различным API конкретной платформы, например, можно обращаться к акселерометру, можно читать файловую систему и писать, можно каким-то образом взаимодействовать с идентификациями, то есть все то, что вы в принципе ждаете, увидите в обычном нативном приложении, полностью доступно и из системы OV.
1500.32 1535.56 "Анатолий Кулаков" Еще одно нововведение, такой фокус заключается в том, что основные solutions, основные подходы и демонстражки пропагандируются в виде single-project application, это когда вы делаете не для разных проектов, не для каждой платформы по отдельности и засовываете туда всякие свои компоненты, а у вас есть один единственный solution, в нем есть может быть даже один единственный проект и уже внутри этого проекта вы описываете все возможные платформы, на которых работает ваше приложение.
1535.56 1551.84 "Анатолий Кулаков" Эти платформы, специфика этих платформ просто делится в какие-то подпапочки и в этих подпапочках уже будут какие-то нативные компоненты, но проект получается в итоге один, соответственно с ним удобнее работать, он получается более консистентный и более понятный и документированный.
1551.84 1575.32 "Анатолий Кулаков" Еще одна штука теперь используется для построения десктопных приложений, в частности здесь Builder Pattern, это штука, которую вы наверняка видели в ваших и консольных приложениях, и вебовских приложениях, когда вы просто-напросто берете какой-то хост и настраиваете его, там зарегистрируете сервисы, настраиваете логеры, настраиваете там entry-points и уже потом запускаете аппликейшн.
1575.32 1581.08 "Анатолий Кулаков" Вот такой подход сделали и здесь, чтобы более не менее единообразно поддерживать вот эту систему.
1581.08 1585.76 "Анатолий Кулаков" Ну и уже на этом моменте у меня конечно же возник большой звонкий вопрос, а где же веб?
1585.76 1595.84 "Анатолий Кулаков" Как бы у нас мобилки, десктопы, это конечно хорошо, но запускать в современном мире UI-фреймворк и при этом никак не взаимодействовать с вебом или не обеспечивать веб, это было бы глупо.
1595.84 1600.64 "Анатолий Кулаков" И действительно, Мобили прекрасно поддерживает веб, но делает он это довольно специфически.
1600.64 1603.80 "Анатолий Кулаков" Он это делает с помощью Blazor.
1603.80 1613.40 "Анатолий Кулаков" Он пытается принести весь тот опыт, который наработали Blazor разработчики, как раз на десктоп и на мобилки.
1613.40 1633.00 "Анатолий Кулаков" И в этом огромная плюшка, огромный плюс для веб-разработчиков, потому что теперь вы можете переюзать, например, ваши Blazor компоненты, которые вы там уже наработали или с которыми у вас уже есть какой-то опыт, вы можете их переюзать в ваших десктопных и мобильных приложениях.
1633.00 1641.48 "Анатолий Кулаков" Естественно, они теперь будут выглядеть не особо нативно, потому что уже не операционная система будет заниматься их отображением, а вы сами.
1641.48 1649.36 "Анатолий Кулаков" Но в некоторых случаях, наверное, это не такой большой минус и только держите себя в руках, не делайте слишком много таких глупостей.
1649.36 1664.88 "Анатолий Кулаков" И, соответственно, если посмотреть с другой стороны, то можно переиспользовать все знания и все наработки, которые вы получили в веб-приложении, допустим, если вы раньше работали с Blazor, и принести ваши приложения на десктоп и на мобилки.
1664.88 1686.40 "Анатолий Кулаков" Вы можете получить как бы кроссплатформенное приложение, несмотря на то, что занимались только вебом, вы можете получить как бы кроссплатформенное нативное приложение, и, соответственно, у вас есть возможность написать один раз ваш интерфейсик, один раз вашу логику и раскатывать ее на мобилке, на веб и на десктопы.
1686.40 1689.00 "Анатолий Кулаков" Все это с одной кодовой базы, естественно.
1689.00 1691.80 "Анатолий Кулаков" И как это работает?
1691.80 1699.96 "Анатолий Кулаков" Вот это тоже интересный момент, что на самом деле MAUI запускает Blazor-овские компоненты нативно, то есть там нет WebAssembly.
1699.96 1705.32 "Анатолий Кулаков" Казалось бы, Blazor-кроссплатформенный должен быть везде через WebAssembly, но оказывается нет.
1705.32 1720.36 "Анатолий Кулаков" MAUI умеет запускать без WebAssembly, то есть у вас напрямую компоненты, .NET-овские компоненты, рендерятся внутрь встроенного веб-вью и показывают результат того, что получилось.
1720.36 1736.12 "Анатолий Кулаков" И как раз таки из плюсов, как я уже сказал, что у вас нет ограничения обычного веб-приложения, то есть вы имеете доступ к нотификации, например, к какому-нибудь Bluetooth, к геолокации, к сенсорам, к файловой системе, то есть все это вы можете получить, то, чего у вас раньше не было в браузере.
1736.12 1743.08 "Анатолий Кулаков" Вот поэтому веб-разработчики получают такое интересное окно в мир нативных приложений.
1743.08 1755.92 "Анатолий Кулаков" Соответственно, если вы добавляете вот этот Blazor WebView-компонент на ваше приложение, это не значит, что вы не можете использовать нативные компоненты.
1755.92 1761.08 "Анатолий Кулаков" MAUI позволяет вам рядом использовать и Blazor, и нативные компоненты.
1761.08 1765.72 "Анатолий Кулаков" Вы можете сделать какую-то часть окна в виде Blazor-овских компонентов, какую-то часть окна в виде нативных.
1765.72 1768.64 "Анатолий Кулаков" Наверное, можно с этим поиграться и что-то сделать.
1768.64 1773.04 "Анатолий Кулаков" И, соответственно, у вас внутри хостятся два приложения.
1773.04 1780.60 "Анатолий Кулаков" Такую технологию назвали Blazor Hybrid App, и этот Blazor Hybrid App, он есть не только в MAUI.
1780.60 1784.84 "Анатолий Кулаков" Его зарелизили и для WPF, и для WIM-форм.
1784.84 1801.44 "Анатолий Кулаков" Это по сути значит, что если вы хотите двигаться в этом направлении, хотите переводить ваши визуальные приложения на Blazor, и вы сейчас еще не используете MAUI, но уже используете какой-нибудь WPF или WIM-форм, вы уже можете это делать.
1801.44 1810.68 "Анатолий Кулаков" Вы можете на старое ваше приложение уже бросать Blazor WPF, туда переводите эти компоненты, и потом вам очень легко будет переехать на новомодный фреймворк MAUI.
1810.68 1814.64 "Анатолий Кулаков" Это тоже как один из способов миграции.
1814.64 1817.80 "Анатолий Кулаков" Вот, безусловно, там куча оптимизаций по перформансу.
1817.80 1827.64 "Анатолий Кулаков" Прежде всего просили на формах и во всяких чатиках сделать очень быструю загрузку, квази-быструю загрузку, самую быструю загрузку, которую только можно.
1827.64 1829.08 "Анатолий Кулаков" И особенно под Android.
1829.08 1831.84 "Анатолий Кулаков" Наверное, там с этим самая большая была проблема.
1831.84 1851.08 "Анатолий Кулаков" Вот, разработчики пообещали, что сделали, все будет загружаться, все будет летать очень быстро, благодаря тому, что там загружаются практически только нативные компоненты, а DotNet является такой, слава связанной именно адаптером надстройкой над нативными компонентами, то он практически ничего не ест на старте и, соответственно, позволяет сделать вот эту быструю загрузку.
1851.08 1859.08 "Анатолий Кулаков" Также они там рассказывают, как они прооптимизировали лейауты, как они их еще до старта знают, как они там будут раскладываться, как они будут считаться.
1859.08 1863.88 "Анатолий Кулаков" Все это тоже учитывается для того, чтобы быстрее рендерить и быстрее отображать ваши прекрасные компонентики.
1863.88 1868.60 "Анатолий Кулаков" В общем, эта штука обещает быть довольно интересным, ее как минимум стоит попробовать.
1868.60 1877.36 "Анатолий Кулаков" А для того, чтобы попробовать, вам нужно будет поставить Visual Studio 2022, но не просто, а версию 17.3 Preview 1.1.
1877.36 1885.44 "Анатолий Кулаков" Вот, на Mac'е она имеет такую же точную версию и, соответственно, на Mac'е вы тоже можете ее попробовать, и на большом Windows'е тоже можете попробовать.
1885.44 1892.00 "Анатолий Кулаков" При инсталляции не забудьте выбрать Workload, который называется .NET Multiplatform App UI Development.
1892.00 1897.84 "Анатолий Кулаков" И, соответственно, куча сэмплов, куча всяких туториалов уже к вашим услугам.
1897.84 1908.56 "Анатолий Кулаков" Еще нужно отметить, что если вы разрабатываете по-прежнему на Xamarin'е, то никакой нужды в яростной панике бросаться на переезд, на миграцию у вас нет.
1908.56 1916.36 "Анатолий Кулаков" Xamarin по-прежнему продолжает поддерживаться в рамках тех лицензий, тех лайфсайклов, которые были заранее задекларированы.
1916.36 1918.44 "Анатолий Кулаков" То есть, Xamarin тоже никто не бросает.
1918.44 1922.16 "Анатолий Кулаков" Все понимают, что таких приложений очень много, и переезд будет немгновенным.
1922.16 1924.48 "Анатолий Кулаков" В общем, Xamarin остается на месте.
1924.48 1927.72 "Анатолий Кулаков" Вот, еще интересная штука.
1927.72 1931.12 "Анатолий Кулаков" Я уже упомянул про кучу туториалов, кучу документаций.
1931.12 1939.12 "Анатолий Кулаков" И такой популярный человек, как Джеймс Монтемагмо, это человек, который широко известен в мире Xamarin'а.
1939.12 1950.60 "Анатолий Кулаков" Он сделал огромное число различных компонентов для Xamarin'а, написал прекрасные статьи, у него шикарный блог про Xamarin' и вообще очень активно продвигал Xamarin платформу.
1950.60 1960.36 "Анатолий Кулаков" В общем, он с головой ушел MAUI и, соответственно, сейчас склипает шикарнейшие воркшопы и курсы по этой технологии.
1960.36 1962.64 "Анатолий Кулаков" Все они абсолютно бесплатные, как всегда.
1962.64 1972.44 "Анатолий Кулаков" Называется вот, курс, к которому вы найдете ссылочку в наших шоу-ноутах, называется "Полный курс для начинающих.
1972.44 1973.96 "Анатолий Кулаков" Как изучать .NET MAUI".
1973.96 1994.20 "Анатолий Кулаков" И там вам просто прям с нуля, даже если вы никогда в жизни не писали UI'ки, но этот релиз почему-то вам захотелось срочно что-нибудь такое UI'ное наклепать, вот там прям с самого нуля начинаешь, что такое XAML, MVVM, навигацию, как вызвать платформоспецифичные API и интеграцию с платформой, строить Collection View, темы.
1994.20 1998.14 "Анатолий Кулаков" Самое главное, он научит вас делать Dark Mode в вашем приложении.
1998.14 2001.44 "Анатолий Кулаков" В общем, абсолютно все, что нужно знать современному десктоп разработчику.
2001.44 2004.04 "Анатолий Кулаков" Соответственно, James Dust.
2004.04 2012.12 "Анатолий Кулаков" У него всегда прекрасный английский, он классно объясняет, все качественно по пунктикам, с хорошим блогом.
2012.12 2015.48 "Анатолий Кулаков" В общем, тоже, если интересно, обязательно ознакомьтесь.
2015.48 2018.88 "Анатолий Кулаков" Вот, наконец, такой вот долгий путь завершился.
2018.88 2027.88 "Анатолий Кулаков" Мы долго наблюдали за MAUI, долго смотрели, куда он делся, что с ним будет, на его обещания, но ребят не подвели, в принципе, как и обещали.
2027.88 2032.24 "Анатолий Кулаков" Сроки довольно хорошо выдержали и зарелизили нам вот такой вот весенний подарочек.
2032.24 2040.44 "Игорь Лабутин" Да, действительно, забавно, что из статьи про MAUI вообще непонятно, что это релиз.
2040.44 2050.64 "Игорь Лабутин" То есть, то, что это релиз General Availability, стало понятно только после прочтения вот той самой двух-трех абзацев аннотации в Microsoft Build.
2050.64 2057.00 "Игорь Лабутин" То есть, по статье вообще непонятно, что это General Availability, особенно с учетом, что студию надо ставить все еще превью.
2057.00 2064.76 "Анатолий Кулаков" Я более того, я пролез про блогом, пролез по GitHub, там надежды найти какие-то метки, бранчи, ну как обычно Microsoft делает, вообще ничего.
2064.76 2069.64 "Анатолий Кулаков" То есть, обычно у них все статьи там называются, а, релиз, релиз, VR релиз, и все такое.
2069.64 2071.12 "Анатолий Кулаков" В этот раз вообще ноль.
2071.12 2073.48 "Анатолий Кулаков" Просто мы вам расскажем про то, какой MAUI крутой.
2073.48 2074.48 "Анатолий Кулаков" Все.
2074.48 2075.48 "Анатолий Кулаков" Ну, да.
2075.48 2076.48 "Анатолий Кулаков" Оказывается, да, вот такие вот скромные ребята.
2076.48 2077.88 "Анатолий Кулаков" Или поменяли свой маркетинговый отдел.
2077.88 2079.44 "Игорь Лабутин" Ну, может быть, может быть.
2079.44 2088.12 "Игорь Лабутин" На GitHub на самом деле видно, что в этом релизе исчез суффикс RC, ну то есть, типа, это уже не релиз-кандидат, но да, действительно, не очень понятно.
2088.12 2095.08 "Игорь Лабутин" Там просто 60300 или 61300, не помню номер версии, и вообще непонятно, релиз-не релиз.
2095.08 2096.92 "Игорь Лабутин" Ну ладно, давай пойдем дальше.
2096.92 2103.64 "Игорь Лабутин" Мы тут немножко про всякие превью поговорили, но на самом деле у нас есть еще Visual Studio, которое не превью.
2103.64 2110.44 "Игорь Лабутин" В прошлый раз мы рассказывали про Visual Studio 2022 для Windows, которая наконец-то нормально зарелизилась.
2110.44 2114.36 "Игорь Лабутин" А теперь наконец-то-ки зарелизилась Visual Studio 2022 for Mac.
2114.36 2120.48 "Игорь Лабутин" Это версия 17.0, и у нее тоже General Availability.
2120.48 2127.08 "Игорь Лабутин" Особенностью этой студии стало то, что она теперь полностью работает на шестом дотнете, поэтому...
2127.08 2129.24 "Игорь Лабутин" Собственно, на маке она поэтому и работает.
2129.24 2144.64 "Игорь Лабутин" И у нее полностью нативный macOS UI, то есть, я так понимаю, что она сделана на основе какой-то смеси Xamarin.Forms и вероятно, Maui там тоже как-то присутствует, который тоже основан на Xamarin.Forms, но я, признаться, не очень знаю, насколько там много одного или другого.
2144.64 2150.00 "Игорь Лабутин" Все это, естественно, нативно работает на Apple M1.
2150.00 2153.40 "Игорь Лабутин" Так что на маке теперь можно вполне полноценно пользоваться Visual Studio.
2153.40 2162.84 "Игорь Лабутин" Понятно, что по фичам она пока не совсем дотягивает до полноценной студии с винды, но тем не менее, я так понимаю, что все основные сценарии в ней вероятно работают.
2162.84 2167.52 "Игорь Лабутин" Я не пробовал, честно сказать, поэтому не буду уверенно говорить, что там можно нормально работать.
2167.52 2168.52 "Игорь Лабутин" Наверное, как-то можно.
2168.52 2171.28 "Игорь Лабутин" По крайней мере, лучше, чем в S-коде.
2171.28 2180.64 "Игорь Лабутин" Кроме того, несмотря на то, что вышло, собственно, только что вышло 17.0 General Availability, по хорошей традиции Microsoft выпускает сразу же превью уже следующей версии.
2180.64 2182.72 "Игорь Лабутин" Она будет называться 17.3.
2182.72 2187.96 "Игорь Лабутин" Они, видимо, зарезервировали 17.1 и 17.2 для каких-нибудь там правильных фиксов.
2187.96 2194.56 "Игорь Лабутин" И 17.3 нужна, если вы собираетесь работать с Donut 7 и если вы собираетесь работать с Maui.
2194.56 2196.60 "Игорь Лабутин" Тогда как раз нужно ставить ее.
2196.60 2203.68 "Игорь Лабутин" При этом ее можно поставить сайд байт сайд вместе с версией 17.0, которая нормальная, полноценная.
2203.68 2207.44 "Игорь Лабутин" И они будут прекрасно работать, не трогая друг друга.
2207.44 2216.84 "Игорь Лабутин" Так что если вы на Маке и если вы вдруг почему-то хотите Visual Studio на Маке, то можно попробовать посмотреть, что же там получилось у Microsoft.
2216.84 2220.36 "Анатолий Кулаков" Продолжаем обзор нестандартных технологий после Мака.
2220.36 2226.00 "Анатолий Кулаков" Еще одна такая штука, про которую все знают, она стоит в стороне и знают про нее все мало.
2226.00 2227.00 "Анатолий Кулаков" Это Unity.
2227.00 2232.76 "Анатолий Кулаков" В общем, нам тоже захотелось копнуть эту тему немножко, хотя бы поглубже, чтобы как-нибудь наших слушателей знакомить с этой технологией.
2232.76 2243.28 "Анатолий Кулаков" И поэтому подвернулась как раз прекрасная статейка от Александра Мютола про то, что сейчас представляет из себя Unity и куда они двигаются.
2243.28 2246.76 "Анатолий Кулаков" Вкратце я напомню, что Unity это такой 3D-движок.
2246.76 2259.36 "Анатолий Кулаков" Его используют в основном для игр, но также он прекрасно подходит для всякой добавочной реальности, для виртуальной реальности и всего того, где вам нужна все-таки high-performance кастомная графика.
2259.36 2264.80 "Анатолий Кулаков" В общем, ну, наверное, если вы это услышите, то, скорее всего, в технологии игр.
2264.80 2268.28 "Анатолий Кулаков" Хотя в других областях он тоже отлично применим, и он есть.
2268.28 2276.96 "Анатолий Кулаков" Еще его особенностью является то, что он был довольно долго очень староверным.
2276.96 2280.04 "Анатолий Кулаков" Ну, наверное, давайте обо всем по порядочку.
2280.04 2288.48 "Анатолий Кулаков" Прежде всего, надо сказать, что в этом движке есть специальная команда, которая называется .NET Tech Groups.
2288.48 2297.80 "Анатолий Кулаков" Это команда, которая состоит как раз-таки из .NET людей, которые пытаются продвигать эту технологию внутри этой экосистемы, этой платформы.
2297.80 2320.16 "Анатолий Кулаков" И, соответственно, данная команда посмотрела, как интересно и динамично развивается .NET экосистема, какие она дает интересные плюшки и решила, что нужно сделать больше .NET в Unity и, соответственно, дать пользователям как можно больше вот этого эксперимента и всех тех плюшек, которые имеют стандартные .NET разработчики.
2320.16 2323.48 "Анатолий Кулаков" А давать есть чего?
2323.48 2326.76 "Анатолий Кулаков" Потому что там сидят нестандартные .NET разработчики.
2326.76 2330.76 "Анатолий Кулаков" Чтобы немножко углубиться в проблему, давайте начнем с самого начала.
2330.76 2331.84 "Анатолий Кулаков" Краткая история.
2331.84 2343.44 "Анатолий Кулаков" Где-то примерно 17 лет назад образовалась вот эта платформа игровая и, соответственно, основой ее стал Mono.NET Runtime и язык C#.
2343.44 2351.00 "Анатолий Кулаков" C# был выбран потому, что он показался автором на тот момент довольно простым, довольно понятным, очевидным.
2351.00 2356.12 "Анатолий Кулаков" Его легко было изучать и он отлично походил на то, что нужно было индустрии.
2356.12 2364.48 "Анатолий Кулаков" То есть это такой C++ подобный язык, который уже много знали и который является де-факто в мире геймдева.
2364.48 2372.04 "Анатолий Кулаков" И одновременно упрощенная версия этого языка, то есть не нужно было каких-то сложных конструкций изучать.
2372.04 2384.72 "Анатолий Кулаков" И их привлек JIT, потому что это была возможность как раз транслировать C# код в довольно относительно эффективный нативный код, который в тот момент писался в основном на плюсах.
2384.72 2387.76 "Анатолий Кулаков" Это была только часть.
2387.76 2396.64 "Анатолий Кулаков" Соответственно, часть Unity написана только на C# и довольно большая, наверное, большая часть все-таки была разработана на C++.
2396.64 2407.68 "Анатолий Кулаков" Соответственно, это помогало, использование C++ помогало выстроить как раз-таки хороший баланс между перформансом и контролем памяти.
2407.68 2424.72 "Анатолий Кулаков" И так продолжалось много-много лет и очень много лет Unity довольствовался только старой версией, старым даже форком Mono и старым форком Mono Runtime и старым версиями языка C# очень долго, он там был вообще 2.0.
2424.72 2435.60 "Анатолий Кулаков" То есть можно себе представить, когда мы там каждый год практически получали какие-то новые плюшки, новые фишки, то бедные гейм-разработчики мучились на втором, на старом языке.
2435.60 2452.00 "Анатолий Кулаков" В это время команда не теряла времени зря, она улучшала свой форк, она писала какие-то кастомные тулзы, например, у нее был кастомный компилятор и кастомный раундтайм, то есть они там от Mono довольно хорошо отличались.
2452.00 2468.60 "Анатолий Кулаков" Появился такой интересный инструмент как Iltu CPP, который позволял компилировать исходный код на C# в нативный код, соответственно можно было с помощью этого запускать игры на IOS и других консольных платформах.
2468.60 2471.92 "Анатолий Кулаков" Соответственно, тоже такая интересная разработочка.
2471.92 2486.36 "Анатолий Кулаков" Также появился Burst Compilator, это специальный компилятор, который позволял нативно генерировать код из-под множества C#.
2486.36 2498.84 "Анатолий Кулаков" Там поддерживался не весь C#, но зато тот, который поддерживался, он был крайне оптимальным и поддерживал там всякие викторизации, перформансы и прочие вот эти страшные штуки, что для игр тоже было довольно таки критично.
2498.84 2513.96 "Анатолий Кулаков" И, соответственно, это позволило команде немножко все больше захватывать C++ код, потому что C# код уже становился более быстрым, более интересным, более нативным, но все же этого было недостаточно.
2513.96 2544.28 "Анатолий Кулаков" В общем, так жили-жили ребята из Unity, потом, соответственно, начали немножко улучшать вот эти свои старые версии, начали переходить постепенно на новые версии языка, стали постепенно подтягивать какие-то новые штуки из рантайма и, соответственно, уже 2021 LTS Unity, у него там была уже довольно хорошая C# версия языка, уже не помню какая, ну такая довольно современная, на которую уже удобно писать, уже можно нативно что-то делать.
2544.28 2553.72 "Анатолий Кулаков" И, соответственно, команда увидела, что в DotNet 6 у нас произошел там очень большой буст по производительности.
2553.72 2561.72 "Анатолий Кулаков" До этого там добавили спаны, допустим, и вообще перформанс в DotNet экосистеме развивается и оптимизируется очень круто.
2561.72 2572.68 "Анатолий Кулаков" И здесь захотелось для разработчиков игр дать, вот этот experience весь преподнести в самом максимальном воеме, который только могут.
2572.68 2586.52 "Анатолий Кулаков" И наши нугеты, управление пакетами с помощью Nuget и SDK стиль наших решений и многие средства для отладки, в общем, все это хотелось донести.
2586.52 2591.44 "Анатолий Кулаков" И, соответственно, они решили двигаться в этом направлении.
2591.44 2608.96 "Анатолий Кулаков" Прежде всего, на данный момент у них огромная база C++ кода, который, естественно, никуда не делся, естественно, выполняет одну из ключевых функций и взаимодействует этот C++ код с DotNet как раз-таки через специальные бандинги.
2608.96 2618.44 "Анатолий Кулаков" И проблема была в том, что эти бандинги были написаны еще до того момента, когда команда перешла уже на DotNet Core.
2618.44 2634.04 "Анатолий Кулаков" Эти бандинги были нацелены на Runtime Mono, у которого была небольшая специфика и он, соответственно, немножко отличался от текущего положения дел и поэтому для DotNet Core больше не подходил.
2634.04 2638.48 "Анатолий Кулаков" Ну, короче, нужно было его переписать.
2638.48 2651.76 "Анатолий Кулаков" И, соответственно, кроме переписывания этих бандингов, хотелось им еще добиться поддержки самого последнего C# языка всегда, когда он только выходит, чтобы на него было легко обновляться.
2651.76 2656.16 "Анатолий Кулаков" Соответственно, если они перейдут на DotNet Core Runtime, они смогут это сделать.
2656.16 2668.52 "Анатолий Кулаков" И, соответственно, они хотели всегда переходить легко на самый последний Runtime, который выйдет, потому что обычно с каждым Runtime к нам приезжает все больше и больше перформанса.
2668.52 2675.24 "Анатолий Кулаков" Как я уже упомянул, хотелось все-таки Nuget пакетов, вот эту всю инфраструктуру получить с версионированием, с подтягиванием, с распространением и дистрибьюцией.
2675.24 2681.56 "Анатолий Кулаков" Очень нравятся им C# tools для тестирования.
2681.56 2685.28 "Анатолий Кулаков" Вот что-то они там вызвали такого, чего им сильно не хватало.
2685.28 2690.04 "Анатолий Кулаков" Ну и дебаггинг, и профайлинг tools, конечно же, у нас прекрасно всегда на высоте.
2690.04 2695.36 "Анатолий Кулаков" Вот их тоже было бы неплохо заиспользовать в инфраструктуре именно Unity.
2695.36 2722.80 "Анатолий Кулаков" И, соответственно, они решили двигаться в этом направлении, они решили строить всю свою экосистему прямо на передовой .NET платформы и, соответственно, попытаться отказаться от тех своих форков, от тех своих костылей, от тех инструментов, которые не наработали, ну, от которых естественно можно отказаться, и перейти вот на стандартную .NET экосистему.
2722.80 2736.00 "Анатолий Кулаков" Соответственно, они хотят заиспользовать самый последний рантайм MS Build и SDK, и уже начали мигрировать свой движок на рантайм как раз .NET Core.
2736.00 2742.32 "Анатолий Кулаков" Вот этот процесс уже идет, идет успешно, и ребята полны оптимизма.
2742.32 2750.92 "Анатолий Кулаков" Соответственно, из тех прекрасных фишек, которые они надеются получить и заюзать, это настоящие синкавейты.
2750.92 2767.04 "Анатолий Кулаков" Насколько я понял, опять же не ругайте, я не самый настоящий сварщик, насколько я понял, у них там асинкавейты реализованы как-то сбоку, костыльно, и есть отдельные даже библиотечки, которые вводят эту поддержку, и они там не настоящие, по-моему, они как раз-таки реализованы на энумераторах.
2767.04 2776.64 "Анатолий Кулаков" Вот, и здесь есть шанс, что произведут настоящие асинкавейты, с помощью которых можно будет выполнять не только там сетевые операции, но и дождаться каких-то внутренних событий.
2776.64 2791.48 "Анатолий Кулаков" Также они надеются уменьшить потребление памяти, и с помощью использования спанов, потому что у них очень много там C++ кода, и соответственно, очень много приходилось делать копирований.
2791.48 2794.16 "Анатолий Кулаков" Вот спаны должны их от этого как-то спасти.
2794.16 2799.48 "Анатолий Кулаков" Вот, соответственно, вот примерно такая картина у нас вырисовывается на текущий момент и на будущее.
2799.48 2841.60 "Анатолий Кулаков" В принципе, мне кажется, что того успеха, который добился Unity, несмотря на ту заскорузлость всей системы и те очень устаревшие костыли, в общем, она добилась довольно хороших высот, и если им дать нормальный инструментарий, нормальный язык, и может быть постепенно придут нормальные практики, которые мы с вами как бы гордимся, любим и обсуждаем, вот, то мне кажется, у этого инструмента будет еще больше поводов для того, чтобы вырасти и привлечь еще больше разработчиков, соответственно, и создать миру больше прекрасных игр и каких-нибудь дополнительных виртуальных симуляторов и прочих глупостей.
2841.60 2884.92 "Игорь Лабутин" Да, мне кажется, на самом деле это действительно такая интересная вещь, потому что много с кем, когда говоришь про .NET, довольно много народу слышали про Unity, именно вот, как ни странно, вне .NET сообщества, очень много у кого .NET ассоциируется именно с Unity, C#, или C# ассоциируется с Unity, и всегда, когда начинаешь рассказывать про то, как сейчас клевый .NET рантайм, приходится оговариваться, что вообще-то в Unity не так, в Unity все по-другому, там другой рантайм, другой, в общем-то C#, ну он не другой, но довольно сокращенный, да, старенький, как ты сказал, ну вот сейчас действительно, наверное, будет лучше и все будет более единообразно, тоже прекрасно.
2884.92 2910.64 "Игорь Лабутин" Погнали дальше по Tool'ам, теперь давай пройдемся немножко, потому что мне тут попалась статейка про Tool, которую я не знал, ну и я под это дело немножко посмотрел вокруг и посмотрел, какие Tool'ы есть еще из этой же категории, я говорю про стандартные, так скажем, Global Tool'ы, которые вы можете поставить, либо скачать напрямую с сайта Microsoft'а, и которые потом вам доступны в виде там .NET что-нибудь.
2910.64 2920.32 "Игорь Лабутин" Конкретно Tool, который я не знал и не встречал до этого, это .NET Stack, это один из Tool'ов из коллекции Diagnostic Tool'ов, который делает довольно простую штуку.
2920.32 2939.96 "Игорь Лабутин" Во-первых, он позволяет вам посмотреть все процессы, которые работают на .NET Core или на .NET Runtime, которые собственно поддерживаются, которые поддерживают Event Pipe для того, чтобы получать диагностическую информацию, то есть это .NET Core 3.1, если я правильно помню, и все, что новее.
2939.96 2954.28 "Игорь Лабутин" После этого вы можете сказать команду .NET Stack Report и указать PID или имя процесса, который вам нужен, после чего Tool просто выведет стектрейсы всех потоков в этом приложении.
2954.28 2962.08 "Игорь Лабутин" В общем-то, простая, незамысловатая штука, но кажется, что для какой-то довольно быстрой диагностики она может быть полезна.
2962.08 2986.40 "Игорь Лабутин" Тем более, что в своей практике я довольно часто попадал в ситуации, когда я собирал большой дамп, ну или не очень большой, но тем не менее, собирал дамп процесса, открывал его там в WinDbg, в студии, либо еще в чем-нибудь, посмотрел, покажи мне все call stack, смотрел на них, говорю, а, все, дальше проблема понятна, и шел ее там фиксить, ну или же как-то более нормально воспроизводить уже в дилейберском окружении.
2986.40 2994.24 "Игорь Лабутин" То есть у меня довольно много было случаев, когда просто перечисление всех стеков в процессе было достаточно для понимания, что же там сейчас происходит.
2994.24 2999.60 "Игорь Лабутин" Так что, если интересно, посмотрите.
2999.60 3010.52 "Игорь Лабутин" И, соответственно, я взглянул, собственно, в статью документации Microsoft, где описывается этот tool, и посмотрел на все статьи рядом.
3010.52 3026.16 "Игорь Лабутин" И давайте я так кратенько пробегусь и напомню, что на самом деле в SDK вам доступно некоторое количество tools, которые ставятся через .NET, tool install, если с флажком -g, то он будет глобальный tool, то есть будет доступен везде, а не только в той папочке, где вы проинсталили.
3026.16 3034.28 "Игорь Лабутин" И часть из этих tools мы уже рассматривали, часть из этих tools мы, по-моему, вообще никогда не трогали, но тем не менее будет интересно быстренько по ним пробежаться.
3034.28 3044.20 "Игорь Лабутин" Tool, который мы точно затрагивали, поскольку мы очень любим тему observability и всяческое смотрение на любые характеристики performance приложения - это .NET counters.
3044.20 3071.76 "Игорь Лабутин" Это, по сути, tool, который заменяет в некотором смысле performance counter viewer, который есть в Vendee, который позволяет вам смотреть performance counter значение для обычных виндовых приложений, либо приложений на .NET Framework, .NET counters - это кроссплатформенная штука, которая использует тот самый новый endpipe механизм, чтобы получать данные о performance из .NET приложения, которое работает на достаточно новом рантайме, тот самый 3.1+.
3071.76 3091.72 "Игорь Лабутин" Поэтому если вы пишете что-то и вам нужно быстренько посмотреть на то, как работает ваш код в том или ином окружении, то вы как раз .NET counters с командной строчкой вам быстренько покажут, что там происходит, сколько сборок, какие размеры куча и так далее, без сбора большого количества дампов и так далее.
3091.72 3098.04 "Анатолий Кулаков" Ну и отдельно прекрасно, что это кроссплатформенная штука в отличие от performance counters, то есть работает везде.
3098.04 3099.04 "Игорь Лабутин" Да.
3099.04 3119.00 "Игорь Лабутин" .NET coverage - штука, которую я вообще никогда не пользовался и, честно говоря, даже не знал, что она есть, позволяет считать, собственно, код coverage внезапно, то есть вы просто запускаете ваше приложение, запустив снаружи этот .NET coverage, и он покажет вам потом статистику некоторую про то, где у вас что за, каким образом покаверлено.
3119.00 3123.48 "Игорь Лабутин" Никогда не пробовал, надо, может быть, будет подергать, посмотреть, что там вообще генерируется, насколько
3123.48 3156.92 "Анатолий Кулаков" полезно. Это, кстати, классная тема, я не знаю, почему Microsoft про нее молчит, но я вообще не встречал каких-то разгромных статей маркетинговых или, может быть, видео или еще чего-то, но в .NET Core с тех пор, как появилась .NET Tools, у него появился API, который позволяет отлично и очень легко встраивать, допустим, различные тестовые фреймворки, тестовые адаптеры, ну, просто это настолько повседневная вещь, что на это никто не обратил внимания, но и одновременно очень легко позволяет встраивать в ваше приложение код coverage.
3156.92 3170.04 "Анатолий Кулаков" Достаточно всего-навсего один NuGet пакет проинсталировать уже в существующие ваши приложения, у которых уже есть тесты, всего-навсего один этот пакет, и все, и ваше приложение автоматически получает поддержку код coverage.
3170.04 3184.92 "Анатолий Кулаков" Поэтому даже те существующие проекты, которые у вас уже там давно есть и все такое, но которые поддерживают тестирование с помощью .NET Test или, может быть, даже раньше, но раньше я их просто не пробовал, вот, вы можете за 3 секунды добавить код coverage.
3184.92 3198.28 "Анатолий Кулаков" Единственное, что вам нужно потом загнаться, каким образом его посмотреть, потому что собрать-то его не проблема, а вот смотреть нужно в зависимости от того, где вы запускаетесь, там, локально, в каком-нибудь билд-агенте или на GitHub, где-то еще.
3198.28 3209.24 "Анатолий Кулаков" В общем, вам еще нужен будет какой-нибудь адаптер к вашей системе просмотра, но во всем остальном, как бы, уже вся инфраструктура, вся платформа, все библиотечки готовы и очень легко это внедряется.
3209.24 3213.20 "Анатолий Кулаков" Если попадется какая-нибудь отдельная статейка, может, поговорим об этом поподробнее.
3213.20 3215.00 "Анатолий Кулаков" А так пока информация к размышлению.
3215.00 3223.08 "Игорь Лабутин" Да, действительно, я как-то, ну, мы код coverage почти не собираем, но, наверное, есть сценарий, где это точно нужно и полезно.
3223.08 3253.52 "Игорь Лабутин" .NET Dump, мы его много раз затрагивали, и партнер ему .NET GC Dump, соответственно, собирает и анализирует либо полные дампы процесса, ну, он полный с учетом того, что он собирается только менеджмент часть, либо GC Dump, это немножко другая штука, это собирается, наоборот, дамп именно памяти, то есть минимально необходимая информация для анализа именно кучи, и потом ее можно там тоже поанализировать этим же тулом, либо открыть там какой-нибудь перфью, условно, или в студии, может быть, даже можно сейчас
3253.52 3259.00 "Анатолий Кулаков" уже, и посмотреть, что у вас происходит с кучей. Интересно, студия для мака поддерживает эти дампы?
3259.00 3264.32 "Анатолий Кулаков" Потому что раньше я помню, что нужно было собирать дампы под Linux, перекачивать их на Windows и на Windows смотреть.
3264.32 3277.48 "Игорь Лабутин" Да, было так нужно, не уверен, не знаю, думаю, что должна в каком-то базовом варианте, но я не пробовал, никогда не запускал студию под Mac, поэтому тут я теоретик, не практик.
3277.48 3291.24 "Игорь Лабутин" Просто она основана на том же шестом .NET, поэтому по идее ничего сейчас не мешает взять и, условно говоря, теми же тулами, грубо говоря, парсить, потому что код общий, в смысле и кросс-платформенный.
3291.24 3299.76 "Игорь Лабутин" У всех этих тулов есть не только опция collect, но и опция analyze, то есть какая-то опция, там либо analyze называется, либо report, которая какой-то report строит.
3299.76 3311.24 "Игорь Лабутин" То есть, возможно, там не будет супер детального и конкретно нужного вам анализа этих дампов, но получить базовую информацию о дампе вы точно сможете.
3311.24 3312.24 "Игорь Лабутин" Пойдем дальше.
3312.24 3321.64 "Игорь Лабутин" .NET Trace — это в ту же кучку, что и .NET Counters, то есть это сборка и какой-то анализ трейсов, то есть информация о выполнении.
3321.64 3325.92 "Игорь Лабутин" Смотрите, мы, в общем, про обзервабилити много чего говорили.
3325.92 3330.72 "Игорь Лабутин" .Dotnet Symbol — штука, которой я, по-моему, не пользовался ни разу.
3330.72 3339.96 "Игорь Лабутин" Я последний раз вот так ручную с символами работал, когда я еще пользовался какую-то консольную тулу из комплекта WinDPG, SimChack она, по-моему, называлась или как-то так.
3339.96 3343.68 "Игорь Лабутин" Но эта штука вообще нужна для того, чтобы загрузить нужные символы.
3343.68 3361.88 "Игорь Лабутин" То есть если вы, например, собрали дамп на какой-то машинке, притащили его к себе, то вы можете просто сказать .NET Symbol, пробел и имя этого дампа, ну или там какую-то команду нужно вставить из небольшого перечня, и он автоматически проанализирует дамп и загрузит вам локально все нужные символы, которые будут нужны для анализа этого дампа за один раз.
3361.88 3364.36 "Игорь Лабутин" Ну а дальше вы можете уже анализировать спокойно дамп.
3364.36 3370.48 "Игорь Лабутин" Туда же, в ту же кучку, .NET SOS — это приложение для установки SOS Extension, если вам это о чем-то говорит.
3370.48 3374.68 "Игорь Лабутин" А если это вам о чем-то говорит, то, наверное, вы знаете, что такое WinDBG.
3374.68 3382.16 "Игорь Лабутин" Ну, в общем, помните, что раньше SOS Extension устанавливался, когда вы ставили WinDBG, он шел с ним в комплекте.
3382.16 3390.56 "Игорь Лабутин" Сейчас не обязательно ставить WinDBG, но иногда для анализа дампов нужен тот самый SOS Extension, это как раз-таки штука, которая нужна, чтобы анализировать и менеджировать эту часть.
3390.56 3394.60 "Игорь Лабутин" И вот специальный тул, который умеет их правильно ставить, и экстенджины.
3394.60 3402.60 "Анатолий Кулаков" Только задумайтесь, написали отдельный инструмент для того, чтобы заинсталлировать какой-то отдельный экстенджин.
3402.60 3407.76 "Анатолий Кулаков" То есть вот такая вот неслабая такая иерархия инсталляций.
3407.76 3418.16 "Игорь Лабутин" Да, и есть еще более специальный тул, про который я вообще не знал, но у меня нет таких кейсов для разработки, называется .NET DS Router.
3418.16 3431.24 "Игорь Лабутин" Штука, которая, по сути, делает некоторый туннель-прокси для .NET Trace, .NET Counter в случае, если вы разрабатываете для Android, iOS или tvOS.
3431.24 3444.56 "Игорь Лабутин" Потому что эти приложения запускаются в эмуляторах соответствующих, и вашему .NET Trace, запущенному на вашей разработческой машинке, просто нет доступа к этим приложениям, потому что они бегут где-то в своем стороннем контейнере, эмуляторе, еще в чем-то.
3444.56 3457.76 "Игорь Лабутин" Так вот этот тул, он умеет как-то правильно прокидывать нужные туннели, так что ваше .NET приложение, работающее в вашем Android эмуляторе, будет видно какому-нибудь .NET Counter, и вы сможете смотреть у себя состояние этого приложения.
3457.76 3461.60 "Игорь Лабутин" Так что, ну, наверное, если вы занимаетесь такой мобильной разработкой на .NET, вы и так про это знаете.
3461.60 3462.60 "Игорь Лабутин" Я не знал.
3462.60 3472.40 "Игорь Лабутин" Ну вот это то, что в документации Microsoft описано как основные тулы из SDK, которые прям вот входят, так сказать, в core-комплект.
3472.40 3488.36 "Игорь Лабутин" Понятное дело, что на Nuget сервере и на nuget.org есть огромное количество всяких странных, нужных, полезных и очень разных global и не очень global .NET тулов, которые можно поисследовать, поизучать и найти что-нибудь для себя полезное.
3488.36 3500.04 "Анатолий Кулаков" Ну что ж, давай далеко не отходить от темы инструментов, продолжаем ознакомить вас с блестящими тулами, и на очереди у нас еще один интересный проект, вышеупомянутого Александра Мютла.
3500.04 3507.72 "Анатолий Кулаков" Это человек крайне продуктивный и известен в основном в мире тем, что сильно загоняется перформансом.
3507.72 3516.76 "Анатолий Кулаков" У него всегда основательный, хороший перформанс-подход к любым инструментам, поэтому я всегда с радостью пересматриваю его GitHub-репозиторий.
3516.76 3524.36 "Анатолий Кулаков" У него куча прям хороших библиотек, может быть, некоторыми из них вы напрямую пользовались или транзитивно пользовались.
3524.36 3531.12 "Анатолий Кулаков" У него есть шикарный YAML-парсер, например, Toml-парсер очень известный и много-много других интересных таких утилит.
3531.12 3534.20 "Анатолий Кулаков" И в частности, я об одной утилите, мы вам сегодня и хотим рассказать.
3534.20 3537.68 "Анатолий Кулаков" Эта утилита называется .NET Releaser.
3537.68 3545.56 "Анатолий Кулаков" Это утилита командной строки, которая предназначена для того, чтобы управлять жизненным циклом .NET-приложения.
3545.56 3565.60 "Анатолий Кулаков" Грубо говоря, это враппер над стандартными командами .NET Build, .NET Test, .NET Pack и прочими утилитками, но которая позволяет объединить это все в один pipeline и улучшить, расширить и углубить, так сказать, функциональность стандартного .NET Tools.
3565.60 3587.00 "Анатолий Кулаков" Наверное, если вы сталкивались с такими сервисами, как AppWare или Travis CI, вы на GitHub видели такие, может быть, файлики в виде YAML, в которых обычно проекты описывают, то каким образом собирать ваши инструменты, то есть ваши solutions и ваши проекты.
3587.00 3609.04 "Анатолий Кулаков" Вот немножко этот .NET Tools похоже на данный подход, то есть вы в специальном файлике, в конфигурации описываете то, что вам нужно получить в результате обработки вашего репозитория, какие артефакты получить, что с ними сделать и соответственно этот .NET Tools может это сделать.
3609.04 3610.92 "Анатолий Кулаков" Ну давайте конкретно по фичам пробежимся.
3610.92 3631.72 "Анатолий Кулаков" Например, у нее есть очень простая интеграция в GitHub Actions CI, есть уже написанный GitHub Action, который вы подключаете просто к своему проекту, задаете определенные параметры и интеграция уже вашего существующего GitHub проекта будет работать на ура, бегать тесты, паблишес артефакты и прочее.
3631.72 3646.80 "Анатолий Кулаков" В принципе, почему-то автор везде настаивает, что это инструмент, который прекрасно работает с GitHub, но если так разобраться, по сути дела это обычная командная строка, поэтому заинтегрировать ее в абсолютно любой другой какой-нибудь CI проблем никаких нет.
3646.80 3655.64 "Анатолий Кулаков" Ну, соответственно, в документации это сильно не афишируется, но факт остается фактом.
3655.64 3659.32 "Анатолий Кулаков" Так, что же еще интересного умеет делать этот прекрасный релизер?
3659.32 3678.40 "Анатолий Кулаков" Прежде всего, он умеет создавать различные пакеты, допустим, если вам нужен не просто NuGet пакет, вам может понадобиться zip архив, или если вы распространяете ваше приложение под операционную систему Linux, вам нужны Debian пакеты или может быть даже RPM пакеты, или может быть вы захотите засунуть это все в Homebrew.
3678.40 3692.28 "Анатолий Кулаков" Данный инструмент тоже позволяет вам подготовить всю необходимую пакет или метаинформацию для таких вот способов распространения, которые немножко шире, чем стандартный NuGet.
3692.28 3697.28 "Анатолий Кулаков" Самая, наверное, прекрасная штука, которая меня зацепила, это генерация прекрасных change logs.
3697.28 3702.56 "Анатолий Кулаков" Это специальные change logs, которые могут строиться из шаблонов, из темплейтов.
3702.56 3713.60 "Анатолий Кулаков" Кстати, темплейты сделаны на языке Scriven, Scriven templates, о котором мы тоже в нашем подкасте уже говорили, его часто используют в source-генераторах, например, популярный инструмент.
3713.60 3736.28 "Анатолий Кулаков" Так вот, change logs сделаны на темплейтах, то есть вы их можете кастомизировать абсолютно как вам нужно, как вам интересно, включая темы, и самое главное, что они могут доставать информацию о том, что произошло из pull requests, из commits, и, соответственно, из git-истории любого, и позволяет вам сделать довольно насыщенные, красивые, понятные, интересные change logs.
3736.28 3740.28 "Анатолий Кулаков" В общем, это надо визуально посмотреть, попробуйте по ссылке пройти и восхититься.
3740.28 3841.44 "Анатолий Кулаков" Соответственно, эти change logs потом можно будет запушить в GitHub, можно их будет запушить в NuGet, также можно запустить любые артефакты, которые у вас есть, вот вышепомянутые код-кавериджи можно собрать, например, и тоже их запушить в виде отчета в GitHub или в специальный сервис, который есть, есть специальные сервисы, которые поддерживают всякие код-кавериджи, вот как, например, есть сервис для NuGet пакетов, где вы можете зайти там скачать, посмотреть, вот есть специальные сервисы для код-кавериджей, куда вы можете зайти и раскрыть иерархию вашего покрытия, найти, какие методы покрыты, какие нет, как они менялись со временем, как вот этот процент у вас рос или наоборот падал, можете подключить к вашему GitHub, например, или стороннему CI-серверу специального агента, который, например, работает, чтобы в каждом пул реквестик код-каверидж не падал, в общем, там тоже стоит хорошая инфраструктура и хорошая система, если вдруг вы код-кавериджем загоняетесь, вот, и, соответственно, как я уже сказал, можно все эти артефакты залить и туда и сюда, и еще самая интересная, наверное, фишка заключается в том, что вы можете запускать, запускать реализер вот этот, как на вашем CI-сервере, как я уже сказал, например, на GitHub, так и запускать его локально, соответственно, если у вас вдруг что-то удаленно свалилось и вам хочется на локальном окружении это как-то ближе посмотреть или может быть даже отладить с помощью подручных средств, то вы можете просто из командной строки набрать команду .NET Releaser и запустить то же самое, получить те же самые артефакты и разобраться в них, посмотреть, подебажить, в общем, все это делается с помощью той же самой команды.
3841.44 3855.16 "Анатолий Кулаков" Вот это в отличие, например, если вы возьмете те же самые AppWare и Travis CI, то там вы локально уже или не запустите, или запустите за деньги, или запустите через какие-нибудь костыли.
3855.16 3859.32 "Анатолий Кулаков" В общем, этим плохи вот эти удаленные запускальщики.
3859.32 3867.76 "Анатолий Кулаков" А это же утилита, прежде всего, нацелено на то, чтобы запускаться везде и вся, поэтому локальный запуск для нее такой нативный получается.
3867.76 3889.56 "Анатолий Кулаков" Итак, чтобы попробовать эту штуку, все довольно просто, так как у нас теперь есть способ дистрибуции, который называется .NET Global Tools, вы всего лишь на все с помощью одной команды .NET Global Tools ставите ее себе, добавляете с помощью другой специальной команды к себе в специальный файл настроек.
3889.56 3903.48 "Анатолий Кулаков" В отличие от недобитых хипстеров, здесь был выбран TOML, никаких ямлов, а вот TOML сильно проще, сильно предсказуемее, ну, вы, наверное, любители, но здесь именно он.
3903.48 3917.52 "Анатолий Кулаков" Соответственно, и все, дальше вы можете выполнить команду .NET Releaser Build, и она соберет вам по тому процессу, который описан в TOML, соберет вам ваши прекрасные артефакты, может быть, даже в этот же момент и запублишит.
3917.52 3932.52 "Анатолий Кулаков" Вот такая интересная утилитка, довольно простая, но если вдруг у вас есть какая-то тесная интеграция, плотная интеграция с GitHub, вы часто используете множество артефактов, копируете под различные операционные системы пакеты, собираете под различные платформы.
3932.52 3949.20 "Анатолий Кулаков" Также я уже упоминал, что Mutal это один из участников команды Unity, поэтому у него есть очень большой и шикарный опыт как раз в сборке под разные платформы, разные процессоры и разные Linux.
3949.20 3955.44 "Анатолий Кулаков" И, соответственно, в этом инструменте это все проделано и зафиксировано очень-очень хорошо.
3955.44 3958.68 "Анатолий Кулаков" В общем, если вам и такая штука нужна, посмотрите обязательно, может быть, пригодится.
3958.68 3962.08 "Игорь Лабутин" Да, прикольно, надо будет попробовать.
3962.08 3972.88 "Игорь Лабутин" Я на самом деле tool видел, но не пробовал, и вот тема, что ты действительно можешь запустить одной командой то же самое, что у тебя запускается в GitHub, то вроде это на самом деле прикольный point.
3972.88 3981.44 "Игорь Лабутин" Хотя мне кажется, что GitHub выпустил какую-то штуку, которая позволяет тебе запускать, собственно, GitHub Action локально, но я не помню, как называется.
3981.44 3986.32 "Анатолий Кулаков" Может быть, может быть, но, опять, скорее всего, это нужно какой-нибудь сервачок поставить или что-нибудь в этом духе.
3986.32 3991.96 "Игорь Лабутин" Ну, да, скачать tool, который написан на Go или еще на чем-нибудь и выполнить, собственно, сам pipeline.
3991.96 3998.84 "Игорь Лабутин" А здесь смысл в том, что, я так понимаю, весь pipeline заключается в вызове единственного этого tool, и ты его же просто вызываешь локально.
3998.84 3999.84 "Игорь Лабутин" Ну, в принципе, да.
3999.84 4000.84 "Игорь Лабутин" Почему нет?
4000.84 4005.12 "Игорь Лабутин" Возможно, кому-то для каких-то сценариев это будет удобно.
4005.12 4006.36 "Игорь Лабутин" Давай пойдем дальше.
4006.36 4016.92 "Игорь Лабутин" И дальше у нас тема не такая, чтобы прямо про tools, она больше про поговорить, а именно про то, как же дизайнятся API в дотнете.
4016.92 4021.88 "Игорь Лабутин" Не просто API, а именно API в самом dotnet runtime или в dotnet стандартной библиотеке.
4021.88 4031.16 "Анатолий Кулаков" Наконец-то мы отошли от каких-то примитивных web API или еще чего-нибудь на настоящий runtime и настоящие большие микрософтовские спецы.
4031.16 4041.68 "Игорь Лабутин" Ну, web API там тоже есть, конечно же, ASP.NET работает примерно тем же образом, но тут речь идет именно, конечно, в основном про основной runtime и BCL.
4041.68 4056.64 "Игорь Лабутин" И статья, это, как ни странно, от Стива Гордона, который не работает в Microsoft, не входит в команду, которая пишет эти самые dotnet API, но ему было интересно посмотреть, как это все работает, он посмотрел на это все со стороны, благо сейчас все это открыто.
4056.64 4072.44 "Игорь Лабутин" Ну, а про закрытые куски, даже если ты работаешь в Microsoft, скорее всего, если они есть, тебе не дадут рассказать, поэтому это публичная часть того, что мы видим и то, как мы сейчас знаем, дизайнится dotnet API.
4072.44 4089.84 "Игорь Лабутин" Проблема с dotnet API состоит в том, что всегда очень хочется добавлять много новых фич, потому что пользователи приходят, говорят, а вот мы еще такое хотим, такое хотим, такое хотим, но возникает проблема в том, что единожды добавленная фича, во-первых, будет нуждаться в поддержке.
4089.84 4108.96 "Игорь Лабутин" По опыту dotnet framework можно считать, что многолетней поддержки, потому что даже эти фичи, которые были добавлены в первых версиях dotnet, обязаны были работать в версиях 4.x, 4.7, 4.8, и никаких поблажек, за очень редким исключением, не было сделано.
4108.96 4123.08 "Игорь Лабутин" Мы буквально, по-моему, три выпуска назад обсуждали, что наконец-таки поменяли поведение рантайма с метод групп конвершен, там теперь кэшируются статические эти самые метод группы, и это прям был breaking change.
4123.08 4140.04 "Игорь Лабутин" И второй момент, что да, добавляя новые фичи, нужно убедиться в том, что мы ничего не сломаем из старых фич, а для этого нужно прекрасно знать, как работает рантайм, какие фичи с чем связаны, и как они могут повлиять друг на друга.
4140.04 4146.36 "Игорь Лабутин" И вот здесь как раз-таки, конечно, нужна команда профессионалов, которые наизусть знают, как работает dotnet, и помнят наизусть про все фичи.
4146.36 4150.04 "Игорь Лабутин" Наверное, такой нету, но как-то они попытаются справиться.
4150.04 4153.04 "Игорь Лабутин" И процесс дизайна как раз построен вокруг этого.
4153.04 4156.12 "Игорь Лабутин" Начинается все с фазы дизайна.
4156.12 4165.96 "Игорь Лабутин" Кто угодно, фактически, может написать дизайн, какой-нибудь новой фичи, и запушить его в специальную репозиторию под названием dotnet designs на гитхабе.
4165.96 4170.16 "Анатолий Кулаков" А там есть у них какой-нибудь темплейт, или каждый пишет произвольно, как хочет?
4170.16 4171.84 "Игорь Лабутин" Там есть некоторые темпл...
4171.84 4177.44 "Игорь Лабутин" Вот прям так, что бы темплейт, темплейт, я не уверен, но там есть набор точной рекомендации, что должно входить в этот дизайн.
4177.44 4193.28 "Игорь Лабутин" Во-первых, описание проблемы, или какой-то, ну скажем так, сложности, что мы пытаемся либо решить, если это проблема, либо улучшить, если мы, например, что-то там ускоряем, не знаю, улучшаем юзер-экспириенс, или еще что-то делаем.
4193.28 4197.40 "Игорь Лабутин" То есть дизайн должен решать какую-то проблему, делать жизнь лучше.
4197.40 4204.16 "Игорь Лабутин" Вторая часть — это четкое описание того, как это будет взаимодействие с пользователем.
4204.16 4211.24 "Игорь Лабутин" То есть никого пока еще на этот момент не волнует, как это будет сделано, как быстро это будет работать, как медленно и так далее.
4211.24 4219.80 "Игорь Лабутин" То есть это именно как это будет выглядеть фича, или какое-то изменение поведения с точки зрения пользователя.
4219.80 4223.28 "Игорь Лабутин" Не важно, какие там будут нужны изменения в рантайме или не в рантайме.
4223.28 4224.52 "Игорь Лабутин" Это детали, которые будут дальше.
4224.52 4230.96 "Анатолий Кулаков" То есть имеется в виду именно название функций, как описывается сигнатура, вот это все?
4230.96 4235.36 "Игорь Лабутин" Это даже еще не это, это уже чуть более детальная информация.
4235.36 4249.92 "Игорь Лабутин" Это больше про, что будет ожидать пользователь, что не знаю, http-клиент будет, вот если у него вызвать такой-то метод, или даже такой-то метод, наверное, неправильно говорить.
4249.92 4257.48 "Игорь Лабутин" То есть http-клиент должен уметь посылать, не знаю, небуферизированный стрим в ответе.
4257.48 4271.00 "Игорь Лабутин" Помнишь, мы недавно обсуждали фичу, что теперь http-клиент или minimal API, кто-то из них, позволяет возвращать стрим, и стрим будет стримиться, соответственно, честно в ответ, а не буферизовываться в серединке.
4271.00 4279.32 "Игорь Лабутин" То есть вот здесь будет написано, что пользователь имеет возможность вернуть стрим, и этот стрим не будет буферизироваться, точка, по сути.
4279.32 4286.60 "Игорь Лабутин" Без деталей API, того, что метод должен возвращать конкретно стрим, или он должен иметь такой-то атрибут и так далее.
4286.60 4294.28 "Игорь Лабутин" Для подтверждения или для иллюстрации того, как этот юзер-экспириенс выглядит, здесь нужно привести примеры кода.
4294.28 4309.08 "Игорь Лабутин" Пока еще, да, мы не знаем финального вида API, мы не знаем точных названий методов, но ты, как автор дизайна, должен придумать что-то и написать, как примерно ты считаешь нужным должен выглядеть код.
4309.08 4316.20 "Игорь Лабутин" Ну, если это как-то влияет на код, но практически всегда, поскольку мы дизайним API для рентайма, код там должен быть.
4316.20 4341.92 "Игорь Лабутин" Дальше пишутся требования к API, уже такие более формализованные, где можно уже перечислить, например, какие-то ожидания или требования по перфомансу, по масштабируемости, по каким-то другим характеристикам, которые будут важны конкретно в разрезе нужного дизайна.
4341.92 4349.72 "Игорь Лабутин" То есть обработка ошибок, еще что-то, трэд-сейфити какой-нибудь и так далее.
4349.72 4357.68 "Игорь Лабутин" Важный пункт следующий — это, они это называют на английском non-goals, то есть что не является целями этого дизайна.
4357.68 4369.44 "Игорь Лабутин" То есть пытаясь решить одну проблему, программисты имеют свойство очень легко отклоняться в сторону решения каких-нибудь других более, я не знаю, удобных, интересных, легких или наоборот сложных проблем.
4369.44 4373.64 "Игорь Лабутин" Но конкретный дизайн должен решать ту проблему, которая была поставлена вначале.
4373.64 4382.56 "Игорь Лабутин" И прямо в дизайне явно пишется, что мы этим дизайном не пытаемся решить такую-то штуку, не пытаемся решить такую-то штуку и не пытаемся решить такую-то штуку.
4382.56 4391.76 "Игорь Лабутин" Понятно, что это нужно, может быть, не для всех дизайнов, но для тех, где будет довольно легко отклониться в сторону, это очень важно.
4391.76 4413.44 "Анатолий Кулаков" Я, кстати, себя поймал на мысли, что действительно когда пишут дизайн рекорды, этот пункт для меня является одним из самых важных, потому что немножко, я бы не сказал, что он позволяет не уходить в сторону, знаешь, мне позволяет все-таки сосредоточиться на конкретной вещи, потому что всегда хочется сделать штуку самую абстрактную, как только это возможно.
4413.44 4420.08 "Анатолий Кулаков" Тем более, если ты пишешь дизайн не один, у тебя есть коллеги, коллеги что-то свое имеют в виду, у них абстракция тоже зашкаливает.
4420.08 4437.36 "Анатолий Кулаков" Вот и всегда есть опасность сделать слишком абстрактную штуку, слишком мощную, но при этом, соответственно, не узкоспециализированную и, соответственно, которую невозможно будет каким-нибудь образом оптимально подойти к решаемой задаче.
4437.36 4444.00 "Анатолий Кулаков" Поэтому очень полезно для себя обозначать сразу не только то, что ты хочешь сделать, но и то, что ты точно делать не хочешь.
4444.00 4464.20 "Игорь Лабутин" Да, некоторые границы рамки это и особенно это важно в разрезе каких-нибудь больших фич для дот-нета, то есть, например, когда пишутся дизайны, как бы нам сделать трейты или какие-нибудь, не знаю, что у нас много, паттерн-матчинг, когда он начинался только.
4464.20 4467.68 "Игорь Лабутин" Понятно, что тема паттерн-матчинга, она прям бесконечна.
4467.68 4471.68 "Игорь Лабутин" И можно делать сразу и на века, но это займет много лет.
4471.68 4481.20 "Игорь Лабутин" А можно делать, говорится, что вот этот дизайн, он конкретно на первую фазу про паттерн-матчинг, и он в себя будет включать то-то, а вот эти вопросы мы точно сейчас рассматривать не будем.
4481.20 4482.20 "Игорь Лабутин" Мы к ним вернемся потом.
4482.20 4490.20 "Игорь Лабутин" Иногда пишут сразу несколько дизайнов, и они в этой секции линкуются друг с другом, что как бы о продолжении смотри там.
4490.20 4492.20 "Игорь Лабутин" Но сначала мы сделаем вот это.
4492.20 4497.56 "Игорь Лабутин" То есть, но если мы думаем над этим, то надо помнить, что у нас будет продолжение.
4497.56 4499.12 "Игорь Лабутин" То есть, это тоже важно.
4499.12 4505.56 "Игорь Лабутин" Иногда мы ограничиваем скоуп только в рамках релиза какого-то, ну или ближайшего цели, да, шага-шага.
4505.56 4507.96 "Игорь Лабутин" Но помнить про скоуп общий тоже нужно.
4507.96 4512.28 "Игорь Лабутин" И наконец, финальная часть дизайна — это API тот самый.
4512.28 4519.40 "Игорь Лабутин" Вот те самые методы, про которые ты говорил, они туда действительно пишутся, но туда пишется только паблик-часть.
4519.40 4521.56 "Игорь Лабутин" То есть, грубо говоря, ты пишешь интерфейсы.
4521.56 4530.28 "Игорь Лабутин" То есть, любые типы и методы, ну или классы, методы, янучки, все, что нужно тебе для выражения того, как будет выглядеть API.
4530.28 4539.68 "Игорь Лабутин" То есть, какие перегрузки есть, какие возвращаемые типы, какие новые типы надо придумать, какие, возможно, типы сделать не internal, а паблик из существующих, ну и так далее.
4539.68 4542.64 "Игорь Лабутин" То есть, вот эта часть дизайна.
4542.64 4546.24 "Игорь Лабутин" Кто угодно может прийти и сесть ее написать.
4546.24 4551.44 "Игорь Лабутин" Могу я, можешь ты, может Стивен Тауб, может Андерс Хейлсберг, кто угодно.
4551.44 4561.84 "Игорь Лабутин" После того, как это все сделано, наступает фаза ревью, а точнее, не то чтобы ревью, а эти дизайны лежат.
4561.84 4564.72 "Игорь Лабутин" Они вот лежат в репозитории, лежат в репозитории.
4564.72 4570.00 "Игорь Лабутин" Но периодически к ним приходят и с ними начинают работать.
4570.00 4578.72 "Игорь Лабутин" То есть, вот момент, как выбрать, что из этого всего начать пытаться брать в релиз, ну тут непонятно.
4578.72 4589.48 "Игорь Лабутин" Возможно, надо смотреть на количество лайков под каждым дизайном, потому что это GitHub, это паблик, и народ, видя там дизайн, периодически туда заходит и говорит, о да, вот это хочу, а вот это не хочу.
4589.48 4592.80 "Игорь Лабутин" Иногда, это же ищем, по сути, на GitHub.
4592.80 4595.88 "Игорь Лабутин" Еще до какого-то официального обсуждения, в...
4595.88 4598.04 "Игорь Лабутин" Ишь ли разворачивать какая-то дискуссия.
4598.04 4600.44 "Игорь Лабутин" А вот можно так, а можно это, а что ты имел в виду?
4600.44 4604.04 "Игорь Лабутин" А вот не забыл ли ты про это, а как это будет жить вместе с вот этой фичей, и так далее.
4604.04 4613.20 "Игорь Лабутин" То есть даже еще, может быть, даже .NET команда не сильно начала над этим думать, и даже еще ничего не пообещала и не взяла в работу, но уже может начать какое-то обсуждение.
4613.20 4626.96 "Игорь Лабутин" И если дизайн выглядит достаточно проработанным, по нему есть, там, не знаю, достаточное количество лайков, условно, по нему вроде как нету каких-то жестких противоречий в комментах или у всей команды начинается фаза дизайн-ревью.
4626.96 4632.32 "Игорь Лабутин" В этом случае новая ишь уже открывается в репозитории рантайма.
4632.32 4642.60 "Игорь Лабутин" То есть в рантайме есть для каждого дизайна, есть некоторые ишь в репозитории уже рантайма, где будет вестись более детальная работа.
4642.60 4652.28 "Игорь Лабутин" Дальше, в зависимости от дизайна, либо нужно попытаться сделать какой-то proof of concept небольшой в отдельном бранче, либо можно сначала обсуждать API-шечку, а потом уже делать proof of concept.
4652.28 4654.96 "Игорь Лабутин" Тут в зависимости от дизайна.
4654.96 4656.24 "Игорь Лабутин" Решают по месту.
4656.24 4659.28 "Игорь Лабутин" В любом случае это все после того, как это сделано.
4659.28 4665.16 "Игорь Лабутин" Либо есть proof of concept разработанный, либо просто можно обсуждать API прямо так.
4665.16 4669.76 "Игорь Лабутин" Назначается штука под названием .NET DESIGN REVIEW.
4669.76 4678.44 "Игорь Лабутин" Это митинг регулярный, который проходит в раз, по-моему, в неделю они это делают, мне кажется.
4678.44 4679.44 "Игорь Лабутин" Может быть чаще.
4679.44 4683.76 "Игорь Лабутин" Но по крайней мере на ютубах я вроде вижу это раз в неделю, они стримят это в лайве.
4683.76 4694.48 "Игорь Лабутин" Можно посидеть, посмотреть эти полтора-два часа видео, или потом записи, посмотреть как команда .NET, .NET рантайма, обсуждает все эти проподлы.
4694.48 4705.48 "Игорь Лабутин" Конечно, на этом митинге уже собираются, ну, большие умные дяди из команды рантайма и BCL, и обсуждают, как это все будет вместе жить и работать.
4705.48 4710.04 "Игорь Лабутин" На них частенько приглашаются, понятное дело, какие-то спецы.
4710.04 4719.96 "Игорь Лабутин" То есть если это, не знаю, какая-нибудь специфичная фича рантайма, которая нужна конкретно для поддержки Мауи, например.
4719.96 4721.52 "Игорь Лабутин" Ну, я не знаю, сейчас придумываю из головы.
4721.52 4725.24 "Игорь Лабутин" Наверное, пригласят, конечно, кого-то из юайщиков или Мауи.
4725.24 4742.28 "Игорь Лабутин" Но в среднем там основной костяк, это, я так понимаю, что большие принципылые сеньоры из команды рантайма, которые достаточно хорошо знают .NET, чтобы помнить все со звездочкой взаимодействия и фич, которые могут повлиять на этот новый дизайн.
4742.28 4743.40 "Игорь Лабутин" Все это обсуждается.
4743.40 4748.40 "Игорь Лабутин" В принципе, вы можете покомментить даже на ютубе во время обсуждения, иногда это даже учитывается.
4748.40 4750.68 "Игорь Лабутин" Но в основном это все-таки их внутреннее обсуждение.
4750.68 4764.40 "Игорь Лабутин" Что, как, насколько все понятно, насколько все, так сказать, прямолинейно, можно просто брать и делать, где там еще куча обсуждений нужна или еще 20 группов концептов.
4764.40 4779.68 "Игорь Лабутин" В результате, да, и во время митинга кто-то один всегда как бы за этот дизайн, ну а остальные могут быть там как-то против, либо искать какие-то контраргументы, либо наоборот, искать какие-то, ну, не знаю, недочеты.
4779.68 4781.76 "Игорь Лабутин" Но кто-то один всегда именно представляет.
4781.76 4782.76 "Игорь Лабутин" Причем это не обязательно автор.
4782.76 4788.08 "Игорь Лабутин" То есть просто кто-то на митинге выбирается тем, кто вот он, я буду представлять дизайн, он его детально изучает.
4788.08 4798.40 "Игорь Лабутин" Одним из вариантов окончания этой дискуссии может быть, что ну надо еще подумать, что-то изучить, что-то сделать, еще написать несколько профов концептов.
4798.40 4812.44 "Игорь Лабутин" Возможно, нужно вообще выкинуть дизайн, потому что он там идет в разрез вообще с основополагающими идеями дотнета, и мы не сможем его реализовать в том виде, в котором он представлен, потому что это конфликтует с какой-нибудь другой фичей, очень важно, и мы ее не можем выкинуть.
4812.44 4823.08 "Игорь Лабутин" И вообще, я смотрел один или два таких митингов всего, но вот мне, в тех, когда я попадал, там по-моему половина митинга, это обсуждалось вопрос обратной совместимости.
4823.08 4833.00 "Игорь Лабутин" А если мы это сделаем, как мы будем жить дальше с учетом, что мы еще планируем сделать вот то, то, то и то, а эту штуку тоже надо будет поддерживать?
4833.00 4841.44 "Игорь Лабутин" Или если мы сделаем такую штуку, как же мы будем поддерживать там не знаю, какой-нибудь старенький, каварианность, чего-нибудь, потому что эта штука идет в разрез с ней?
4841.44 4846.48 "Игорь Лабутин" Ну то есть вот вопрос обратной совместимости, он по-моему чуть не самый важный.
4846.48 4869.00 "Игорь Лабутин" Все заметки, то есть если вы не хотите смотреть длинные видосики, по каждому из этих дизайнов есть текстовые заметки, то есть по результатам этих видосиков, линк на запись кладется в GitHub.ish, и если были какие-то существенные заметки, там надо доработать, или поговорили, пришли к таким-то мыслям, надо будет еще подумать, все это пишется в GitHub.ish для, так сказать, запоминания и чтения.
4869.00 4873.20 "Игорь Лабутин" И этот процесс может итеративно повторяться много раз.
4873.20 4884.24 "Игорь Лабутин" Некоторые дизайны обсуждались, не знаю, 5, 6, 8 раз на разных митингах в течение нескольких лет, можно сказать, если не месяцев, если не лет.
4884.24 4903.60 "Игорь Лабутин" Но рано или поздно, если фича достойна того, чтобы быть заимплеменченной, она доходит до фазы pull requests, ну тут уже все, так сказать, неинтересно, создаются бранч, девелоперы или несколько девелоперов начинают все это разрабатывать, разрабатывают, возможно берут за основу профоконцепт, который был, возможно не берут его, пишут просто заново.
4903.60 4920.08 "Игорь Лабутин" Дальше это все еще раз ревьюется уже в формате pull requests, причем ревьюется, как обычно, всей командой, ну не всей командой runtime, а командой runtime, релевантными людьми, ну и мержится, собственно, в мастер-бранч, обновляется документация, вот это все.
4920.08 4922.16 "Игорь Лабутин" Эта часть уже не очень интересна.
4922.16 4945.96 "Игорь Лабутин" Ну вот примерно так, то есть фактически для фичи, которая в разработке может занять не так много времени, возможно фичу вы делаете, не знаю, неделю, вы потратите перед этим, возможно, не меньше недели на написание проповзла, мне кажется, иногда я вижу такие дизайн проповзла, что там видно, что очень много времени потрачено в правильное написание, нужно же продумать API, продумать все.
4945.96 4950.80 "Игорь Лабутин" Ну и потом еще, возможно, несколько недель будете обсуждать, как это все сделать.
4950.80 4957.56 "Игорь Лабутин" Но это цена добавления фичи в runtime, конечно же, откуда их потом практически невозможно убрать.
4957.56 4959.84 "Анатолий Кулаков" А как решается, кто ее будет делать?
4959.84 4974.84 "Анатолий Кулаков" Допустим, решила команда, что какую-то фичу мы хотим, давайте ее сделаем, но у нас же есть возможность отдать это на комьюнити, или может быть даже тому человеку, который эту фичу предложил, наверняка он может быть сильно заинтересован, а можно отдать кому-то внутри команды.
4974.84 4977.04 "Анатолий Кулаков" И вот как этот баланс встраивается?
4977.04 4982.36 "Игорь Лабутин" Тут, честно говоря, я не знаю никаких внутренностей того, как это планируется.
4982.36 4997.28 "Игорь Лабутин" Предполагаю, что дефолтное поведение дать автору проповзла, потому что он это все продумал, у него в голове есть модель, как это должно работать, и если в результате обсуждений все не сильно поменялось, то это все прекрасно, продолжаем, пусть он и делает.
4997.28 5002.72 "Игорь Лабутин" Ну а если не он, то я вообще не очень представляю, как делится нагрузка внутри команды.
5002.72 5006.84 "Игорь Лабутин" То есть они не такая большая, команда рентайма, сколько там?
5006.84 5011.48 "Игорь Лабутин" У меня почему-то в голове 20, 20, наверное, мало, человек 40 там, наверное, в команде рентайма.
5011.48 5022.64 "Игорь Лабутин" Но надо понимать, что там часть из них это в GT, часть из них, собственно, в BCL, часть из них непосредственно там в каких-нибудь более узкоспециализированных областях.
5022.64 5026.52 "Игорь Лабутин" И поэтому как-то выбирается тут уж.
5026.52 5028.20 "Игорь Лабутин" Нигде не видел этой информации.
5028.20 5034.60 "Анатолий Кулаков" Ну и тут же нельзя забывать, что одна из их задач – это все-таки построение экосистемы и сообщества.
5034.60 5046.56 "Анатолий Кулаков" Поэтому наверняка должен быть какой-то там период или какой-то процесс, где люди со стороны могут взять этот пропозл и как-нибудь заимплементировать или приложить руку к документации, к тестам, еще куда-нибудь.
5046.56 5049.64 "Анатолий Кулаков" Причем вряд ли они должны просто все хватать и сразу сами делать.
5049.64 5050.64 "Игорь Лабутин" Нет, нет, нет.
5050.64 5051.64 "Игорь Лабутин" Конечно, какой-то хук здесь должен быть.
5051.64 5052.64 "Игорь Лабутин" Конечно, конечно.
5052.64 5056.08 "Игорь Лабутин" У комьюнити точно есть возможность в этом поучаствовать.
5056.08 5064.12 "Игорь Лабутин" Я так понимаю, что есть ряд фич, ну, возьмем, например, не знаю, спаны, которые очевидно в комьюнити не отдадут.
5064.12 5078.56 "Игорь Лабутин" Просто потому, что это требует некоторой координации команды рентайма, команды GT, команды не знаю кого еще, асп.нета того же, ну то есть некоторой внутри микрософтовской коммуникации.
5078.56 5088.80 "Игорь Лабутин" Мы помним, да, что спана это была, по-моему, как там говорили, первая фича после дженериков, которая потребовала изменения в огромной куче мест.
5088.80 5093.40 "Игорь Лабутин" Да, и в плюсовом коде рентайма, и в BCL, и в асп.нете и так далее, чтобы все это заработало.
5093.40 5094.40 "Игорь Лабутин" А, или рефы.
5094.40 5096.40 "Игорь Лабутин" Нет, не спаны, а рефы, да.
5096.40 5097.40 "Игорь Лабутин" Че-то одно из них.
5097.40 5098.40 "Игорь Лабутин" Вот.
5098.40 5100.40 "Игорь Лабутин" Понятно, что такую фичу не отдадут.
5100.40 5112.08 "Игорь Лабутин" А более простые фичи вполне спокойно отдают, и они висят в GitHub в issues с пометочкой соответствующей, ну, с label.
5112.08 5117.52 "Игорь Лабутин" Вряд ли на них повешено какой-нибудь good first issue, но for grabs на нее вполне можно повесить.
5117.52 5129.80 "Игорь Лабутин" Ну а дальше, если никто не забрал в течение какого-то разумного времени, но видимо у них есть какой-то план по тому, что должно войти в релиз, дальше успели,
5129.80 5133.60 None замечательно, впишем в релиз. Не успели, ну значит не успели.
5133.60 5134.80 "Игорь Лабутин" Как-то так получается.
5134.80 5145.52 "Игорь Лабутин" Возможно мы, если узнаем что-то еще более интересное про процесс дизайна и так далее, сможем поделиться попозже, но пока это все, что мы знаем.
5145.52 5151.52 "Игорь Лабутин" И на этом на сегодня у нас все из новостей.
5151.52 5154.60 "Игорь Лабутин" Мы посмотрели на то, как прошел Microsoft Build.
5154.60 5160.52 "Игорь Лабутин" Он прошел прекрасно, он занял 3 дня, но для дотлендер-заработчиков там было практически ничего.
5160.52 5166.80 "Игорь Лабутин" Мы узнали, чего нового завезли в седьмой дотлендер с точки зрения регулярных выражений и обработки их.
5166.80 5183.96 "Игорь Лабутин" Наконец-таки зарелизился дотлендер Maui, и несмотря на то, что там нужна превьюшная версия студия, все-таки все прекрасно и кажется, что кроссплатформенный UI может похвастаться еще одним фреймворком, который готов для работы.
5183.96 5190.20 "Игорь Лабутин" Посмотрим, как он будет использоваться дальше различными компаниями и приложениями.
5190.20 5195.32 "Игорь Лабутин" Visual Studio 2022 for Mac вышла, тоже General Availability.
5195.32 5207.84 "Игорь Лабутин" Unity собирается потихонечку переезжать на современную версию .NET C# и как-то более интегрироваться в нашу общую экосистему.
5207.84 5222.92 "Игорь Лабутин" Посмотрели на стандартный набор тулов, которые .NET C# считает важными и необходимыми для диагностики, которые ставятся как global тулы или не обязательно global, доступные к command-line.
5222.92 5232.12 "Игорь Лабутин" Глянули отдельный command-line тул от Александра Мютола про релизы, сборки, пуши и так далее, .NET Releaser.
5232.12 5238.40 "Игорь Лабутин" И посмотрели на взгляд со стороны, как же дизайнятся .NET API в рантайме VPCL.
5238.40 5241.40 "Игорь Лабутин" И на этом все.
5241.40 5245.44 "Анатолий Кулаков" Да, хорошо поговорили, вполне объемненький и хорошенький выпуск получается.
5245.44 5247.16 "Анатолий Кулаков" Ну на этом давай закругляться.
5247.16 5252.28 "Анатолий Кулаков" Друзья, пшары, репосты, колокольчики, жмакайте нам везде, где только найдете.
5252.28 5255.20 "Анатолий Кулаков" Ждем ваших комментариев в YouTube.
5255.20 5262.36 "Анатолий Кулаков" Заходите на наш сайт на Boosty, там недавно вышел хороший выпуск про крипту, можно послушать.
5262.36 5266.00 "Анатолий Кулаков" Ну и до новых встреч, всем счастливо, всем пока.
5266.00 5266.68 "Игорь Лабутин" Всем пока.
5266.68 5277.04 None [музыка]
