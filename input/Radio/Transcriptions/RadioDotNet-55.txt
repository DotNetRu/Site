0.00 7.88 "Анатолий Кулаков" Здравствуйте, дорогие друзья!
7.88 11.84 "Анатолий Кулаков" В эфире Радио.нет и 55 выпуск.
11.84 15.96 "Анатолий Кулаков" Сегодня в студии будут Анатолий Кулаков и Игорь Лабутин.
15.96 16.96 "Анатолий Кулаков" Всем привет!
16.96 23.12 "Анатолий Кулаков" Приветствуем вас и хотим первонаперво поблагодарить наших замечательных спонсоров.
23.12 27.64 "Анатолий Кулаков" Александр, Сергей, Владислав, Алексей, Шевченко, Антон, Илья, Гурий, Самарин.
27.64 29.52 "Анатолий Кулаков" Спасибо большое, друзья, что нас поддерживаете.
29.52 46.04 "Анатолий Кулаков" А если кто-то не знает, про что мы, то заглядывайте на Boosty, там собралась отличная компания, которая в меру своих возможностей и желания может отблагодарить наш подкаст за его непрерываемую и новостную, и интересную деятельность.
46.04 50.04 "Анатолий Кулаков" Ну что ж, давай быстренько к делу.
50.04 51.04 "Анатолий Кулаков" Начнем с новостей.
51.04 53.16 "Анатолий Кулаков" Что нам сегодня приготовил Microsoft?
53.16 56.96 "Игорь Лабутин" Microsoft весь в отпусках, поэтому особо новостей нет.
56.96 62.20 "Игорь Лабутин" Так какие-то мелочи проявляются, но тем не менее кое-что нашлось.
62.20 67.88 "Игорь Лабутин" Мы относительно недавно рассказывали про то, что вышел Core WCF 1.0.
67.88 74.52 "Игорь Лабутин" Если вы зачем-то хотите использовать WCF на современном .NET, то вот как раз пакет Core WCF.
74.52 76.36 "Игорь Лабутин" Это то, что нужно.
76.36 81.76 "Игорь Лабутин" Вы можете его использовать, он поддерживает часть фич полноценного WCF, но далеко не все.
81.76 93.20 "Игорь Лабутин" И вот в апреле был релиз 1.0, сейчас вышел релиз 1.1, причем большая часть изменений была заимплеменчена комьюнити, то есть не основной командой, а внешними контрибьюторами.
93.20 96.52 "Игорь Лабутин" Среди того, чего заимплементили, есть новые фичи.
96.52 102.44 "Игорь Лабутин" Это, во-первых, поддержка impersonation, если вы используете транспорт, секьюрити поверх HTTP протокола.
102.44 107.88 "Игорь Лабутин" Также, если вы используете WebHTTP binding, то вы можете генерить свагерфайл.
107.88 118.72 "Игорь Лабутин" Это было уже сделано в 1.0, насколько я понимаю, но теперь добавили API, чтобы можно было модифицировать сгенеренный этот свагерфайл, добавляя, видимо, в него какие-то там кастомные штуки.
118.72 132.56 "Игорь Лабутин" И если вам зачем-то нужен был классик X.509 certificate claim set, а по моей старой памяти, по-моему, он WCF-е периодически пригодается, то он теперь паблик, и можете его использовать.
132.56 140.04 "Игорь Лабутин" Но это все такие довольно нишевые фичи, если так можно сказать относительно WCF, который сам по себе очень нишевый.
140.04 145.68 "Игорь Лабутин" Но есть одна штука, которая прям, ну, очень полезна, если вы вдруг зачем-то этот WCF используете.
145.68 147.48 "Игорь Лабутин" Теперь есть новый project template.
147.48 159.08 "Игорь Лабутин" То есть вы теперь сначала заинсталите через команду .NET new install core-wcf.templates, и после этого у вас появятся новые темплейты.
159.08 167.72 "Игорь Лабутин" Во-первых, вы сможете теперь из command-line создавать новые проекты через .NET new core-wcf, либо у вас появятся визарды в Visual Studio.
167.72 183.40 "Игорь Лабутин" В консольном варианте у вас, соответственно, есть опции выбрать target framework, можно отказаться от поддержки ашт-тпс, можно отказаться от нового global, как это сейчас правильно называется, когда мейна нету, короче.
183.40 185.40 "Анатолий Кулаков" Minimal API, может, это аналитика.
185.40 190.04 "Игорь Лабутин" Ну, minimal API - это про то, что не надо стартап писать, а это, короче, когда мейна нету.
190.04 198.68 "Игорь Лабутин" Вот можно опции контролировать, use program main или не нужно program main, и есть одна специфическая WCF-опция - это no WSDL.
198.68 205.68 "Игорь Лабутин" То есть, если вам не нужны WSDL-эндпойнты, то можно указать эту опцию, они не будут генериться.
205.68 223.04 "Игорь Лабутин" При этом, несмотря на то, что этот проект, он такой немножко сторонник Microsoft, то есть он вроде как был заанонсирован, что он будет поддерживаться комьюнити и все такое, Microsoft все-таки, видимо, решил, что WCF - достаточно важная штука, и поэтому она обеспечивает свою собственную поддержку.
223.04 226.72 "Игорь Лабутин" Причем, вот сейчас вышла версия 1.1, то есть она будет поддерживаться дальше.
226.72 236.28 "Игорь Лабутин" При этом, версия 1.0 не снимается с поддержки, она будет поддерживаться еще официально Microsoft в течение 6 месяцев, то есть туда будут какие-нибудь security-патчи, если нужны, и так далее, выходить.
236.28 242.96 "Игорь Лабутин" То есть, до декабря этого года, до конца декабря там практически, по-моему, 29 или 30 заканчивается поддержка.
242.96 252.52 "Игорь Лабутин" Так что, если вы пользуетесь Core WCF и вам апгрейдитесь на новую версию, если не пользуетесь, но зачем-то вам вдруг нужен WCF, ну подумайте, это, возможно, то, что вам
252.52 257.20 "Анатолий Кулаков" нужно. Если не пользуетесь, то зачем вы захотите им воспользоваться,
257.20 261.24 "Игорь Лабутин" интересно. Ну, случаи разные бывают, знаешь, по старой памяти
261.24 277.12 "Анатолий Кулаков" вспомнить былое. Да, да, наверное, кейсы интересны посмотреть, но насколько я понимаю, что Core WCF - это все-таки вещь, которая нужна тем, кто слезть быстро не сможет со старого фреймворка, и поэтому в качестве адаптера вот они ее выпустили и поддерживают.
277.12 282.96 "Анатолий Кулаков" То есть даже не адаптера такого, а какие-нибудь заглушки в надежде на то, что вы когда-то с нее слезете.
282.96 314.28 "Игорь Лабутин" Ну да, чтобы вы могли перенести ваш проект на современный .NET и придется, возможно, вам ограничить это только каким-то сабсетом того, что вы поддерживаете в WCF, потому что не все байдинги поддержаны, не все протоколы поддержаны, но в целом для большинства популярных применений, насколько я понимаю, поддержка есть, потому что поскольку проект изначально драйвился комьюнити, как я понимаю, то и набор фич он определялся двумя вещами.
314.28 318.68 "Игорь Лабутин" Во-первых, максимальной популярностью, так скажем, то есть максимальной частотой использования.
318.68 333.76 "Игорь Лабутин" Ну а второе, конечно, возможностью кроссплатформенной реализации, потому что Core WCF - это кроссплатформенная штука, а некоторые WCF-фичи были, ну, очень сильно завязаны на внутренности винды, и поэтому пришлось их пока выпилить, и там есть некоторые...
333.76 363.08 "Игорь Лабутин" Я наталкивался на самом деле на обсуждение, когда мне нужно было поддержать WCF на какой-то из новых дотнетов, а мы использовали байдинг, который сейчас не поддержан, или не байдинг, ну в общем, какую-то штуку мы использовали, которая сейчас не поддержана, и в вышлиссах было написано, что как бы, ну, мол, мы можем сделать, но там настолько все завязано на внутреннюю логику и там какой-то, по-моему, криптоапи винды, что это будет Windows Only только, а как это написать в общем виде, пока что-то типа не придумалось.
363.08 370.60 "Игорь Лабутин" Вот, поэтому если что-то такое найдете и знаете, как такое написать, приходите к ним, они будут рады.
370.60 379.12 "Анатолий Кулаков" Интересно вообще посмотреть бы статистику, сколько людей продолжили пользоваться, сколько людей начали вдруг внезапно пользоваться, и как вообще, насколько популярен этот проект.
379.12 382.64 "Анатолий Кулаков" Наверное, не знаю, есть ли у них какой-то способ собирать такие метрики или нет.
382.64 387.48 "Игорь Лабутин" Слушай, а нельзя посмотреть...
387.48 389.00 "Игорь Лабутин" Мне кажется, у GitHub'а был...
389.00 397.88 "Игорь Лабутин" Нет, не у GitHub'а, у Nuget'а была возможность посмотреть у кого этот пакет в зависимостях, ну хотя бы, хоть что-то.
397.88 400.28 "Игорь Лабутин" Хотя бы в публичных, ты имеешь в виду.
400.28 401.28 "Игорь Лабутин" Да, да, да, конечно.
401.28 403.32 "Игорь Лабутин" Ну в смысле, в Nuget пакетах, да.
403.32 417.68 "Игорь Лабутин" А второе, на GitHub'е нельзя просто поискать каким-нибудь сёрчем, где используется core.wcf, ну, по имени пакет, и опять же, это все паблик, понятно, что ты не увидишь private репозиториев никак.
417.68 428.96 "Анатолий Кулаков" Мне кажется, вообще, DubCF — это целевая аудитория, интерпрайс жестокий, закрытый и все такое, поэтому все-таки большинство пакетов должно где-то внутри интерпрайза закачиваться.
428.96 433.08 "Анатолий Кулаков" Мне кажется, хороший будет показатель — это количество скачиваний в Nuget пакетов.
433.08 435.72 "Игорь Лабутин" Ну, кстати, да, вот это, наверное, будет действительно.
435.72 438.72 "Игорь Лабутин" Хотя, блин, они интерпрайзами кэшируются потом, и все.
438.72 443.80 "Анатолий Кулаков" Да, да, относительно хорошие, безусловно, что любой нормальный интерпрайс кэширует пакеты.
443.80 445.28 "Анатолий Кулаков" Ну ладно, пойдем дальше.
445.28 458.60 "Анатолий Кулаков" Я тоже достал небольшую новость от Microsoft'а, все-таки он что-то выдает на своих летних каникулах, и в частности была выпущена новая версия Tools-ы, которая называется Incremental ISPnet Migration Tool.
458.60 464.52 "Анатолий Кулаков" А уже в названии авторы попытались раскрыть абсолютно все, для чего она нужна.
464.52 473.16 "Анатолий Кулаков" Вы не ошиблитесь, это мигратор, который позволяет вам мигрировать ваши старые проекты на ISPnet на новую платформу ISPnet Core.
473.16 489.52 "Анатолий Кулаков" Ни для кого не секрет, что очень много изменений претерпел этот фреймворк, в частности, изменился полностью подход с HTTP-контекстом, ушли сессии, немножко изменилась аутентификация и много-много всего помелочного.
489.52 494.92 "Анатолий Кулаков" То есть просто так взять, перекомпилировать ваш старый ISPnet проект абсолютно не получится.
494.92 500.48 "Анатолий Кулаков" Вот ребята собрались и сделали как раз-таки инструмент, который помогает вам в миграции.
500.48 508.12 "Анатолий Кулаков" Сейчас Microsoft выпустила уже второй превью этой штуки, а инструмент такой довольно многоплановый.
508.12 519.00 "Анатолий Кулаков" В частности, он состоит из Extension SQL Studio и кучи разных NuGet пакетов, библиотек, адаптеров, которые помогают вам каким-то образом мигрировать ваше приложение.
519.00 526.00 "Анатолий Кулаков" Из интересного, это стратегия, которую они выбрали, стратегия называется Strangelfig.
526.00 529.32 "Анатолий Кулаков" Это переводится как по типу фикус-душитель.
529.32 542.24 "Анатолий Кулаков" По сущности, ставится некий фасад над вашим проектом, над вашим API, и все запросы, которые приходят к вашему приложению, сначала прежде всего обрабатываются этим фасадом.
542.24 548.32 "Анатолий Кулаков" И уже фасад решает, а куда эти запросы заредиректить – в старый проект или в новый проект.
548.32 563.80 "Анатолий Кулаков" Таким образом, когда вы только начинаете вашу миграцию, все запросы абсолютно идут в старый проект, и вы полностью получаете совместимость с вашей старой версией, и ничего не теряете, абсолютно ничего не ломается, все хорошо.
563.80 581.68 "Анатолий Кулаков" После этого вы начинаете в новый проект, который до поры до времени был пустым, немножко добавлять новую логику, то есть переносить логику из старого проекта в новый, и переключать на вот этом фасаде, который принимает все запросы, переключать некие роуты на новый фреймворк.
581.68 596.76 "Анатолий Кулаков" И таким образом у вас параллельно существуют и старый, и новый, какие-то запросы идут на старый, какие-то запросы идут на новый, и постепенно-постепенно переносите всю логику, которую у вас есть в старом проекте, в новый проект, постепенно переносите все, что у вас там накопилось, все, что у вас там есть.
596.76 603.44 "Анатолий Кулаков" И со временем у вас остается новый, красивый, большой проект со всеми перенесенными вашими логиками.
603.44 608.64 "Анатолий Кулаков" Старый проект в этот момент уже должен иссякнуть, истощиться, и его можно удалить.
608.64 616.08 "Анатолий Кулаков" После удаления старого проекта, естественно, фигусе-душителей тоже никакой необходимости нет, фасад тоже можно безбоязненно удалить.
616.08 619.68 "Анатолий Кулаков" Вот по такому пути и идет этот инструмент.
619.68 636.52 "Анатолий Кулаков" В частности, у него есть Extension Visual Studio, который помогает вам создать вот этот новый проект, который помогает настроить правильные редиректы, правильные роутинги, разбираться и переносить ту логику, которая существует уже в ваших больших старых Legacy проектах.
636.52 649.80 "Анатолий Кулаков" В первой превью поддержали множество кейсов, методов, классов, которые работают со HTTP-контекстом и сессиями в старом фреймворке.
649.80 653.76 "Анатолий Кулаков" Подход абсолютно изменился, то есть авторы переписали абсолютно все.
653.76 659.76 "Анатолий Кулаков" У нас там, в частности, больше нет синхронизации контекста, сессий вообще нет как таковых.
659.76 670.68 "Анатолий Кулаков" И старые проекты на ASP.NET Core были известны тем, что как раз таки ссылались на огромную, страшную, медленную библиотеку, которая называлась System Web.
670.68 675.64 "Анатолий Кулаков" В Core, естественно, никакого System Web нет, там все модульно, красиво, разбито.
675.64 684.84 "Анатолий Кулаков" И для того, чтобы каким-то образом эту логику поддержать, Microsoft даже выпустил специальную библиотеку, которая называется ASP.NET Core System Web Adapters.
684.84 695.08 "Анатолий Кулаков" Как уже понятно по названиям, она помогает все те запросы, которые раньше ходили в System Web, каким-то образом адаптировать, переделать и пустить на новые ASP.NET Core рельсы.
695.08 707.00 "Анатолий Кулаков" Соответственно, у нас еще в новой, второй превьюшке вышло дополнение, которое позволяет вам безболезненно переделать аутентификацию.
707.00 714.64 "Анатолий Кулаков" С аутентификацией там тоже претерпелись большие изменения, в частности, в очень мелких деталях, может быть, в очень незначительных.
714.64 756.64 "Анатолий Кулаков" Некоторые аспекты значительные, в принципе, не вижу никакого смысла рассказывать про эти мелочи, просто знайте, что если у вас есть старый ASP.NET проект, то существует такой интересный инструмент, который сейчас, в принципе, на ранней стадии, но довольно бодренько развивается, и он open source, поэтому все вот эти адаптеры, которых там не хватает, комьюнити активно допиливает, и есть шанс, что из этого получится довольно хороший и интересный мигратор, который поможет ваши старые существующие API, которыми кишит ваше старое приложение, перенести на новое и постепенно таким образом переехать на стабильный, красивый, быстрый .NET Core, не оставаясь на старом большом фреймворке.
756.64 766.92 "Игорь Лабутин" Мне вот только интересно, насколько вообще легко в таком среднестатистическом приложении перенаправлять, допустим, только часть запросов.
766.92 793.76 "Игорь Лабутин" Мне просто кажется, что это, может быть, конечно, зависит от частоты написания приложения, но я не уверен, что, допустим, в моем приложении так легко получится половину запросов отправить вообще, по сути, в другой проект, в другой pipeline, относительно никак не связанный с основным pipeline, или подразумевается, что они потом там где-то далеко в глубине, в какой-нибудь общий сервис, общий репозиторий
793.76 808.36 "Анатолий Кулаков" таки придут? Ну, подразумевается, что у тебя все-таки бизнес-логика общая, и у тебя общие DLL, и поэтому единственное, для чего нужна SPNET Framework, это все-таки сделать вот этот pipeline с middleware, авторизациями, error handling и вот этим всем.
808.36 821.72 "Анатолий Кулаков" Поэтому все твои контроллеры, по теоретически, должны только мапить входящие объекты в какие-нибудь бизнес-объекты, делать элементарную валидацию и отправлять в бизнес-слой, бизнес-логику, бизнес-обработку, а она для обоих этих проектов общая.
821.72 824.04 "Игорь Лабутин" Ну, тогда да, тогда, по идее, получится.
824.04 838.64 "Игорь Лабутин" Ну, и, скорее всего, вы вряд ли будете перенаправлять по одному методу, то есть это все-таки будут какие-то группы контроль, целый класс контроллера, либо, может быть, даже группа контроллеров, относящихся к общей функциональности, бизнес-функциональности.
838.64 845.16 "Анатолий Кулаков" Ну, скорее всего, да, потому что странно, наверное, юзера создавать в одном проекте, а редактировать его, допустим, в другом проекте.
845.16 849.48 "Анатолий Кулаков" У вас могут разойтись и правила валидации, и аутентификации, и все подряд вообще.
849.48 856.16 "Игорь Лабутин" Там еще что-нибудь закешировано где-нибудь в каком-нибудь memory cache в одном проекте, в другом проекте не обновиться?
856.16 857.16 "Анатолий Кулаков" Да, да.
857.16 865.84 "Анатолий Кулаков" И, в принципе, мы снова упираемся в то, что делать грамотную инфраструктуру, хорошо продумывать заранее архитектуру и разбиение проектов – это всегда полезно и хорошо.
865.84 881.04 "Анатолий Кулаков" Потому что если вы писали всю бизнес-логику в контроллерах, если вы писали абсолютно все обработчики и валидации, и сохранение, может быть, даже сразу в базу в контроллерах, то этот фреймворк вам не поможет.
881.04 889.64 "Анатолий Кулаков" Наверное, уже никакой фреймворк вам не поможет, поможет только большое чтение книг и, не знаю, удар по рукам каленой кочергой.
889.64 893.64 "Игорь Лабутин" Ну, да, не делайте так, лучше пишите хорошо.
893.64 894.64 "Игорь Лабутин" Давай пойдем дальше.
894.64 901.36 "Игорь Лабутин" Слушай, я вижу в темах у нас dotnet framework, но не совсем framework.
901.36 907.64 "Анатолий Кулаков" Не тот фреймворк, о котором вы все подумали, и даже не тот core framework, о котором вы все подумали.
907.64 909.56 "Анатолий Кулаков" Очередной nano framework.
909.56 917.52 "Анатолий Кулаков" Да, интересная статья вышла, которая… Я случайно наткнулся, она рассказывает про dotnet nano framework.
917.52 925.60 "Анатолий Кулаков" И основная мысль, основная причина, почему эта статья сегодня в нашем эфире – это потому, что я был удивлен, что он до сих пор жив.
925.60 929.20 "Анатолий Кулаков" Я о nano framework слышал только, когда он зарождался.
929.20 936.76 "Анатолий Кулаков" В принципе, потыкал, посмотрел и как-то не сошлись у нас с ним дороги по жизни, поэтому я про него забыл.
936.76 945.04 "Анатолий Кулаков" И вот сейчас на хабре была встречена у меня статья, которая радостно сообщает, что у него там все хорошо, он развивается, растет.
945.04 953.00 "Анатолий Кулаков" И я предлагаю нашим слушателям тоже познакомиться и узнать поближе о том, что в нашей экосистеме существуют такие прекрасные вещи.
953.00 957.32 "Анатолий Кулаков" И вообще посмотреть, как он сейчас живет.
957.32 964.76 "Анатолий Кулаков" Для тех, кто не знает, dotnet nano framework – это свободный open source платформа, которая доступна всем на гитхабе.
964.76 979.92 "Анатолий Кулаков" Это платформа для embedded вещей, то есть у нее есть очень много всяких драйверов, которые позволяют писать вам программы для интернету, things, сенсоров, на всяких носимых устройств, академических proof и концептов, писать маленьких роботов.
979.92 992.76 "Анатолий Кулаков" В общем, вот это вся низкоуровневая штука, которая позволяет оживить железо без операционной системы, с минимум оперативки, может быть даже без постоянного storage.
992.76 999.12 "Анатолий Кулаков" Короче, очень-очень низкоуровневая штука, которая работает вообще без операционной системы.
999.12 1002.28 "Анатолий Кулаков" И dotnet тоже там живет и здравствует.
1002.28 1022.56 "Анатолий Кулаков" Как утверждают авторы, платформа прошла пятилетнюю эволюцию и превратилась из малоизвестного проекта в очень успешное open source решение, которое в том числе имеет коммерческую поддержку и существует очень много коммерческих компаний, которые выливают бабло в эту индустрию именно касательно dotnet, что не может не радовать.
1022.56 1027.68 "Анатолий Кулаков" Эволюция в EDH тоже претерпела существенные изменения.
1027.68 1035.40 "Анатолий Кулаков" Если раньше мы обязаны были сидеть на Windows Visual Studio, то теперь основным инструментом разработки является Visual Studio Code.
1035.40 1043.92 "Анатолий Кулаков" Для нее есть специальный extension, который позволяет вам приятно себя чувствовать на всех операционных системах, Mac, Linux и Windows без всяких проблем.
1043.92 1048.48 "Анатолий Кулаков" Единственное, что вам нужно это поставить dotnet 6, его инструмент toolset.
1048.48 1059.00 "Анатолий Кулаков" Я правда не знаю, какой синтаксис поддерживается внутри самого проекта, но если вы ставите dotnet 6 SDK, то возможно, что все последние фичи языка вам тоже доступны.
1059.00 1064.60 "Анатолий Кулаков" Безусловно, рантайм там свой, но скорее всего язык должен вполне нормально поддерживаться.
1064.60 1070.80 "Анатолий Кулаков" И в качестве хардварной поддержки у нее очень много возможностей.
1070.80 1079.48 "Анатолий Кулаков" В частности, возможно прошивать и развертывать приложения для процессоров ESP32, STM32, NXP и TI.
1079.48 1087.48 "Анатолий Кулаков" И там на сайте авторов тоже много разных других интересных железных терминов, в которых я ничего не понимаю, но выглядит довольно внушительно и впечатлительно.
1087.48 1092.96 "Анатолий Кулаков" Также проект разбил все драйверы к датчикам в виде отдельных Nuget пакетов.
1092.96 1097.32 "Анатолий Кулаков" Теперь их удобно можно скачивать с той гранулярности, которая вам нужна.
1097.32 1102.40 "Анатолий Кулаков" И насчет скачивания по Nuget, в прошлом году был достигнут миллион скачиваний.
1102.40 1104.56 "Анатолий Кулаков" Это за 5 лет миллион скачиваний.
1104.56 1106.72 "Анатолий Кулаков" Такая моральная более-менее победа.
1106.72 1113.12 "Анатолий Кулаков" Но второй миллион был всего лишь достигнут за 9 месяцев и там на графиках реальная экспонента.
1113.12 1119.88 "Анатолий Кулаков" То есть проект действительно растет взрывными волнами и очень популярен в узких кругах.
1119.88 1124.68 "Анатолий Кулаков" Как я уже сказал, новая версия развивается.
1124.68 1126.64 "Анатолий Кулаков" Там было принято много интересных решений.
1126.64 1131.68 "Анатолий Кулаков" В частности, приняли решение публиковать только стабильные версии прошивок и стабильные версии пакетов.
1131.68 1137.76 "Анатолий Кулаков" Поэтому все разработчики уже не ищут по закоулкам какие-то беты, патчи и все в этом духе.
1137.76 1144.04 "Анатолий Кулаков" А имеют довольно хорошую инфраструктуру с понятными стабильными релизными пакетами.
1144.04 1147.80 "Анатолий Кулаков" Очень много переписали документации.
1147.80 1150.40 "Анатолий Кулаков" В том числе создали отличные гайды для новичков.
1150.40 1160.88 "Анатолий Кулаков" Поэтому если вы никогда не пользовались этой штукой, но хотите легко вкатиться в железячный мир, и если вы уже знаете C#, то по идее у вас это должно занять просто минимум усилий.
1160.88 1165.88 "Анатолий Кулаков" Документация хорошая, большая, видеоролики, лекции, прям все как у взрослых, все есть.
1165.88 1172.20 "Анатолий Кулаков" Добавлена поддержка WebSockets и много разных другой мелочей, импрувментов и так далее.
1172.20 1179.88 "Анатолий Кулаков" Также автор дает кучу интересных ссылок на различные поделки, изобретения.
1179.88 1194.72 "Анатолий Кулаков" И в частности, в этой статье, ссылку на которую вы найдете в шоу-нотах, он рассматривает, каким образом подключить OLED-дисплей к контроллеру SSD 1306, как он дорабатывал драйвер под новую версию дисплея, и также как он написал сканер Wi-Fi сетей.
1194.72 1203.40 "Анатолий Кулаков" То есть у вас в карманчике может образоваться такой интересный ключик с маленьким OLED-дисплеем, который позволяет сканировать Wi-Fi сети вокруг вас.
1203.40 1206.80 "Анатолий Кулаков" Ну и может быть дальше что-то с ним делать.
1206.80 1215.72 "Анатолий Кулаков" Маленький, гибкий, интересный, с минимум затраты энергии и с минимум вообще стоимости, потому что все эти комплекты они довольно дешевые.
1215.72 1220.84 "Анатолий Кулаков" Вот такой интересный новый мир также параллельно развивается с Дотнетом, о котором мы не знали.
1220.84 1232.44 "Анатолий Кулаков" Если вы работаете в индустрии или у вас есть интересное что рассказать про Nano Framework, то напишите нам, может быть созвонимся и сделаем у вас небольшое интервью.
1232.44 1234.72 "Анатолий Кулаков" Возьмем, потому что область действительно новая.
1234.72 1248.00 "Анатолий Кулаков" Сколько мы конференций не делали, сколько мы митапов не делали по Дотнету, я не встречал ни одного специалиста, который мог бы внятно рассказать, что они там делают и какие подходы используют, какое оборудование там есть, что можно сделать, что нельзя сделать.
1248.00 1250.44 "Анатолий Кулаков" И мы можем рассказать об этой платформе.
1250.44 1251.44 "Анатолий Кулаков" Было бы очень интересно.
1251.44 1252.44 None Это точно.
1252.44 1270.92 "Игорь Лабутин" Для меня Дотнет Nano Framework это только название, я не знал про него вообще ничего, только слышал, потому что мое время работы с железом было давным-давно, когда Дотнет уже был, но еще не Nano, а самые первые версии фреймворка.
1270.92 1274.80 "Игорь Лабутин" Поэтому да, очень интересно, что с ним можно сделать.
1274.80 1278.60 "Игорь Лабутин" Ну и я так подозреваю, для всяких хобби-проектов вполне может подойти.
1278.60 1292.76 "Анатолий Кулаков" Да, потому что это довольно дешевая штука и можно накупить абсолютно любых запчастей, то есть автоматизировать себе все что угодно, от контроля температуры до автоматического поливания растений, всяких роботов для детей и море-море всего другого.
1292.76 1301.68 "Анатолий Кулаков" То есть это дешево и самое главное это мгновенный эффект, то есть вы возле себя видите какую-то непосредственную железку, которая выполняет ваши программы.
1301.68 1305.00 "Анатолий Кулаков" Это круче даже чем кликать на кнопочках на форуме.
1305.00 1309.28 "Анатолий Кулаков" Это реальный настоящий мир и ты можешь программировать что-то в реальном мире.
1309.28 1318.82 "Анатолий Кулаков" Мне кажется это должно быть увлекательно просто для всех абсолютно разработчиков, тем более язык вы уже знаете, инструмент наверняка вы тоже уже знаете, осталось дела за малым.
1318.82 1326.44 "Игорь Лабутин" Ну и хорошо, давай мы теперь пойдем дальше и все-таки немножко вернемся в наш основной дотнет.
1326.44 1337.24 "Игорь Лабутин" У нас есть очередная статья от Эндрю Лока и попробуем немножко закопаться в дебри того как устроен дотнет, как устроен Asp.Net Core точнее.
1337.24 1342.64 "Игорь Лабутин" У Эндрю есть такой пакет, он называется Microsoft Asp.Net Core Middleware Analysis.
1342.64 1357.00 "Игорь Лабутин" Этот Nouget пакет позволяет вам подключить некую специальную функциональность, которая позволит вам логировать либо еще как-то реагировать на все срабатывающие мидлевары в вашем Asp.Net Core приложении.
1357.00 1391.10 "Игорь Лабутин" Скорее всего вам это никак не нужно для продакшена, то есть эта штука вообще говоря была придумана исключительно для отсадочных целей, то есть чтобы понять в каком порядке у вас вызываются мидлевары, какие, ну возможно обработать какие-то штуки, залогировать например на входе или залогировать например результаты выполнения мидлевары, то есть например ретурн-код это что-то по контексту и таким образом узнать в какой момент у вас там ретурн-код становится 500 или кто ответственный за то исключение или кто ловит исключение, которое вы откуда-то выбрасываете, но потом почему-то оно там куда-то не доходит.
1391.10 1408.98 "Анатолий Кулаков" Ну на самом деле безумно полезная штука, я часто встречал такие особенно далекие, большие матерые интерпрайс проекты, в которых там десятки и десятки всяких кастомных написанных мидлеварий и честно признаться, что у Asp.Net Core не очень очевидная система в каком порядке они будут выполняться.
1408.98 1431.90 "Анатолий Кулаков" То есть безусловно есть практика, что как ты их зарегистрируешь, так они и будут, но не нужно забывать, что есть способы регистрировать вне этого пайплайна и какие-нибудь сторонние пакеты, там в частности Swagger или еще какие-нибудь такие вещи, инструменты, которые мега умные, они этот порядок успешно умеют как бы нивелировать и регистрировать себя абсолютно где угодно.
1431.90 1441.38 "Анатолий Кулаков" И после того, как вы десяток таких умных пакетов подключили и не понимаете, кто в каком порядке выполняется, то подобные инструменты были бы довольно нужны.
1441.38 1449.02 "Анатолий Кулаков" К сожалению, в мое время их не было, я пытался каким-то образом руками сам собрать эту информацию, с помощью рефлекшена, спичек и изоленты.
1449.02 1459.94 "Анатолий Кулаков" Это как-то получалось, но безусловно было бы полезнее иметь официальный какой-то инструмент, который красиво и нормально мог бы показать диагностическую всякую информацию, как например предложил Эндрю.
1459.94 1467.18 "Игорь Лабутин" Да, надо понимать, что есть еще не только огромное количество Middleware в вашем приложении, но оно может быть еще и втвиться.
1467.18 1471.62 "Игорь Лабутин" Middleware же умеет втвиться в какой-то момент в зависимости от разных условий.
1471.62 1481.86 "Игорь Лабутин" То есть например вы можете проанализировать содержимое что-то по контексту реквеста и решить, что сегодня вы будете выполнять эту Middleware, а по другим дням другую Middleware и пойдете по совсем другой ветке.
1481.86 1486.30 "Игорь Лабутин" И отлаживать такие сложные штуки, это прям ух.
1486.30 1496.30 "Игорь Лабутин" Так вот, собственно 5 лет назад примерно Эндрю написал этот самый пакетж и все было хорошо и работало прекрасно, пока не появился DotNet 6.
1496.30 1506.30 "Игорь Лабутин" А DotNet 6 его немножко сломал, потому что как раз потому что Microsoft это тот самый большой интерпрайзер и вот это все, то что ты говорил.
1506.30 1527.18 "Игорь Лабутин" И поэтому в текущем стандартном варианте приложения, когда вы создаете его для DotNet 6, без мейна, без стартапов, без всего такого, minimal API, к моменту, когда вы доходите до вашего кода, то есть когда вы говорите webapplicationbuilder.build, уже на самом деле по дефолту добавлено некоторое количество Middleware.
1527.18 1535.42 "Игорь Лабутин" Соответственно все ваши попытки добавить какой-то стартап фильтры, Middleware и так далее, они будут уже не первыми.
1535.42 1540.38 "Игорь Лабутин" То есть вы не можете встроиться в самое-самое-самое начало цепочки, чтобы логировать вообще все.
1540.38 1542.42 "Игорь Лабутин" Ну не можете на самом деле.
1542.42 1546.58 "Игорь Лабутин" И Эндрю как раз объясняет, как это нужно сделать.
1546.58 1550.10 "Игорь Лабутин" Значит внутри этот пакет использует Diagnostic Source.
1550.10 1557.42 "Игорь Лабутин" Diagnostic Source это такой механизм, который похож на логирование, но он никак не соотносится с iLogger.
1557.42 1563.74 "Игорь Лабутин" То есть наш стандартный Microsoft Abstractions логинг, который iLogger, там loginfo, logdebug, logerror и вот это все.
1563.74 1565.34 "Игорь Лабутин" Это полезный механизм.
1565.34 1568.62 "Игорь Лабутин" Но есть еще Diagnostic Source, он основан на совершенно других принципах.
1568.62 1582.90 "Игорь Лабутин" И если вам интересно, я вообще рекомендую в любом случае ознакомиться, в этой статье есть ссылка на очень подробную статью Эндрю, где он подробно разбирает, как он устроен, как подписываться, как генерить эти события и так далее.
1582.90 1587.54 "Игорь Лабутин" И вот как раз этот пакет является хорошим примером того, как он это использует.
1587.54 1598.82 "Анатолий Кулаков" Я бы еще добавил, что Diagnostic Source в отличие от iLogger, он призван порождать какие-то ивенты, какие-то события, месседжи, которые не все реализуемы.
1598.82 1606.22 "Анатолий Кулаков" То есть у него нет задачи все эти месседжи отправить куда-нибудь вне вашего приложения, там сложить в ELK или записать в SIG.
1606.22 1610.66 "Анатолий Кулаков" Это именно те месседжи, которые будут потребляться внутри вашего аппликейшена.
1610.66 1612.70 "Анатолий Кулаков" Вот в частности, как в данном примере.
1612.70 1623.66 "Игорь Лабутин" Да, и это позволяет, например, в сообщении про то, что Middleware сейчас стартует, иметь полноценный доступ к полноценному HTTP-контексту, куда вы можете заглянуть и решить, что вы с ним делаете.
1623.66 1626.98 "Игорь Лабутин" Или, например, просто залогировать реквест, как он делает в примере в статье.
1626.98 1632.70 "Игорь Лабутин" Но можно сделать что-то более интересное, например, модифицировать реквест или еще что-нибудь сделать.
1632.70 1633.70 "Игорь Лабутин" Будет интересно.
1633.70 1641.42 "Игорь Лабутин" Есть еще такой момент, что с этим Diagnostic Source можно работать как с обычными именовыми типами, так и с анонимными типами.
1641.42 1648.34 "Игорь Лабутин" То есть механизм не запрещает вам в качестве таких данных для ивента послать анонимные типы.
1648.34 1667.18 "Игорь Лабутин" Но, к сожалению, там возникает из-за этого проблема, что на стороне консюмеров, то есть когда вы подписываетесь на эти события, вам приходится использовать Reflection, чтобы все это разобрать и достать, собственно, значение из этого анонимного типа, потому что скастовать объект вы не можете скастовать в неизвестный анонимный тип.
1667.18 1681.82 "Игорь Лабутин" Поэтому для этого используется пакет Microsoft Extensions Diagnostics Adapter, и с ним интересная штука состоит в том, что его версия 3, по-моему, 1.2 что ли, или 3.2.1, я не помню, выпущена в 2018 году.
1681.82 1687.94 "Игорь Лабутин" И типа вот эта стабильная последняя версия, она с тех пор не обновлялась, и многие...
1687.94 1694.26 "Игорь Лабутин" Ну немножко стрёмно, потому что когда вы берете все пакеты сейчас в 6-ом SDK от Microsoft, они все там 6-что-нибудь.
1694.26 1700.34 "Игорь Лабутин" Они совместимы со старыми версиями и будут работать на старом рентале, в том числе, если вы поставите правильный target framework.
1700.34 1702.06 "Игорь Лабутин" Но тем не менее, у них версия 6.
1702.06 1711.10 "Игорь Лабутин" Этот пакет, он такой специальный, он там, по-моему, у него там чуть ли не GitHub уже закрыт, или на GitHub его уже нету, но тем не менее, вот эта стабильная версия, она есть, ей можно пользоваться.
1711.10 1721.66 "Игорь Лабутин" Ну так вот, следуя рекомендациям статьи про Diagnostics Source, соответственно, в этом пакете Middleware Analysis есть специальный Diagnostics Source.
1721.66 1739.74 "Игорь Лабутин" Этот через Diagnostics Adapter, этот специальный пакет, который позволяет сделать адаптер для анонимных сетов, мы подключаем это все дело, реализуем три метода для старта Middleware, для окончания работы Middleware и для случая, когда из Middleware был выкинут exception.
1739.74 1743.26 "Игорь Лабутин" Это тоже интересный кейс, который надо рассматривать.
1743.26 1759.98 "Игорь Лабутин" После этого мы регистрируем этот адаптер, и адаптер сам по себе готов, то есть, если ему кто-то пошлет, если кто-то в этот Diagnostics Source пошлет сообщение, то адаптер правильно отреагирует и, например, залогирует в статье то, что Middleware стартует или закончилось или в ней exception произошел.
1759.98 1767.78 "Игорь Лабутин" Но дальше возникает вопрос, что нам все это нужно добавить в обыкновенный pipeline из Parent Core приложения, чтобы наш код дергался.
1767.78 1771.02 "Игорь Лабутин" Для этого используется отличная опция под названием iStartupFilter.
1771.02 1789.42 "Игорь Лабутин" Это интерфейс, который позволяет вам встроиться, на самом деле, в стартап-код и подменять там всякие разные вещи, за счет чего получается доступиться к коду, который используется, когда любой другой код дергает метод use, то есть метод для добавления Middleware.
1789.42 1794.86 "Игорь Лабутин" Делается это путем подмены Application Builder.
1794.86 1809.82 "Игорь Лабутин" По сути, мы в нашем стартап-фильтре, точнее, в стартап-фильтре в этом пакете возвращаем кастомный Application Builder, в use методе которого мы всегда любой Middleware, который пытается кто угодно добавить, мы его оборачиваем в наш логирующий Middleware.
1809.82 1813.90 "Игорь Лабутин" То есть, получается, что на каждый добавленный Middleware на самом деле добавляется два Middleware.
1813.90 1817.14 "Игорь Лабутин" Один наш собственный логирующий, второй собственный, который добавляли.
1817.14 1820.66 "Игорь Лабутин" И все было бы хорошо, если бы не одно но.
1820.66 1832.78 "Игорь Лабутин" Как я говорил, на момент того, как наш код доходит до, точнее, как код фреймворка доходит до места, где мы вызываем наше добавление стартап-фильтра, увы и ах, наш стартап-фильтр не является первым.
1832.78 1838.38 "Игорь Лабутин" Это раз, потому что там уже допикидывается куча стартап-фильтров, но это было бы еще куда ни шло.
1838.38 1843.94 "Игорь Лабутин" Но вторая проблема в том, что к моменту того, как начинает выполняться наш код, там уже добавлены Middleware.
1843.94 1852.46 "Игорь Лабутин" Напоминаю, что сейчас в шестом .NET автоматически добавляется Developer Exception Page Middleware.
1852.46 1857.66 "Игорь Лабутин" Уже к моменту, как мы дошли до нашего кода, Developer Exception он добавлен прям самым первым.
1857.66 1864.46 "Игорь Лабутин" И что-то еще там, какой-то второй добавляется, не помню, то ли static files, то ли что-то такое.
1864.46 1868.02 "Игорь Лабутин" Если вы хотите их тоже перехватывать, то как бы надо что-то пошаманить.
1868.02 1870.94 "Игорь Лабутин" И вот как раз в статье описывается это шаманство.
1870.94 1881.46 "Игорь Лабутин" Приходится делать не Builder, там services.add_service, там или что-нибудь такое, add_single, там и так далее, а приходится пользоваться совсем внутренней маппи.
1881.46 1893.66 "Игорь Лабутин" То есть мы пишем Builder services.insert в нулевую позицию, и дальше специальным магическим статическим методом класса service_descriptor создаем правильную регистрацию этого стартап-фильтра.
1893.66 1903.42 "Игорь Лабутин" То есть это то, про что Толя договорил, энтерпрайзные большие фреймворки и так далее, они умеют строиться в непонятно куда.
1903.42 1907.26 "Игорь Лабутин" Вот можно посмотреть, как на самом деле это один из вариантов сделать.
1907.26 1915.10 "Игорь Лабутин" В сервисы воткнуться в нужном порядке, потому что мы знаем, что фреймворк потом фильтры будет доставать в том же порядке, в котором он их видит в реализации.
1915.10 1923.82 "Игорь Лабутин" Но, к сожалению, вам никто не гарантирует, что кто-то другой тоже не сделает insert в позицию 0 после того, как вы это сделали.
1923.82 1927.38 "Анатолий Кулаков" Да, на каждого умного найдется и другой такой же умный.
1927.38 1928.70 "Игорь Лабутин" Да, и вы окажетесь не первым.
1928.70 1929.70 "Игорь Лабутин" Но, тем не менее.
1929.70 1939.26 "Игорь Лабутин" В общем, если вам нужно простой способ посмотреть, в каком порядке выполняется ваш Middleware, просто возьмите этот пакет.
1939.26 1957.74 "Игорь Лабутин" Если вам интересно вот эта вся механика стартап-фильтров, того, как Middleware создаются, что такое Application Builder, какие методы у него есть и как вообще в него вклиниться, посмотрите вот эту статью, которая будет в шоу-ноутах и походите по ссылкам из нее, там есть подробное описание всех этих кусочков.
1957.74 1963.34 "Игорь Лабутин" В том числе и того, как работает и что это такое Diagnostic Source, какие там есть проблемы с анонимными типами.
1963.34 1966.34 "Игорь Лабутин" Примерно так.
1966.34 1976.18 "Анатолий Кулаков" Действительно полезная штука и странно, почему Microsoft не сделал какой-то стандартный метод расширения, какой-то регистрации, какой-то callback, который тупо позволяет вам обернуть вызов каждого Middleware.
1976.18 1977.70 "Анатолий Кулаков" Это бы решило вообще кучу проблем.
1977.70 1989.98 "Игорь Лабутин" Я боюсь, что если это сделать Microsoft, то это начнут в продакшене использовать, а это будет тормозить, тупить, еще что-нибудь делать.
1989.98 1990.98 "Анатолий Кулаков" Может поэтому?
1990.98 2002.62 "Анатолий Кулаков" Ну да, и как вы, наверное, заметили из описания Игоря, то основная рекомендация не использовать это в продакшене, потому что мало того, что у вас там какие-то дополнительные накладные расходы будут, но это, наверное, мелочи.
2002.62 2013.78 "Анатолий Кулаков" Но так как там будет еще куча магии, переопределение каких-то своих типов, вставление в нулевую позицию и вот эта прочая вся штука, она вам может дать какие-нибудь неочевидные баги.
2013.78 2024.58 "Анатолий Кулаков" Не говоря уже о том, что если вы вдруг захотите мигрировать на какой-то новый фреймворк, .NET Core 2, то там вот такие вот штуки абсолютно могут и не пройти или еще куда-нибудь.
2024.58 2034.22 "Анатолий Кулаков" В общем, для отладки, для какой-нибудь разработки, для временного решения, ну или решения сбоку, которые не жалко потерять, если вдруг что, отличная штука.
2034.22 2038.02 "Анатолий Кулаков" Но в продакшене я бы, наверное, отключал эту вещь.
2038.02 2044.50 "Игорь Лабутин" Ну либо я бы ее держал по умолчанию выключенной и включал только если в реквесте пришел какой-нибудь флаг.
2044.50 2051.14 "Игорь Лабутин" А нет, не получится, мы же статически это задаем, мы цепочку в middleware создаем до того, как вообще реквест пришел.
2051.14 2063.50 "Анатолий Кулаков" Да, это возможно только там, если ты, например, на уровне стартапа знаешь, еще там, допустим, в конфигурационном файле или в переменной окружении ты можешь передать какой-то флаг, который полностью изменит твою цепочку пайплайнов.
2063.50 2087.46 "Игорь Лабутин" Ну либо, если вы это по какой-то причине вы это оставляете в продакшене, ну например, потому что, не знаю, вам нужно именно в продакшене посмотреть, что же у вас там такое странное происходит, сделайте так, чтобы вот эти middleware, которые, вот тот middleware, который исполняется дополнительно, исполнялся только если в реквесте, например, пришел какой-то правильный флажок.
2087.46 2091.62 "Игорь Лабутин" Не знаю, опция там в токене что-нибудь лежит, еще что-нибудь.
2091.62 2102.78 "Игорь Лабутин" Чтобы ваша вот эта вот хитрая логика, не знаю, логирование, диагностики, еще что-нибудь не срабатывало на каждый реквест, потому что это, скорее всего, ваш сервер немножко нагрузит, мягко говоря.
2102.78 2105.98 "Игорь Лабутин" Потому что, по сути, ему нужно выполнить в два раза больше middleware.
2105.98 2106.98 None Именно так.
2106.98 2115.02 "Анатолий Кулаков" Ну что, я думаю, эту тему мы хорошенечко обсудили, и пора перейти и посмотреть на что-нибудь еще интересное.
2115.02 2124.06 "Анатолий Кулаков" Из интересного я, наверное, предлагаю вернуться к нашей теме про Codesmell, про DesignSmell.
2124.06 2133.54 "Анатолий Кулаков" Мы начали разговаривать в прошлом выпуске о том, что существуют некие специальные запахи, которые, если вы видите в коде, они довольно простые, понятные, легко распознаваемые.
2133.54 2141.78 "Анатолий Кулаков" Если вы видите в коде, вы сразу можете сказать с большой долей вероятности, что этот код плохой, нехороший, и его можно переделать.
2141.78 2146.50 "Анатолий Кулаков" И переделать его не просто так, а с какой-то понятной целью.
2146.50 2156.90 "Анатолий Кулаков" Мы получаем взамен стабильность, мы получаем взамен лучшую читабельность, поддержимость и обычно еще и поддержку компилятора, чтобы уменьшить количество багов.
2156.90 2160.86 "Анатолий Кулаков" И второй случай, который мы рассмотрим, он называется Primitive Obsession.
2160.86 2163.86 "Анатолий Кулаков" Довольно, мне кажется, популярная тема.
2163.86 2170.26 "Анатолий Кулаков" Я даже сначала сомневался, нужно ли ее обсуждать или не нужно, потому что штука очевидная, уже про нее миллион раз рассказывали.
2170.26 2177.18 "Анатолий Кулаков" Но, как я понял из практики, что очевидно одному человеку еще десятерым может быть совсем-совсем неочевидно.
2177.18 2181.06 "Анатолий Кулаков" Итак, давайте подробно разберемся с Primitive Obsession.
2181.06 2192.42 "Анатолий Кулаков" Действительно, когда сейчас в настоящих проектах, я практически во всех проектах встречаю какую-нибудь упоминание, какую-нибудь реализацию, как люди уходят от Primitive Obsession.
2192.42 2201.14 "Анатолий Кулаков" Но раньше, когда еще писалась эта статья, я напомню, это было много-много лет назад, 10 лет назад, это было прямо откровение.
2201.14 2209.98 "Анатолий Кулаков" Люди про это не задумывались, по крайней мере в среде, в нашей среде, где в среде Дот-нет, в среде, в которой я общался, люди об этом не задумывались.
2209.98 2223.58 "Анатолий Кулаков" И это одна из тех фишек, которые минимальными усилиями дает просто один из максимальных эффектов, то есть 20% усилий, 80% эффекта, это вот про эту технологию, про этот подход.
2223.58 2229.18 "Анатолий Кулаков" Поэтому, если вы никогда о нем не слышали, обязательно прочитайте статью, послушайте нас и попробуйте на практике.
2229.18 2233.10 "Анатолий Кулаков" А теперь давайте все-таки разберемся, что же это за дичь такая.
2233.10 2240.54 "Анатолий Кулаков" Прежде всего, наверное, для каждого из вас не секрет, что у нас существуют различные типы.
2240.54 2247.86 "Анатолий Кулаков" И это касается не только объектно-ориентированных языков, но данный подход также успешно употребляется и в функциональных языках.
2247.86 2249.82 "Анатолий Кулаков" Итак, у нас существуют примитивы.
2249.82 2265.10 "Анатолий Кулаков" Под примитивами здесь мы будем понимать встроенные типы, такие распространенные, как String, Int, Boolean и вот такие вот понятные Value Types, которые абсолютно в каждом вашем методе, в каждом классике обязательно просачиваются, обязательно есть.
2265.10 2268.42 "Анатолий Кулаков" И вот их сегодня мы как бы и будем уничтожать.
2268.42 2276.06 "Анатолий Кулаков" За что же мы ненавидим такие маленькие, хорошенькие, прекрасные вещи, типы, которые помогают нам в повседневной жизни.
2276.06 2283.22 "Анатолий Кулаков" Прежде всего, в чем заключается запах, в чем заключается вонь дизайнерская.
2283.22 2290.54 "Анатолий Кулаков" Заключается она в том, что очень часто наши классы, наши методы принимают внутрь себя обычные примитивные типы.
2290.54 2301.14 "Анатолий Кулаков" Но они внутри себя надеются на то, что к вам заходит не весь полный объем тех значений, которые эти типы внутри себя могут содержать.
2301.14 2311.90 "Анатолий Кулаков" Например, когда к вам заходит тип String и переменная называется email, то обычно вы рассчитываете на то, что в этой строке находится email-адрес.
2311.90 2323.30 "Анатолий Кулаков" И вы надеетесь очень часто, что он уже кем-то там наверху провалидирован, он корректный, не содержит каких-то невалидных символов и вы можете дальше с ним работать.
2323.30 2334.78 "Анатолий Кулаков" Вот эта надежда, которая как бы заставляет надеяться не на компилятор, не на строгость типов, а вот на какой-то "мамой клянусь" подход, который вам кто-то сверху пообещал.
2334.78 2338.18 "Анатолий Кулаков" Эта надежда - это очень плохая штука, потому что она может вас подвести.
2338.18 2341.06 "Анатолий Кулаков" И очень часто именно она нас и подводит.
2341.06 2353.98 "Анатолий Кулаков" То есть, когда вы видите примитивные типы с каким-то специальным значением в виде email-адреса, телефонного номера, zip-кода и все это сделано как-нибудь строкой, то знайте, что это специальный запах.
2353.98 2358.14 "Анатолий Кулаков" И скорее всего, этот запах можно легко устранить и получить кучу бенефитов.
2358.14 2367.98 "Анатолий Кулаков" В общем, если вы внутри себя принимаете Int, то теоретически вы должны понимать, что у вас там могут быть и отрицательные числа, и нолики быть, и положительные числа.
2367.98 2376.14 "Анатолий Кулаков" И если вы не готовы обработать со всем этим объемом, который внутри себя может вместить Int, то значит у вас уже начинается вот этот плохой запах.
2376.14 2386.46 "Анатолий Кулаков" Например, если вам нужно только count, допустим, принять, то есть только положительные числа или ноль, и вы принимаете Int, то вы натыкаетесь на этот замечательный запах.
2386.46 2390.26 "Анатолий Кулаков" К сожалению, у нас в дотнете count всегда обозначается Int.
2390.26 2395.50 "Анатолий Кулаков" Кстати, Игорь, ты знаешь, почему у нас у листка count возвращается Int, а не unsigned Int?
2395.50 2397.50 "Игорь Лабутин" Ну прям почему?
2397.50 2400.30 "Игорь Лабутин" А, ну подожди, нет, знаю.
2400.30 2420.02 "Игорь Лабутин" Потому что когда-то давно у нас было понятие CLS-комплайнси, где unsigned типы отсутствуют, и поэтому для того, чтобы тебе не нужно было каждый раз куда-то что-то приводить и так далее, чтобы коллекции были доступны в том числе в CLS-комплайнс режиме, так назовем его, то там unsigned типы, по-моему, не использовались.
2420.02 2421.78 "Анатолий Кулаков" Да, ты прав.
2421.78 2423.14 "Анатолий Кулаков" Причина абсолютно в этом.
2423.14 2432.66 "Анатолий Кулаков" Единственный момент, я хотел бы тебя поправить, что он никогда-то давно был доступен, а он сейчас тоже доступен, и сейчас до сих пор многие языки, многие библиотеки все еще пишутся с расчетом на эту дичь.
2432.66 2444.74 "Анатолий Кулаков" Именно поэтому у нас все аккаунты в нашем .NET мире почему-то возвращают не unsigned int, что было бы мегалогично, а int, который подразумевает в том себе отрицательные числа.
2444.74 2449.30 "Анатолий Кулаков" Но не будем зацикливаться на аккаунтах, мы сейчас больше говорим про бизнес-логику.
2449.30 2452.86 "Анатолий Кулаков" И там такие штуки, они есть вообще на каждом шагу.
2452.86 2459.22 "Анатолий Кулаков" Уже ранее мы приведены самые популярные значения – это email, телефоны, zip-коды и что угодно.
2459.22 2474.14 "Анатолий Кулаков" Наверняка в вашем домене вы тоже встретите такие вещи, которые передаются чисто строкой, и вы надеетесь, что там действительно хранится номер телефона, а еще может быть даже правильно отформатированный, и еще может быть только там +7, чтобы только по России звонить и отсылать смс.
2474.14 2476.34 "Анатолий Кулаков" Вообще все эти надежды – это полная дичь.
2476.34 2478.70 "Анатолий Кулаков" Как же эту дичь можно устранить?
2478.70 2480.30 "Анатолий Кулаков" Устранить ее довольно-таки легко.
2480.30 2491.34 "Анатолий Кулаков" Вам необходимо завести примитивный маленький классик value object, в который вы инкапсулируете все вот эти магические знания и в который вы инкапсулируете примитивные значения.
2491.34 2498.98 "Анатолий Кулаков" Внутри этого классика может содержаться не только само значение, но и какая-то маленькая логика по обработке этих значений.
2498.98 2506.30 "Анатолий Кулаков" Главная задача этого класса – это держать в порядке инварианты, то есть сделать так, чтобы этот класс был всегда валидным.
2506.30 2515.58 "Анатолий Кулаков" Все его инстансы обязательно будут валидными и нет такой ситуации, где он был бы неправильным, то есть он не может при себя содержать какие-то неверные значения.
2515.58 2521.58 "Анатолий Кулаков" Например, можно привести это класс email address.
2521.58 2533.30 "Анатолий Кулаков" То есть это маленький классик, который внутри себя инкапсулирует просто-напросто строку, но эту строку перед тем, как инкапсулировать внутри этого класса, он должен провалидировать.
2533.30 2542.90 "Анатолий Кулаков" Итак, давайте посмотрим, из чего состоит обычный value object в качестве устранения этого запаха.
2542.90 2554.50 "Анатолий Кулаков" Обычно делают классик, скрывают его конструктор для того, чтобы невозможно было создать невалидный класс, а наружу выставляют какой-нибудь статический метод, например, try parse.
2554.50 2559.50 "Анатолий Кулаков" На примере email в этот try parse будет передаваться строка, обычная простая строка.
2559.50 2562.50 "Анатолий Кулаков" Внутри try parse мы можем сделать уже кучу валидаций.
2562.50 2573.94 "Анатолий Кулаков" Мы можем банально по regex, например, проверить эту строку и четко убедиться, что там находится email address, по крайней мере в том виде, в котором достаточно для работы нашей программы.
2573.94 2580.86 "Анатолий Кулаков" Если же у нас валидация не прошла, мы смело можем вернуть какой-нибудь false или бросить exception, как у вас в приложении положено.
2580.86 2592.78 "Анатолий Кулаков" После того, как try parse прошел, он с помощью приватного конструктора уже создает непосредственно класс email address и позволяет как раз-таки хранить инвариант.
2592.78 2600.06 "Анатолий Кулаков" Дальше во всем вашем коде, везде вы можете использовать этот класс и быть уверенным, что внутри хранится нормальный адрес.
2600.06 2603.26 "Анатолий Кулаков" Мы его уже проверили, он хорошенький, красивенький и так далее.
2603.26 2614.78 "Анатолий Кулаков" Обычно еще для удобства класса у этого примитивного переопределяют метод toString для того, чтобы удобно видеть в дебаге, удобно передавать куда-то, удобно смотреть, сравнивать.
2614.78 2625.86 "Анатолий Кулаков" В общем, toString это тоже полезная штука и toString обычно просто-напросто возвращает value, то есть оригинальное значение, которое в большинстве случаев это строка и которое как бы показывает настоящий формат.
2625.86 2631.94 "Анатолий Кулаков" Если внутри вы инкапсулировали int или bool, это тоже можно toString просто-напросто вывернуть и все.
2631.94 2634.22 "Анатолий Кулаков" И очень часто переопределяют equals.
2634.22 2646.18 "Анатолий Кулаков" Операторы сравнения, чтобы вы эти типы, эти value-обжекты могли между собой сравнивать, это тоже как бы нормальная практика, потому что вы хотите сравнить два email и два телефона и узнать равны они или не равны.
2646.18 2650.02 "Анатолий Кулаков" Можно также операторы перекрыть, что тоже будет мега удобно.
2650.02 2657.22 "Анатолий Кулаков" Здесь стоит отметить, что часто вот эти классики, они не обязательно должны содержать и состоять из одного значения.
2657.22 2671.14 "Анатолий Кулаков" Например, в случае email и телефона это понятно, но если мы возьмем тип деньги, money, то он вполне может состоять из непосредственно суммы, которую этот money хранит, и currency, то есть в какой валюте эти деньги хранятся.
2671.14 2680.58 "Анатолий Кулаков" Это по-прежнему является value-обжектом, он по-прежнему инкапсулирует внутри себя все варианты, но там сериализует или включает в себя несколько полей, то есть это тоже нормально.
2680.58 2690.30 "Анатолий Кулаков" В результате, если мы избавляемся от передачи по всему нашему коду всяких строк и начинаем передавать вот такие строго типизированные типы, мы получаем кучу преимуществ.
2690.30 2699.86 "Анатолий Кулаков" В частности, у нас есть один единственный понятный тип, который строго описывает некое значение и самое главное у нас есть одна точка валидации.
2699.86 2714.62 "Анатолий Кулаков" То есть, если вы хотите во всей вашей программе изменить понятие о том, какой же телефонный номер для вас валидный, а какой не валидный, вы идете в класс FonNumber и там меняете метод try/parse или метод validate в зависимости от того, как вы это напишите.
2714.62 2716.26 "Анатолий Кулаков" Это очень удобно.
2716.26 2720.74 "Анатолий Кулаков" Дальше мы получаем строгую типизацию, строгую типизацию типов для компиляторов.
2720.74 2741.82 "Анатолий Кулаков" То есть, если допустим раньше вы могли в метод, который принимает строку, называющуюся email, передать другую строку, которая называется телефонный номер, и компилятор об этом бы вам ничего не сказал, и упали бы вы скорее всего в рантайме или может быть даже на тестиках, если вам повезло или в принципе даже не каждый тест это может и засечь.
2741.82 2744.26 "Анатолий Кулаков" В общем, такие ошибки было делать очень легко.
2744.26 2760.14 "Анатолий Кулаков" Если метод особенно имеет сигнатуру, которая принимает допустим и email и телефон, и вы не помните, что вы передаете первым, а что вторым, то очень легко ошибиться, поменять их местами и такую ошибку искать довольно сложно и выводить довольно сложно.
2760.14 2769.02 "Анатолий Кулаков" В нашем же случае, если у нас есть это отдельные классы, то метод будет принимать строго типизированный класс email address и строго типизированный класс FonNumber.
2769.02 2771.78 "Анатолий Кулаков" И вы уже никогда в жизни не совершите таких проблем.
2771.78 2779.62 "Анатолий Кулаков" Компилятор вам всегда подскажет, компилятор вам всегда расскажет и соответственно вы получаете как раз-таки поддержку строгой типизации.
2779.62 2784.38 "Анатолий Кулаков" Самая мощная и самая классная поддержка, которая есть в нашей программе, это поддержка компилятора.
2784.38 2790.90 "Анатолий Кулаков" Поэтому компилятор здесь ваш друг и мы ему помогаем быть нашим другом, что безусловно прекрасно.
2790.90 2800.06 "Анатолий Кулаков" Еще одно неспременное преимущество это то, что вы теперь избавляетесь от необходимости в ваших методах надеяться на то, что к вам пришла в этой строке правильное значение.
2800.06 2808.34 "Анатолий Кулаков" Может быть 10 раз его перепроверять, может быть 50 раз его перевалидировать там на входе в контроллер, на входе в базу данных, на входу в ваш бизнес домен, еще что-то.
2808.34 2834.18 "Анатолий Кулаков" Нет, вы просто-напросто где-нибудь там, где у вас начинается вход в систему, в контроллер, например, валидируете один раз тип, создаете его, тот же самый телефонный номер и уже дальше везде по бизнес-логике и по всему процессу гоняете без всяких надежд, а с четкой стопроцентной уверенностью, что там лежит именно тот формат, который вам нужен, он полностью валиден и вы на это полностью рассчитываетесь и помогаетесь.
2834.18 2843.82 "Анатолий Кулаков" Из рекомендаций прежде всего в каждом, наверное, приложении есть такое понятие, как идентификатор.
2843.82 2851.26 "Анатолий Кулаков" Например, у нас есть идентификатор пользователя, идентификатор ордера, идентификатор для чего угодно.
2851.26 2854.58 "Анатолий Кулаков" У каждого обычно объекта существует какой-нибудь IDшник.
2854.58 2862.66 "Анатолий Кулаков" И вот, в принципе, идентификатор – это как раз та штука, на которую можно легко и просто попробовать применить вот этот подход.
2862.66 2876.30 "Анатолий Кулаков" Если у вас вдруг в проекте есть, допустим, идентификатор пользователя, то очень понятно, откуда он появляется, очень понятно, где он есть, как он изобретается, куда передается и он не аффектит никаким образом какие-то другие идентификаторы.
2876.30 2889.54 "Анатолий Кулаков" Можете попробовать его просто заменить, создать класс UserID, допустим, сделать ему все те рекомендации, которые мы проговорили выше, переделать все ваше приложение на строгие идентификаторы и понять для себя, нравится вам такой подход или не нравится такой подход.
2889.54 2901.58 "Анатолий Кулаков" Если нравится, то можете переделать все остальные идентификаторы или дальше уже углубиться в настоящие сложные бизнес-объекты, в настоящие сложные value-объекты, о которых мы сегодня с вами поговорили, и найти их в вашем коде.
2901.58 2906.66 "Анатолий Кулаков" Тут главное не заморачиваться очень сильно и не переделывать абсолютно все.
2906.66 2924.18 "Анатолий Кулаков" Здесь очень важно выдержать тонкую грань, где это действительно полезно, где это действительно необходимо и нужно, и не забегать в те места, где без этого можно обойтись и там это будет избыточно, иначе ваш код опять же превратится слишком в тяжелую и слишком неподдерживаемую штуку.
2924.18 2932.58 "Анатолий Кулаков" Также будьте внимательны на границах приложения, потому что на границах приложения вы как раз-таки упираетесь в сериализацию и десериализацию.
2932.58 2948.98 "Анатолий Кулаков" И там, если стандартные, например, JSON-сериализаторы четко и понятно знают, каким образом представлять int, string, bool в JSON, то, встретив какой-нибудь user_id, они уже будут не в состоянии его каким-то образом адекватно сериализовать и десериализовать.
2948.98 2955.62 "Анатолий Кулаков" Если вы используете DTO-шки на всех границах приложения, что в принципе и рекомендуется для больших систем, то здесь у вас проблем не будет.
2955.62 2966.82 "Анатолий Кулаков" Вы просто-напросто в маппере, где вы конвертируете все ваше хозяйство в DTO-шки, там уже непосредственно обратитесь к свойству value и DTO-шки уже пойдут в сериализатор как положено.
2966.82 2976.90 "Анатолий Кулаков" Если же вы предпочитаете рисковать и использовать напрямую те значения, которые идут в бизнес-домен в сериализаторах, то здесь тоже выход есть.
2976.90 2981.26 "Анатолий Кулаков" Обычно у каждой такой системы, у каждого сериализатора есть конверторы.
2981.26 2985.18 "Анатолий Кулаков" Например, есть JSON-конвертор, есть type-конверторы.
2985.18 2990.02 "Анатолий Кулаков" Например, с помощью JSON-конвертора вы можете научить сериализовать и десериализовать ваши value-объекты.
2990.02 2998.38 "Анатолий Кулаков" С помощью type-конвертора вы можете научить ваш ISPnet Core Pipeline помогать вам тоже создавать эти объекты.
2998.38 3006.02 "Анатолий Кулаков" Например, вы можете прямо в контроллере использовать метод, то есть переменную с типом UserID.
3006.02 3014.90 "Анатолий Кулаков" Если вы переопределите type-конвертор для этого типа, для типа UserID, то у вас уже в контроллер будет приходить правильная переменная.
3014.90 3018.70 "Анатолий Кулаков" Или, соответственно, будет возвращаться ошибка, если мы не смогли ее распарсить.
3018.70 3020.50 "Анатолий Кулаков" Это тоже вполне удобно.
3020.50 3023.30 "Анатолий Кулаков" Для Entity Framework, безусловно, есть такие же точные конверторы.
3023.30 3035.50 "Анатолий Кулаков" Мы даже в предыдущих выпусках много про них говорили, особенно когда рассказывали про генераторы примитивных типов, генераторы value-объектов.
3035.50 3037.18 "Анатолий Кулаков" Там эту тему явно затрагивали.
3037.18 3042.10 "Анатолий Кулаков" Наверное, на этом все.
3042.10 3043.86 "Анатолий Кулаков" Вот такой вот интересный smell.
3043.86 3046.50 "Анатолий Кулаков" Вот так вот просто его решать.
3046.50 3056.82 "Анатолий Кулаков" Как я уже говорил, в принципе, сейчас очень много проектов поняли, что в ключевых местах это очень полезная штука, и я вижу много-много, где оно используется.
3056.82 3060.38 "Игорь Лабутин" Ну, прекрасно.
3060.38 3065.62 "Игорь Лабутин" Мне кажется, я таким пользовался не очень много времени.
3065.62 3071.46 "Игорь Лабутин" То есть я буквально по пальцам, наверное, может быть, даже одной рукой могу пересчитать случаи, когда я такое использовал.
3071.46 3073.14 "Игорь Лабутин" И было хорошо.
3073.14 3082.42 "Игорь Лабутин" Но обычно как-то, не знаю, быстро фигачишь код, везде расставляешь int и string, вuid, и на этом работает и ладно.
3082.42 3084.10 "Игорь Лабутин" И дальше уже не рефакторишь.
3084.10 3087.98 "Игорь Лабутин" То есть, видимо, надо все-таки как-то более системно к этому подходить и писать сразу правильно.
3087.98 3090.46 "Анатолий Кулаков" Может быть.
3090.46 3103.58 "Анатолий Кулаков" Еще один прекрасный момент у этого подхода в том, что ты его можешь постепенно внедрять, не затрагивая там большие куски, а просто взять, пройтись, один юзер ID заменить во всем проекте или что-то поменьше, если выбрать какой-то маленький кусочек.
3103.58 3106.02 "Анатолий Кулаков" И другие куски при этом вообще даже не пострадают.
3106.02 3109.54 "Анатолий Кулаков" То есть он очень легко и прекрасно на него переходить.
3109.54 3113.34 "Анатолий Кулаков" И когда ты переходишь, ты получаешь большие гарантии.
3113.34 3118.18 "Анатолий Кулаков" То есть у тебя больше шансов, что ты ничего не сломал, чем у тебя было до того, как ты перешел.
3118.18 3119.62 "Анатолий Кулаков" Это тоже прекрасно.
3119.62 3122.22 "Анатолий Кулаков" Ну и еще не надо забывать про наши рекорды.
3122.22 3129.34 "Анатолий Кулаков" Потому что теперь можно не писать вот этот класс с equals, с toString, с полями.
3129.34 3137.54 "Анатолий Кулаков" А если у вас тип довольно примитивный, довольно простой, то можно забабацать рекорд в одно слово, с одним параметром и все.
3137.54 3140.78 "Анатолий Кулаков" И при этом все твои фигачить-фигачить продолжаются.
3140.78 3142.78 "Анатолий Кулаков" То есть ты тратишь лишние 3 секунды и фигачишь дальше.
3142.78 3145.14 "Игорь Лабутин" Да, но валидацию придется потом дописать отдельно.
3145.14 3151.38 "Анатолий Кулаков" Да, валидацию ты дописываешь, но это можно или оставить на потом, или сделать сразу.
3151.38 3153.14 "Анатолий Кулаков" Она довольно обычно примитивная и быстрая.
3153.14 3156.34 "Анатолий Кулаков" Особенно если ты про какие-то IDшники говоришь, что там все легко.
3156.34 3157.34 "Игорь Лабутин" И шаблоны.
3157.34 3158.34 "Игорь Лабутин" Но там даже валидации особо не надо.
3158.34 3162.98 "Игорь Лабутин" Там как раз типизированность важна просто, чтобы ты один в качестве другого не подсунул.
3162.98 3164.38 "Игорь Лабутин" Да, именно так.
3164.38 3167.14 "Игорь Лабутин" Ладно, давай пойдем дальше.
3167.14 3168.74 "Игорь Лабутин" На последнюю на сегодня тему.
3168.74 3173.22 "Игорь Лабутин" И она такая совсем уже не техническая, но я думаю, что нам стоит ее затронуть.
3173.22 3178.58 "Игорь Лабутин" Мы традиционно отсматриваем результаты Stack Overflow опроса.
3178.58 3191.74 "Игорь Лабутин" Вот за 2022 год пришли отчет от Stack Overflow, где они опросили, точнее, они опрашивали кого угодно, получили примерно 74 тысячи ответов, точнее, респондентов.
3191.74 3199.26 "Игорь Лабутин" И я попытался… Весь отчет, конечно, мы сейчас озвучивать не будем, он там огромный и большой.
3199.26 3201.34 "Игорь Лабутин" Рекомендую посмотреть, там очень красивые картинки.
3201.34 3204.02 "Игорь Лабутин" Мне кажется, в прошлом году они были гораздо менее красивые.
3204.02 3205.94 "Игорь Лабутин" Видимо, они набрали хороших фронтендеров.
3205.94 3208.94 "Анатолий Кулаков" Да, наверное, да.
3208.94 3216.94 "Анатолий Кулаков" Я что-то не запомнил, чтобы он был очень красивый, поэтому мне тоже такое ощущение сложилось, что действительно в этом году он прям динамический, с графиками, прекрасный.
3216.94 3220.30 "Анатолий Кулаков" И действительно, отчет не про технорей, но для технорей.
3220.30 3221.30 "Игорь Лабутин" Да.
3221.30 3223.26 "Игорь Лабутин" И там есть несколько больших разделов.
3223.26 3227.34 "Игорь Лабутин" Я повторюсь, что мы не будем просмотреть прям все подряд совсем.
3227.34 3235.58 "Игорь Лабутин" Я для себя выделил какие-то интересные вещи, которые мне показались интересными, но, возможно, вы скажете, что это все фигня и надо смотреть на что-то другое.
3235.58 3236.58 "Игорь Лабутин" Но тем не менее.
3236.58 3242.46 "Игорь Лабутин" Начинается все с раздела Developer Profile, и там прям сначала это образование.
3242.46 3245.74 "Игорь Лабутин" Ну, прям конкретно какое образование не так важно.
3245.74 3252.70 "Игорь Лабутин" Мне интересен раздел, как, собственно, народ учится кодировать, так это называется Learning to Code.
3252.70 3265.86 "Игорь Лабутин" И в частности, в разделе Learning how to code, то есть как мы учимся, так сказать, кодировать, интересно, что первым побеждает ответ Other online resources.
3265.86 3269.10 "Игорь Лабутин" Это видосики, блоги, форумы и так далее.
3269.10 3273.42 "Игорь Лабутин" То есть есть еще онлайн-курсы и сертификаты всякие, они вот не топ-1.
3273.42 3277.82 "Игорь Лабутин" То есть топ-1 — это всякие вот видосик посмотреть, блог почитать, форум почитать.
3277.82 3283.06 "Игорь Лабутин" И это самый лучший способ, точнее, самый часто используемый сейчас способ для обучения.
3283.06 3289.30 "Анатолий Кулаков" То есть, насколько я понимаю, это единственный такой не систематичный способ, да?
3289.30 3295.42 "Анатолий Кулаков" То есть обычно книги, курсы, это как-то систематически подходишь, а это вот случайная статейка, случайный видосик.
3295.42 3306.90 "Игорь Лабутин" Да, ну вот смотри, вот эти Other online источники занимают 71%, ну, понятно, что можно было отмечать несколько, поэтому проценты не складываются в сотню, но тем не менее, это первое место.
3306.90 3311.90 "Игорь Лабутин" В третьем месте, собственно, school, как они называют, ну, это как бы университет, колледж, все что угодно.
3311.90 3314.98 "Игорь Лабутин" То есть любое образовательное учреждение официальное — это 62%.
3314.98 3324.14 "Игорь Лабутин" Дальше книжки — 55%, онлайн-курсы — это мы все-таки надеемся что-то более систематизированное, это 47%.
3324.14 3332.14 "Игорь Лабутин" Так скажем, всякие тренинги на работе — 40% и интересный пункт коллеги — 18%.
3332.14 3334.54 "Анатолий Кулаков" Слушай, обидно, что нет подкастов.
3334.54 3335.54 "Анатолий Кулаков" Где подкасты?
3335.54 3336.54 "Игорь Лабутин" Ну, будут, будут, погоди.
3336.54 3337.54 "Игорь Лабутин" А, это ещё не тот, да?
3337.54 3338.54 "Игорь Лабутин" Погоди, да.
3338.54 3339.54 "Игорь Лабутин" Это не лён.
3339.54 3342.98 "Игорь Лабутин" Да, теперь, значит, соответственно… Подожди, подожди, а ещё
3342.98 3368.02 "Анатолий Кулаков" до следующего мне кажется, что как раз ответ на твой вопрос заключается в том, что можно было несколько выбирать, то есть безусловно, ты какой-то primary education у тебя в какой-то сфере понятной, например, книги или там школа, но ты точно так же поддерживаешь знания после школы, и там, безусловно, все будут тебе отмечать hours, потому что ты где-то там тайком в YouTube-чике, в статейчиках ты всё равно будешь заглядывать.
3368.02 3371.06 "Анатолий Кулаков" Поэтому я удивляюсь, почему вообще не 100% в hours.
3371.06 3372.06 "Игорь Лабутин" Тоже верно, да.
3372.06 3374.50 "Игорь Лабутин" Мысль имеет право на жизнь.
3374.50 3380.90 "Игорь Лабутин" Так вот, значит, дальше у них следующий вопрос был, это как раз online resources to learn how to code.
3380.90 3383.30 "Игорь Лабутин" Как раз среди онлайн ресурсов.
3383.30 3390.66 "Игорь Лабутин" Там самый популярный, опять же, видимо, тот, на который все ставят галочку по умолчанию, это technical documentation, 88%.
3390.66 3392.66 "Игорь Лабутин" Ну да, все читают документацию.
3392.66 3396.30 "Игорь Лабутин" 12% народу не читает.
3396.30 3407.90 "Игорь Лабутин" Дальше в опроснике Stack Overflow используют Stack Overflow 86% всего, 14% на вопросник ответили, но в Stack Overflow они не ходят за ответами.
3407.90 3410.54 "Игорь Лабутин" Может быть, они их пишут, непонятно.
3410.54 3420.54 "Игорь Лабутин" Ну дальше, и тут поуменьшаешь, ещё всякие блоги, how-to videos, tutorials, ну и там всякие разные онлайн книжки, онлайн форумы.
3420.54 3423.58 "Игорь Лабутин" И подкасты занимают гордые 7%.
3423.58 3426.98 "Анатолий Кулаков" То есть, это самое последнее место.
3426.98 3437.82 "Игорь Лабутин" Это самое последнее место, причём оно входит в… это на самом деле более общее название, это называется auditory material, например, подкасты.
3437.82 3439.26 "Игорь Лабутин" Не знаю, что там ещё может быть.
3439.26 3441.98 "Анатолий Кулаков" Ну не знаю, какие-нибудь книги, аудиокниги, например.
3441.98 3442.98 "Игорь Лабутин" Аудиокниги по программированию.
3442.98 3451.30 "Игорь Лабутин" Нас, вот нас подкастеров, да, с 7% обгоняют даже Programming Games с 13 с лишним.
3451.30 3455.58 "Игорь Лабутин" Кто такие Programming Games, я не очень знаю, но, наверное, есть такие.
3455.58 3464.18 "Анатолий Кулаков" Так что, друзья, те, кто нас сейчас слышит и слушает регулярно, поздравляю, вы вымирающий вид, в общем, по подкастам сейчас немодно учиться.
3464.18 3468.62 "Анатолий Кулаков" И спасибо вам отдельное большое в этот момент, что вы нас поддерживаете и слушаете.
3468.62 3474.26 "Игорь Лабутин" Да, значит, по поводу платформ для онлайн курсов, мне тоже показалась интересная статистика.
3474.26 3481.78 "Игорь Лабутин" Как-то в дотнет мире, ну не знаю, у меня, по крайней мере, сложилось впечатление, что относительно лидером должен являться PluralSight.
3481.78 3493.22 "Анатолий Кулаков" Да, у меня тоже, я согласен, что на PluralSight большинство хороших и понятных курсов, главное, авторов, которые я там читал, и в блоге, допустим, то большинство из них публикуют свои курсы на PluralSight.
3493.22 3504.30 "Игорь Лабутин" Да, но при этом, вот если мы смотрим на общую статистику ответов, тут ответила всего лишь половина от общего количества народа, примерно 30 тысяч ответов было.
3504.30 3505.86 "Игорь Лабутин" Ну понятно, не все учатся.
3505.86 3511.30 "Игорь Лабутин" Не все учатся, то лидером является Udemy.
3511.30 3515.94 "Анатолий Кулаков" При том с огромным отрывом, да, у Udemy 66%, а у PluralSight всего 22%.
3515.94 3519.62 "Игорь Лабутин" Да, и там еще посерединке Coursera и Codecademy затесались.
3519.62 3532.14 "Игорь Лабутин" То есть, да, вот меня прям удивило, насколько Udemy круто, возможно, ну вот у них здесь объяснение даже есть, но возможно, это потому, что там можно покупать индивидуальные курсы, а PluralSight это все-таки подписка.
3532.14 3534.50 "Игорь Лабутин" Ты не можешь купить прям отдельный курс.
3534.50 3542.78 "Анатолий Кулаков" Интересно, потому что я вот когда-то давно смотрел на Udemy, и мне показалась довольно унылая платформа, и там материалы все чисто по introduction.
3542.78 3555.42 "Анатолий Кулаков" Слушай, а может как раз в этом и есть проблема или эффект, в том, что на Udemy много вводного материала, который естественно покрывает большинство народу, а PluralSight он больше уже для какого-то глубокого изучения.
3555.42 3566.10 "Игорь Лабутин" Может быть, а с другой стороны, на Udemy я находил такие довольно неплохие курсы, ну как по, так сказать, фееральным ссылкам, когда мне кто-то рекомендовал какой-нибудь хороший курс.
3566.10 3586.82 "Игорь Лабутин" То есть там есть, но просто за счет огромного количества курсов, которые туда может загрузить, ну почти каждый желающий, насколько я понимаю, у них чуть менее строгая политика отбора авторов по сравнению с PluralSight, то получается, что там находить, ну можно и сильные курсы, но за счет большого количества простых туда больше народу в итоге идет.
3586.82 3589.70 "Игорь Лабутин" Ну и модель подписки может быть тоже влияет.
3589.70 3598.10 "Анатолий Кулаков" Ну я верю, что мои знания пятилетней давности сейчас неактуальны и вполне могла измениться какая-нибудь политика портала и что-то новое они там придумали.
3598.10 3599.10 "Игорь Лабутин" Да.
3599.10 3600.10 "Игорь Лабутин" Так, пойдем дальше.
3600.10 3603.66 "Игорь Лабутин" Всякие, сколько лет, кто кодирует, тут не так интересно.
3603.66 3606.02 "Игорь Лабутин" Вот, Developer Roles.
3606.02 3609.22 "Игорь Лабутин" Значит, тут такое экспоненциальное убывание.
3609.22 3617.54 "Игорь Лабутин" Тут, не знаю, список из 40 ролей, я столько не смогу назвать так сходу, спроси ты меня без подсказки.
3617.54 3621.58 "Игорь Лабутин" Но тем не менее, лидеры у нас в фуллстеке, их почти 47%.
3621.58 3629.22 "Анатолий Кулаков" Наверное, потому что им больше платят, поэтому каждый обязан себя назвать фуллстеком и при этом сидеть там в сторонке кодить на ноде.
3629.22 3639.62 "Игорь Лабутин" Да, следующий по частоте это Backend, их 43 с небольшим, и потом Фронтенды почти 26%, то есть практически в два раза меньше, чем фуллстеков.
3639.62 3644.38 "Анатолий Кулаков" Ну да, мне кажется, Фронтенды вообще должны быть ноль, а все Фронтенды должны называть себя фуллстеками.
3644.38 3651.66 "Игорь Лабутин" Да, дальше есть отдельная интересная категория, это Desktop or Enterprise Applications.
3651.66 3657.14 "Игорь Лабутин" Вот, их целых 15%, то есть, видишь, много народу еще пишут такие.
3657.14 3662.70 "Анатолий Кулаков" Интересно, объединили, то есть считается, что весь Enterprise пишется под Desktop, да, я так понимаю?
3662.70 3677.46 "Игорь Лабутин" Ну, видимо, да, потому что я думаю, что если выделить Desktop отдельно, типа Non-Enterprise Desktop, то это будут только какие-нибудь, знаешь, маленькие такие вспомогательные тулы, которые пишут энтузиасты, и их там будет исчезающе мало.
3677.46 3685.22 "Игорь Лабутин" Хотя, вот тут последний пункт в разделе, как он назывался, Developer Type, это Marketing or Sales Professional, и там типа 0,84%.
3685.22 3692.22 "Игорь Лабутин" А есть отдельно консольные приложения, интересно?
3692.22 3696.38 "Игорь Лабутин" Нет, консольных нету, но есть блокчейн.
3696.38 3702.66 "Анатолий Кулаков" Ну, подходит, да, вот еще интересная штука, это DevOps Специалист, вот у DevOps Специалиста у нас 10%.
3702.66 3717.46 "Игорь Лабутин" Да, а кстати, вот если посмотреть, сейчас, есть Developer, запятая FullStack, Developer, запятая Backend, Developer, запятая Frontend, Developer, запятая Desktop, Mobile есть, и есть Developer, запятая QA or Test.
3717.46 3719.90 "Анатолий Кулаков" Ну, разработка тестов, это тоже нормуль, в принципе.
3719.90 3722.58 "Игорь Лабутин" Да, но при этом в чистом виде QA я не вижу.
3722.58 3726.02 "Анатолий Кулаков" Ну, здесь же, наверное, все-таки табличка, как вы программируете.
3726.02 3728.18 "Игорь Лабутин" Да, но для девелоперфайла, ладно, да, окей.
3728.18 3731.10 "Анатолий Кулаков" А, вот смотри, мне интересная штука, это дизайнеры.
3731.10 3735.42 "Анатолий Кулаков" Дизайнеры сейчас программируют, и 6% дизайнеров что-то программируют.
3735.42 3737.42 "Игорь Лабутин" Ты знаешь, на чем программируют дизайнеры?
3737.42 3743.30 "Игорь Лабутин" Ну, в фигме, я не знаю, можно ли там программировать, но я знаю, что дизайнеры сейчас в фигме.
3743.30 3748.90 "Анатолий Кулаков" Ну, я знаю, что можно там в 3D Max, допустим, или в Автокаде программировать, это нормуль, это понятно.
3748.90 3751.30 "Анатолий Кулаков" Но, по-моему, это не дизайнеры там этим занимаются.
3751.30 3761.74 "Игорь Лабутин" Ну, короче, знаешь, вот как всегда, к точности вопрос и есть, и к подбору, так сказать, опций, потому что, если ты посмотришь на четвертую снизу, то это senior executive.
3761.74 3765.86 "Игорь Лабутин" VP всякие, CTO, CEO, вот это прям девелоперы-девелоперы.
3765.86 3770.18 "Анатолий Кулаков" Ну, это же стартапы, там в стартапе каждый чувак это senior executive.
3770.18 3771.18 "Анатолий Кулаков" Почему бы и нет?
3771.18 3772.18 "Игорь Лабутин" Точно, точно, сейчас мы посмотрим.
3772.18 3774.70 "Анатолий Кулаков" Два человека, как бы один CTO, другой CEO.
3774.70 3782.38 "Игорь Лабутин" Нифига, знаешь, сколько народу ответило, что у него роль senior executive, CSU, VP, и что он программирует, да?
3782.38 3783.38 "Игорь Лабутин" Ну-ка.
3783.38 3784.38 "Игорь Лабутин" 1800.
3784.38 3786.90 "Анатолий Кулаков" Да, растут стартаперы в наше время, растут.
3786.90 3803.14 "Игорь Лабутин" Ну да, возможно, это как раз-таки перекос из-за стран, потому что, если посмотреть на статистику по странам, то, конечно, тут лидирует Америка, 18% Индия на втором месте, дальше Германия, Англия, Канада, Франция, Бразилия, Польша, Интерланды, Испания.
3803.14 3812.22 "Игорь Лабутин" Ну и тут, короче, Италия, Австралия и Россия с 1229 человек ответила.
3812.22 3814.86 "Игорь Лабутин" Так, поактивнее, друзья, поактивнее, а то скоро будут
3814.86 3815.86 "Анатолий Кулаков" одни CEO программировать.
3815.86 3819.62 "Игорь Лабутин" Из России по сравнению с 13 тысячами, в 10 раз больше из Америки.
3819.62 3820.62 "Анатолий Кулаков" Да, да.
3820.62 3828.26 "Анатолий Кулаков" Кстати, если из наших служителей кто-то знает, каким образом дизайнеры программируют, о чем и где пишут, то обязательно напишите нам в комментариях, нам интересно.
3828.26 3831.42 "Игорь Лабутин" Да, сейчас мне интересно.
3831.42 3841.14 "Игорь Лабутин" Также отметился один девелопер из Монако, один девелопер из Сан-Марина и один девелопер из Сан-Киттен-Невис, это наверное был Павел Дуров.
3841.14 3842.14 "Игорь Лабутин" Да, наверное.
3842.14 3845.14 "Игорь Лабутин" Если он отвечает на этот вопрос.
3845.14 3848.46 "Анатолий Кулаков" И он писал, что я вот сетевая, я программирую, да, CEO кто-то.
3848.46 3852.06 "Игорь Лабутин" Ну, нет, к сожалению, кросс-ссылка кто куда.
3852.06 3854.26 "Игорь Лабутин" Так, пойдем дальше.
3854.26 3862.46 "Игорь Лабутин" С демографией, ну да, перекос в мужскую часть у нас все еще большой, 92% против 5.
3862.46 3865.22 "Анатолий Кулаков" Белые мужчины-европейцы по-прежнему доминируют,
3865.22 3867.22 "Игорь Лабутин" да? Абсолютно.
3867.22 3874.90 "Игорь Лабутин" Так, ну в общем тут, короче, про демографию куча всякой статистики, которую я не думаю, что имеет смысл сильно вдавать.
3874.90 3875.90 "Игорь Лабутин" Да не, пропускай, конечно.
3875.90 3882.06 "Игорь Лабутин" Конечно, пошли в технологию, технология интересная, ну как бы что, программинг, они в этот раз, кстати, правильно написали.
3882.06 3888.62 "Игорь Лабутин" По-моему, в прошлом году у нас была придирка, что там секция называлась "programming languages", и там был типа HTML.
3888.62 3892.54 "Игорь Лабутин" Они теперь написали корректно "programming, scripting and markup languages".
3892.54 3894.50 "Анатолий Кулаков" Ага, то есть любые ленгвиджи, да?
3894.50 3895.50 "Игорь Лабутин" Да, все вместе.
3895.50 3896.50 "Игорь Лабутин" Удобно, удобно.
3896.50 3903.30 "Игорь Лабутин" Короче, ну JavaScript, очевидно, первый, на втором месте HTML, CSS, на третьем внезапно SQL.
3903.30 3907.98 "Анатолий Кулаков" Ну почему нет, вообще язык для запроса к данным, поэтому почему нет, да, я согласен.
3907.98 3914.10 "Игорь Лабутин" Дальше идет Python, TypeScript, Java, Bash и C#.
3914.10 3920.42 "Анатолий Кулаков" Ну, можно сказать, что среди языков программирования, если мы берем TypeScript, Java, то C# на четвертом месте.
3920.42 3923.02 "Игорь Лабутин" Ну JavaScript вообще, ну ладно.
3923.02 3925.46 "Анатолий Кулаков" А, JavaScript, он тоже за языков посчитали, да?
3925.46 3927.42 "Анатолий Кулаков" А, точно, да, на первом, негодяи.
3927.42 3944.62 "Игорь Лабутин" Ну да, причем интересно, что, сейчас, как-то у них странно выглядит, это если подсвечивать секцию все ответы, ну в смысле все респондентов брать, то тогда идет вот порядок там Java, Bash и C#.
3944.62 3947.58 "Игорь Лабутин" Если выбрать Professional Developer, то идет уже Java, C# и Bash.
3947.58 3950.14 "Игорь Лабутин" Профессионально все-таки C# обходит.
3950.14 3954.66 "Игорь Лабутин" Если выбрать секцию Learning to Code, то тоже идет Java, C#, Bash.
3954.66 3956.98 "Игорь Лабутин" Но если все, то Bash почему-то опережает.
3956.98 3958.58 "Игорь Лабутин" Блин, я не понимаю эту логику.
3958.58 3959.58 "Игорь Лабутин" Ладно.
3959.58 3962.22 "Игорь Лабутин" Да, у меня нет идей.
3962.22 3963.22 "Игорь Лабутин" Да, пишите в комментариях.
3963.22 3966.06 "Игорь Лабутин" Там еще Cabal есть, APL есть, Erlang, Fortran.
3966.06 3983.30 "Анатолий Кулаков" Не, ну погоди до Cabal, давайте посмотрим, кого C# обогнал, там неважно сколько, но он обогнал C++, PHP, C, Go, Rust, Kotlin, Dart, Swift, Groovy, если кто-то помнит, Scala, ну Delphi, ладно, не так страшно.
3983.30 3984.30 "Анатолий Кулаков" Objective-C.
3984.30 3987.38 "Анатолий Кулаков" В общем, такие гигантов, которыми в принципе можно сказать, что ого-го.
3987.38 3990.42 "Игорь Лабутин" И даже F#, у которого аж целый 1%.
3990.42 3996.14 "Анатолий Кулаков" F#, слушай, ну F#, конечно, подкачивает нас каждый год.
3996.14 3999.70 "Анатолий Кулаков" Хотелось бы, чтобы чувак рос, почему-то не растет.
3999.70 4004.42 "Анатолий Кулаков" Но достойный язык, и обидно, почему люди на нем до сих пор не пишут.
4004.42 4009.18 "Анатолий Кулаков" Наверное, потому что C# сожрал абсолютно всю аудиторию, потому что C# прекрасен.
4009.18 4013.70 "Игорь Лабутин" Ну и C#, мне кажется, форсит больше.
4013.70 4039.58 "Игорь Лабутин" Ну то есть вот если посмотреть все статьи Майкрософта, то про там почти любую фичу, ну ладно, не любую, но про все как бы какие-то более-менее знаковые фичи C# выходят сразу статьи, ну от того же, не знаю, Торгерсона, ну от Торгерсона, наверное, редко, но тем не менее, вокруг языка выходит много статей, а про F# только к релизу, мне кажется, пишут статьи про то, что ну очередная версия, вот список изменений, точка.
4039.58 4046.58 "Анатолий Кулаков" Ну знаешь, это как в настоящем интерпразе, типа менеджеры болтают языком, а настоящую работу делают разработчики.
4046.58 4052.14 "Анатолий Кулаков" Так и здесь, те, кто пишут статьи и болтают, как бы они болтают, а настоящие программисты сидят и делают
4052.14 4062.70 "Игорь Лабутин" F#. Ну настоящие программисты и C# себя тоже делают, но просто армия тех, кто болтает вокруг C# больше, чем тех, кто болтает вокруг F#, вот и все.
4062.70 4064.10 "Игорь Лабутин" Ладно, давай дальше, базы данных.
4064.10 4085.82 "Анатолий Кулаков" О, подожди, подожди, я еще одну интересную фишку нашел, язык Solidity, который обогнал F#, но язык Solidity – это язык, которым программируют контракты для блокчейна, то есть даже такая узкая ниша, как специфичный язык для какой-то определенной платформы, на которой программируют контракты для блокчейна, обогнал F# и Lisp, ну куда это годится?
4085.82 4087.38 "Анатолий Кулаков" Ирланд, между прочим, куда это вообще годится?
4087.38 4091.34 "Игорь Лабутин" Ну погоди, Ирланд, мне кажется, примерно такой же специализированный язык относительно.
4091.34 4105.62 "Анатолий Кулаков" Ну да, но мне казалось, на нем уже… Так как он давно изобретен и так как на нем очень много писали, мне казалось, что там уже такая армия, такая аудитория фанатов, что она не должна просто так дать им свалить с Ирландии в самое дно.
4105.62 4107.34 "Игорь Лабутин" Но там же еще Elixir есть.
4107.34 4116.34 "Анатолий Кулаков" Да, Elixir действительно сейчас побил и Джулию, и Кложа, то есть он возле Хаскеля прекрасно себя чувствует, согласен?
4116.34 4117.34 "Анатолий Кулаков" Да.
4117.34 4118.34 "Игорь Лабутин" Есть чем обосновать.
4118.34 4119.34 "Игорь Лабутин" Окей, пошли в базы данных.
4119.34 4122.86 "Игорь Лабутин" Тут все, по-моему, примерно так же, как было раньше.
4122.86 4128.34 "Игорь Лабутин" Я не помню, честно говоря, было бы интересно, кстати, всегда посмотреть на статистику 21-го года, но ладно.
4128.34 4139.34 "Игорь Лабутин" MySQL, Postgres, SQLite, Mongo, SQL Server, Redis, ну и дальше MariaDB, Elasticsearch, Oracle, Firebase, Dynamo, Cloud Firestore.
4139.34 4140.34 "Игорь Лабутин" Это кто такой?
4140.34 4142.34 "Игорь Лабутин" Это я даже не знаю, кто такой.
4142.34 4143.34 "Игорь Лабутин" Cassandra, Neo4j.
4143.34 4145.34 "Игорь Лабутин" О, кто-то пользуется Neo4j.
4145.34 4147.34 "Игорь Лабутин" Это графовая база данных.
4147.34 4149.34 "Игорь Лабутин" IBM DB2, CouchBase и CouchDB.
4149.34 4151.34 "Игорь Лабутин" Ну вот такой список.
4151.34 4160.34 "Анатолий Кулаков" Ну и странно еще, что MySQL за все эти долгие годы не уступил первенство Postgres, потому что кажется, что Postgres во всех аспектах его давно уже перегнал.
4160.34 4171.34 "Анатолий Кулаков" Это единственное, что там всякие люди, которые недалекие, которые помнят, что когда-то MySQL работал хорошо, подымался быстро и все такое, почему-то его все еще до сих пор юзают.
4171.34 4174.34 "Анатолий Кулаков" Какой смысл современный проект начинать на MySQL?
4174.34 4176.34 "Анатолий Кулаков" У меня сейчас большая загадка.
4176.34 4177.34 "Игорь Лабутин" Непонятно, да.
4177.34 4180.34 "Игорь Лабутин" Ну, может быть, среди отвечавших никто не начинает новый.
4180.34 4182.34 "Игорь Лабутин" А нет, подожди, там стартапов много должны начинать.
4182.34 4184.34 "Игорь Лабутин" Они на Монге начинают.
4184.34 4190.34 "Анатолий Кулаков" Да, тем более MySQL сейчас принадлежит Oracle, со всеми вытекающими непредсказуемостями и рисками.
4190.34 4191.34 "Анатолий Кулаков" Вообще странно.
4191.34 4192.34 "Игорь Лабутин" Ну, в общем, да.
4192.34 4193.34 "Игорь Лабутин" Ладно, давай дальше.
4193.34 4196.34 "Игорь Лабутин" С облаками все более-менее предсказуемо.
4196.34 4199.34 "Игорь Лабутин" AWS больше половины отвечающих.
4199.34 4203.34 "Игорь Лабутин" Ажур чуть-чуть обгоняет Google Cloud, 28-26%.
4203.34 4206.34 "Анатолий Кулаков" Да, ажур на втором месте после AWS, миленько-миленько.
4206.34 4213.34 "Игорь Лабутин" Ну, они и по деньгам на втором вроде как уверенно, и по аудитории вроде тоже.
4213.34 4219.34 "Игорь Лабутин" Дальше пошли такие уже более нишевые, Firebase, Heroku, DigitalOcean, VMware, ну и так далее.
4219.34 4223.34 "Игорь Лабутин" Так, WebFrameworks и Technologies.
4223.34 4228.34 "Игорь Лабутин" Я сначала хотел пропустить эту секцию, но потом увидел в ней ASP.NET Core и подумал, что точно.
4228.34 4231.34 "Игорь Лабутин" Хотя я считал, что WebFrameworks это больше для браузера.
4231.34 4233.34 "Игорь Лабутин" Ну ладно.
4233.34 4236.34 "Игорь Лабутин" Все-таки тут короче смесь всего.
4236.34 4239.34 "Игорь Лабутин" Тут и Node.js есть, а это вроде server-side, да?
4239.34 4240.34 "Игорь Лабутин" Правильно ведь?
4240.34 4241.34 "Игорь Лабутин" Да, все верно.
4241.34 4246.34 "Игорь Лабутин" И при этом есть React.js, jQuery и Angular, которые front-end чистые.
4246.34 4249.34 "Анатолий Кулаков" Ну и ASP.NET Core, это серверный бочек.
4249.34 4255.34 "Игорь Лабутин" Короче, топ-6, соответственно, занимают всякие джаваскриптовые штуки.
4255.34 4261.34 "Игорь Лабутин" Дальше идет ASP.NET Core, и от него чуть-чуть отстает ASP.NET старый.
4261.34 4265.34 "Игорь Лабутин" Потом идет питоновская, тройка джангов, ласкала, ларавэль.
4265.34 4269.34 "Игорь Лабутин" Ну и дальше уже опять же нишевые всякие штуки, типа FastAPI.
4269.34 4271.34 "Игорь Лабутин" Это же питоновская, по-моему, FastAPI, да ведь?
4271.34 4274.34 "Анатолий Кулаков" Вот такое название есть много где, в том числе даже в Дотнете есть FastAPI.
4274.34 4276.34 "Анатолий Кулаков" Ну да, и в джаве есть, но в FastAPI.
4276.34 4277.34 "Анатолий Кулаков" Короче, ладно.
4277.34 4279.34 "Анатолий Кулаков" Кстати, а где Spring, если уж на то хорошо?
4279.34 4280.34 "Игорь Лабутин" Spring дальше там будет, погоди.
4280.34 4281.34 "Анатолий Кулаков" Он там дальше.
4281.34 4282.34 "Анатолий Кулаков" То есть он не WebFramework, считается?
4282.34 4284.34 "Игорь Лабутин" Он, да, он не WebFramework, он чуть дальше будет.
4284.34 4286.34 "Игорь Лабутин" Он очень забавно расположен.
4286.34 4294.34 "Анатолий Кулаков" Я когда смотрю, здесь интересное замечание, что если мы убираем JavaScript, как недоязык, то у нас получается ASP.NET Core + ASP.NET на первом месте.
4294.34 4299.34 "Игорь Лабутин" Да, и целых уже 4% занимает Blazor.
4299.34 4302.34 "Анатолий Кулаков" Вот это интересно, вот это новость.
4302.34 4304.34 "Игорь Лабутин" Он даже обогнал питоновскую Symphony.
4304.34 4307.34 "Анатолий Кулаков" Да, которая давно и долго, и кстати, Drupal обогнал.
4307.34 4309.34 "Анатолий Кулаков" Да, прикольно.
4309.34 4313.34 "Игорь Лабутин" Ну вот Drupal, он немножко из другой оперы, мне кажется.
4313.34 4316.34 "Анатолий Кулаков" Слушай, они здесь все смешаны немножко из другой, поэтому...
4316.34 4322.34 "Игорь Лабутин" Так вот, дальше есть замечательный раздел Other Framework and Libraries.
4322.34 4325.34 "Игорь Лабутин" И тут .NET на первом месте.
4325.34 4327.34 "Анатолий Кулаков" Так, а вот это интересно.
4327.34 4330.34 "Игорь Лабутин" И вот тут же есть Spring на четвертом, а между ними NumPy и Pandas.
4330.34 4332.34 "Игорь Лабутин" Короче, это какая-то...
4332.34 4338.34 "Анатолий Кулаков" То есть Spring, это в 3 раза хуже, в 2 раза менее популярен, чем .NET.
4338.34 4341.34 "Анатолий Кулаков" Интересно, надо насладить, вынести и на GPoint сходить.
4341.34 4343.34 "Игорь Лабутин" При этом это в одной категории.
4343.34 4345.34 "Игорь Лабутин" Да, да, да, при этом в одной категории.
4345.34 4352.34 "Игорь Лабутин" И там же Pandas, которые, и NumPy, которые, я так понимаю, ну очень специализированные, численные, ну такие.
4352.34 4356.34 "Анатолий Кулаков" Ну и TensorFlow, да, это все, это сантистские фреймворки, ничего не здесь делать непонятно.
4356.34 4359.34 "Игорь Лабутин" Flutter туда же, React Native, Apache.
4359.34 4362.34 "Анатолий Кулаков" И Qt, смотри, Qt здесь же.
4362.34 4368.34 "Анатолий Кулаков" Представляешь, это формочки, в общем, чисто фреймворк для визуализации формочек.
4368.34 4369.34 "Анатолий Кулаков" GTK тот же самый.
4369.34 4370.34 "Анатолий Кулаков" Ну да.
4370.34 4373.34 "Анатолий Кулаков" Как они рядом с .NET и Spring, стоят и Pandas, вообще неясно.
4373.34 4379.34 "Игорь Лабутин" Непонятно, ну в общем, Xamarin 5% и UnaPlatform, которая тоже на C#, она там самая последняя 0.73%.
4379.34 4382.34 "Игорь Лабутин" Но тем не менее, попало, кто-то про нее пользуется.
4382.34 4384.34 "Игорь Лабутин" А Volonia не залетела, знаешь?
4384.34 4386.34 "Игорь Лабутин" А Volonia нет, а Volonia я нигде не видел.
4386.34 4387.34 "Игорь Лабутин" Так, был бы полный комплект.
4387.34 4389.34 "Игорь Лабутин" Так, давай дальше.
4389.34 4393.34 "Игорь Лабутин" Значит, так, Other Tools неинтересно, там лидируют NPM и Docker.
4393.34 4396.34 "Игорь Лабутин" Там ничего такого интересного нет.
4396.34 4399.34 "Игорь Лабутин" Pulumi там, кстати, это C# штука.
4399.34 4400.34 "Игорь Лабутин" C# же?
4400.34 4402.34 "Анатолий Кулаков" Нет, нет, нет, Pulumi не на Go.
4402.34 4406.34 "Игорь Лабутин" А, она на Go, но она позволяет писать, по-моему, на шарпах.
4406.34 4411.34 "Анатолий Кулаков" Да, это специальный инструмент для деплоя, для развертывания в различных средах, в различных облаках.
4411.34 4416.34 "Анатолий Кулаков" И у нее есть очень много адаптеров, то есть она позволяет писать на очень большом количестве языков.
4416.34 4422.34 "Анатолий Кулаков" То есть может описывать платформу для разворачивания на абсолютно любом языке, которым удобен в вашей команде.
4422.34 4435.34 "Игорь Лабутин" Меня почему-то Pulumi с C# ассоциируется, потому что, по-моему, мы когда ажуром занимались, соответственно, это был один из немногих адекватных способов писать ажурные темплейты для развертывания вместо их обычных XML.
4435.34 4442.34 "Анатолий Кулаков" Еще есть один интересный момент, что создателем, кофаундером и CEO Pulumi является Jodafi.
4442.34 4446.34 "Анатолий Кулаков" А Jodafi это довольно знаменитый чувак в дотнете.
4446.34 4452.34 "Анатолий Кулаков" Он делал Singularity, это операционная система на полностью менеджер языке, на подобном C#.
4452.34 4460.34 "Анатолий Кулаков" То есть он очень много вложил в начале на C#, он очень много продвигал Windows интеграцию с C#, он писал операционные системы на C#.
4460.34 4465.34 "Анатолий Кулаков" То есть у него очень много есть критических статей про параллелизацию, про конкарнси на C#.
4465.34 4468.34 "Анатолий Кулаков" То есть человек, полностью вышивший из дотнета.
4468.34 4469.34 "Анатолий Кулаков" Прикольно.
4469.34 4471.34 "Игорь Лабутин" Так, хорошо.
4471.34 4472.34 "Игорь Лабутин" Дальше IDE.
4472.34 4477.34 "Игорь Лабутин" С IDE, но тут с огромным отрывом лидирует VS Code.
4477.34 4486.34 "Игорь Лабутин" 70%, его используют практически все, просто потому что, если какая-то функциональность не поддерживается вашей обычной IDE, берите VS Code.
4486.34 4488.34 "Игорь Лабутин" На старом месте Visual Studio.
4488.34 4494.34 "Анатолий Кулаков" Неплохо, смотри, две Visual Studio на двух первых местах, это круто.
4494.34 4497.34 "Игорь Лабутин" Да, дальше IntelliJ, дальше Notebook++.
4497.34 4504.34 "Анатолий Кулаков" Ну, IntelliJ нужно понимать, что здесь внизу пошли всякие PyCharm и прочие ответвления, PHP Storm.
4504.34 4510.34 "Анатолий Кулаков" То есть если бы сложить все вместе IntelliJ-бейст IDE, то интересно было бы помериться, конечно, с Visual Studio.
4510.34 4523.34 "Игорь Лабутин" Да, но они все-таки немножко разные, хотя, как я понимаю, условно, Go или какой-нибудь Python, можно завести в обычной идее просто плагинами, то, например, C# в идее ты не заведешь плагинами, просто так.
4523.34 4526.34 "Игорь Лабутин" Это все-таки нужен RAM Rider отдельно.
4526.34 4527.34 "Анатолий Кулаков" Ну и Rider здесь нет.
4527.34 4529.34 "Игорь Лабутин" Есть, 5%, 494.
4529.34 4532.34 "Игорь Лабутин" 494, хорошо.
4532.34 4535.34 "Игорь Лабутин" То есть он есть, но так, немножко.
4535.34 4540.34 "Анатолий Кулаков" Кстати, на пятом месте Vim, а Emacs где-то там на самом не внизу.
4540.34 4541.34 "Игорь Лабутин" Забавно.
4541.34 4546.34 "Игорь Лабутин" Да, Vim прям, а там еще, кстати, NeoVim есть, еще тоже над Emacs.
4546.34 4553.34 "Анатолий Кулаков" Так что вечная битва Vim и Emacs показывает, что Vim с огромным отрывом просто сейчас более популярен.
4553.34 4557.34 "Игорь Лабутин" У аудиторий такое же слово, не забываем везде добавлять этот дисклеймер.
4557.34 4559.34 "Анатолий Кулаков" Ну да, мы сейчас про них.
4559.34 4567.34 "Игорь Лабутин" Так, дальше у них есть раздел, называется Asynchronous Tools, а Asynchronous Tools это всякие части.
4567.34 4570.34 "Анатолий Кулаков" Про Async/await, наверное, про Thread Parallel, к некей кьютера.
4570.34 4571.34 "Анатолий Кулаков" Нет, это про Jira.
4571.34 4574.34 "Анатолий Кулаков" А, у каждого свои синхронные тулы.
4574.34 4578.34 "Игорь Лабутин" Да, Asynchronous это всякие планеры, ну понятно, Ticket System, Viki и прочее.
4578.34 4582.34 "Игорь Лабутин" Там понятно, Jira, Confluence, Trello, Notion внезапно.
4582.34 4588.34 "Игорь Лабутин" Ну и дальше неизвестные мне относительно названия.
4588.34 4592.34 "Игорь Лабутин" А Asynchronous это понятно, Zoom, Teams, Slack, Google Chat.
4592.34 4593.34 "Игорь Лабутин" Это синхронные тулы.
4593.34 4595.34 "Игорь Лабутин" Да, это синхронные тулы.
4595.34 4597.34 "Игорь Лабутин" Операционки.
4597.34 4599.34 "Игорь Лабутин" С операционками, значит, интересно.
4599.34 4609.34 "Игорь Лабутин" Для всех систем кроме винды примерно одинаковый процент везде соотношение Personal и Professional Use.
4609.34 4613.34 "Игорь Лабутин" То есть для Linux 40%, для Mac OS 31 и 32.
4613.34 4618.34 "Игорь Лабутин" А вот у винды Personal Use 62, а Professional Use 48.
4618.34 4620.34 "Игорь Лабутин" Мне интересно как так.
4620.34 4621.34 "Игорь Лабутин" То есть если как бы...
4621.34 4624.34 "Игорь Лабутин" Ну я бы ожидал какое-то суммарное, короче.
4624.34 4628.34 "Игорь Лабутин" Типа если винды так больше в Personal Use, то где-то должно быть меньше.
4628.34 4633.34 "Игорь Лабутин" Или у всех, у кого есть Mac, еще обязательно есть винда дополнительная?
4633.34 4635.34 "Анатолий Кулаков" Там же наверное несколько вариантов можно было.
4635.34 4636.34 "Игорь Лабутин" Понятно, что несколько.
4636.34 4639.34 "Анатолий Кулаков" Например, ты под виндой разрабатываешь и запускаешь это все под Linux.
4639.34 4640.34 "Игорь Лабутин" Ну хотя да.
4640.34 4646.34 "Игорь Лабутин" Еще отдельно меня удивило, что отдельной операционкой вынесли Windows Subsystem for Linux.
4646.34 4648.34 "Анатолий Кулаков" Это мило.
4648.34 4651.34 "Анатолий Кулаков" Может быть скоро VSL перегонит сам Linux.
4651.34 4653.34 "Игорь Лабутин" Ну и он занял 15%, Linux 40.
4653.34 4656.34 "Игорь Лабутин" Ну еще нет, догонять надо пока.
4656.34 4662.34 "Анатолий Кулаков" Ну и по-хорошему они должны быть включены, потому что VSL 2 под собой имеет настоящую виртуалку с настоящим ядром Linux.
4662.34 4663.34 "Анатолий Кулаков" Ну да.
4663.34 4665.34 "Игорь Лабутин" Но все-таки сидишь ты под виндой.
4665.34 4668.34 "Анатолий Кулаков" Но без D он уже легко обогнал.
4668.34 4670.34 "Анатолий Кулаков" Потому что у Toyz около 1%.
4670.34 4671.34 "Игорь Лабутин" Окей.
4671.34 4676.34 "Игорь Лабутин" Дальше пошла интересная секция, которая обычно наиболее интересна читать.
4676.34 4682.34 "Игорь Лабутин" Это всякие самые любимые, самые нелюбимые, самые желанные языки.
4682.34 4685.34 "Игорь Лабутин" И тут, ну как всегда, на первом месте Rust.
4685.34 4687.34 "Игорь Лабутин" Его хотят изучать.
4687.34 4691.34 "Игорь Лабутин" Точнее, его больше всего любят и меньше всего не любят.
4691.34 4693.34 "Игорь Лабутин" И дальше идут Elixir и Clojure.
4693.34 4697.34 "Игорь Лабутин" TypeScript, Julia, Python, Delphi, Go, SQL, C#.
4697.34 4698.34 "Игорь Лабутин" Вот такой.
4698.34 4701.34 "Игорь Лабутин" В компании дальше идет Kotlin, C# с Kotlin прямо практически идеально рядом.
4701.34 4702.34 "Игорь Лабутин" Swift там где-то же рядом.
4702.34 4703.34 "Игорь Лабутин" Dart.
4703.34 4705.34 "Игорь Лабутин" И HTML, CSS.
4705.34 4710.34 "Анатолий Кулаков" Ну и C# здесь, ой, извините, F# здесь уже поднялся прямо на серединку.
4710.34 4713.34 "Игорь Лабутин" Да, F# здесь сравнялся с JavaScript.
4713.34 4717.34 "Игорь Лабутин" То есть любят и ненавидят F# примерно так же, как JavaScript, те, кто на нем пишут.
4717.34 4720.34 "Анатолий Кулаков" Вот этим я бы не гордился вообще ни разу.
4720.34 4728.34 "Игорь Лабутин" Самые нелюбимые Matlab, и Cabal, и VBA, и Objective-C, Fartran, Groovy, Perl, Assembler.
4728.34 4731.34 "Анатолий Кулаков" Ну за что так Assembler, это досталось непонятно.
4731.34 4732.34 "Анатолий Кулаков" И C тоже.
4732.34 4733.34 "Игорь Лабутин" PowerShell, кстати, удивительно.
4733.34 4738.34 "Игорь Лабутин" Те, кто на нем пишут, только 43% его любят, а 56% нет.
4738.34 4739.34 "Игорь Лабутин" И Java.
4739.34 4740.34 "Игорь Лабутин" Они просто не умеют его готовить.
4740.34 4741.34 "Игорь Лабутин" И Java где-то там же.
4741.34 4757.34 "Игорь Лабутин" При этом мы смотрели на рейтинг, так сказать, любимый vs. нелюбимый, а те, кого мы хотим учить, точнее, кого опрошены, хотят учить, там понятно, раз, всегда на первом месте, уже который год.
4757.34 4762.34 "Игорь Лабутин" Дальше Python, TypeScript, Go, JavaScript, Kotlin+, SQL и C#.
4762.34 4764.34 "Игорь Лабутин" И только потом Java.
4764.34 4768.34 "Игорь Лабутин" Меньше всего хотят учить Delphi.
4768.34 4773.34 "Анатолий Кулаков" Наверное, же Daimler, но я бы сказал, что не учите Java, пацаны.
4773.34 4774.34 "Игорь Лабутин" Да.
4774.34 4777.34 "Игорь Лабутин" PowerShell, кстати, тоже где-то в подвале.
4777.34 4778.34 "Игорь Лабутин" Ладно.
4778.34 4785.34 "Игорь Лабутин" Базы данных, это тоже про Loft, там Dreaded, это все.
4785.34 4788.34 "Игорь Лабутин" Ну там примерно все те же самые названия, Postgres, Redis, Mongos, SQLite.
4788.34 4792.34 "Игорь Лабутин" Больше всего хотят учить Postgres, потом Mongo, потом Redis, потом Elastic.
4792.34 4794.34 "Игорь Лабутин" Потом SQLite, потом MySQL.
4794.34 4796.34 "Игорь Лабутин" SQL Server я тут обогнал Oracle.
4796.34 4800.34 "Игорь Лабутин" SQL Server чуть больше хотят учить, но в абсолютном значении очень мало.
4800.34 4807.34 "Игорь Лабутин" Cloud все примерно одинаково, AWS чуть-чуть больше, а всеми остальными примерно одинаково.
4807.34 4813.34 "Игорь Лабутин" Хотят все в основном AWS, учить в смысле AWS, потом Google Cloud, а потом только Azure почему-то.
4813.34 4817.34 "Игорь Лабутин" Так, веб-фреймворки на тему Loft.
4817.34 4822.34 "Игорь Лабутин" S/P/Nad Core на четвертом месте, 71% тех, кто занимается S/P/Nad Core, их все устраивает.
4822.34 4827.34 "Анатолий Кулаков" Ну хотя бы здесь его поместили среди более-менее узнаваемых веб-фреймворков.
4827.34 4834.34 "Игорь Лабутин" А вот старый S/P/Nad, там всего 37%, доволен тем, что пользуются S/P/Nad старым.
4834.34 4838.34 "Игорь Лабутин" Blazor, кстати, 62, вполне неплохой результат.
4838.34 4851.34 "Игорь Лабутин" А в разделе "хотим изучать" там комплект React.js, Node.js, Vue.js, Next.js, Svelte, и только потом начинается Node.jng, дальше снова Angular, Deno, Stapi.
4851.34 4858.34 "Игорь Лабутин" Blazor, кстати, 4,6, где-то рядышком S/P/Nad Core, так что нормально.
4858.34 4868.34 "Игорь Лабутин" Other framework and libraries, .NET, кстати, 68% тех, кто пишет на .NET, довольны этим фактом, 31% недовольны.
4868.34 4870.34 "Анатолий Кулаков" Я не понимаю вообще, кто его обогнал-то.
4870.34 4878.34 "Игорь Лабутин" Я не знаю, кто такой Hugging Face Transformers и Tidyverse, это что-то про метавселенные, вот это все.
4878.34 4883.34 "Анатолий Кулаков" Tidyverse, наверное, да, про какую-то селену, а Transformers, это, наверное, про какое-то машинное обучение.
4883.34 4887.34 "Анатолий Кулаков" И как тут .NET среди тех, у кого попало, еще и выиграл, вообще не понял.
4887.34 4891.34 "Игорь Лабутин" Но, кстати, недалеко от .NET уна Blazor, он тоже хороший, видимо, там все хорошо.
4891.34 4894.34 "Анатолий Кулаков" Да, Spring чуть ниже середины.
4894.34 4898.34 "Игорь Лабутин" А вот хотят учить, кстати, TensorFlow, Flutter, React Native и Kavka.
4898.34 4899.34 "Анатолий Кулаков" Удачи.
4899.34 4901.34 "Игорь Лабутин" Может и выучат.
4901.34 4904.34 "Игорь Лабутин" Other Tools тут ничего интересного.
4904.34 4916.34 "Игорь Лабутин" IDE больше всего, в процентном соотношении больше всего тех, кто пользуется какой-либо IDE, и ее больше всего любят, это NeoVim.
4916.34 4919.34 "Анатолий Кулаков" Ну да, тут, наверное, не пользуются, а любят, то есть нравятся.
4919.34 4924.34 "Игорь Лабутин" Ну типа из тех, кто пользуется, какой наибольший процент тех, кому нравится.
4924.34 4927.34 "Игорь Лабутин" То есть, короче, самая успешная IDE это NeoVim.
4927.34 4930.34 "Игорь Лабутин" 82% тех, кто пользуется, им нравится.
4930.34 4934.34 "Игорь Лабутин" Дальше VS Code и дальше RAD Studio, это Delphi и Visual Studio Builder.
4934.34 4940.34 "Анатолий Кулаков" То есть те, кто не хотели учить Delphi, они понимают, что у них самая лучшая IDE.
4940.34 4943.34 "Игорь Лабутин" Ну те, кто уже пишут на Delphi, они прекрасно все довольны.
4943.34 4945.34 "Игорь Лабутин" А в четвертом месте, кстати, Raider.
4945.34 4946.34 "Анатолий Кулаков" Raider, да.
4946.34 4949.34 "Анатолий Кулаков" Ему в спину дышит Emacs и следом Vim.
4949.34 4951.34 "Анатолий Кулаков" Здесь, кстати, Emacs довольно больше людей.
4951.34 4956.34 "Анатолий Кулаков" То есть те, кто пользуются Emacs, они сильнее довольны своим инструментом, а те, кто пользуются Vim, их тупо больше.
4956.34 4957.34 "Анатолий Кулаков" Их тупо больше.
4957.34 4961.34 "Игорь Лабутин" Для сравнения, у Raider 73%, у Visual Studio 60%.
4961.34 4965.34 "Игорь Лабутин" То есть Visual Studio отстает среди тех, кому нравится, как она работает.
4965.34 4970.34 "Игорь Лабутин" Так, Asynchronous Tool, Notion в лидерах.
4970.34 4972.34 "Игорь Лабутин" Те, кто пользуются, им больше всего нравятся.
4972.34 4976.34 "Игорь Лабутин" Остальных я даже первых семи, я знаю, два.
4976.34 4981.34 "Игорь Лабутин" Jiri нравится 56%.
4981.34 4983.34 "Игорь Лабутин" Confluence еще меньше.
4983.34 4989.34 "Игорь Лабутин" Asynchronous Tool, Slack прям лидер, но уже подбирается Mattermost к нему.
4989.34 4993.34 "Игорь Лабутин" Так, вот, и дальше прекрасный раздел.
4993.34 4997.34 "Игорь Лабутин" Называется Worked With vs. Wanted To Work With.
4997.34 4999.34 "Игорь Лабутин" А по-русски?
4999.34 5012.34 "Игорь Лабутин" Сейчас я сформулирую. В какую технологию вы хотели бы пойти, если вы работаете на какой-то другой технологии уже сейчас?
5012.34 5018.34 "Игорь Лабутин" И тут это очень сложно обсуждать словами, потому что тут нет чиселок.
5018.34 5021.34 "Игорь Лабутин" Тут есть красивейшие картинки.
5021.34 5025.34 "Игорь Лабутин" Вот, например, я могу сказать, по языкам программирования.
5025.34 5034.34 "Игорь Лабутин" Те, кто сейчас пишет на C#, хотят узнать TypeScript, SQL, Python, JavaScript и HTML.
5034.34 5039.34 "Игорь Лабутин" А сам C# хотят узнать те, кто сейчас пишет на HTML, JavaScript и Python.
5039.34 5043.34 "Игорь Лабутин" А, и на SQL. Вот такая вот зависимость.
5043.34 5045.34 "Игорь Лабутин" Сложно делать какие-то выводы, но...
5045.34 5048.34 "Анатолий Кулаков" Вообще сложно, но картинки офигенно красивые.
5048.34 5050.34 "Анатолий Кулаков" Да, да, посмотрите картинки.
5050.34 5056.34 "Игорь Лабутин" А, тут, кстати, если навести на каждую эту линию, то там еще и чиселка покажется.
5056.34 5058.34 "Игорь Лабутин" Сколько их в штуках?
5058.34 5061.34 "Анатолий Кулаков" Ладно, мы тут и так довольно долго сидим. Давай без чиселок.
5061.34 5064.34 "Игорь Лабутин" 12 тысяч тех, кто работает на C# и хочет работать на C#.
5064.34 5066.34 "Игорь Лабутин" Ну, отлично.
5066.34 5068.34 "Игорь Лабутин" Я в их числе и базы данных.
5068.34 5070.34 "Игорь Лабутин" Ну, тут все, ничего интересного, наверное, нет.
5070.34 5074.34 "Игорь Лабутин" Cloud Platforms тоже. Где-то я тут хотел ProductNet найти.
5074.34 5086.34 "Игорь Лабутин" Во! Да. Значит, короче, раздел, который веб-фреймворке технологий, где там Django, SPNet Core, SPNet, React, всякие ангуляры, свелты и прочее.
5086.34 5092.34 "Игорь Лабутин" В общем, все фронтендерские соединены, там, вот, я сейчас навел на React, они соединены просто вообще со всеми.
5092.34 5094.34 "Игорь Лабутин" Остальными, кроме...
5094.34 5096.34 "Анатолий Кулаков" То есть люди из React хотят учить все вообще остальное?
5096.34 5100.34 "Игорь Лабутин" Все остальное, кроме Django, SPNet Core и SPNet.
5100.34 5104.34 "Игорь Лабутин" Эти троица видно прямо вот на этой картинке, насколько они обособлены.
5104.34 5111.34 "Игорь Лабутин" Значит, те, кто занимаются SPNet Core, они не хотят заниматься только SPNet Core, больше ничем.
5111.34 5115.34 "Игорь Лабутин" Такая же фигня с Django. Там линия только с самого себя.
5115.34 5119.34 "Игорь Лабутин" А те, кто занимаются SPNet, хотят только заниматься SPNet Core, и все.
5119.34 5123.34 "Анатолий Кулаков" Очень миленькая, очень закрытая экосистема, людям все нравится, не мешайте.
5123.34 5125.34 "Игорь Лабутин" Да, в общем, прямо видно.
5125.34 5129.34 "Игорь Лабутин" Так, Other Frameworks, что тут у нас?
5129.34 5136.34 "Игорь Лабутин" О, тут есть .NET, тут тоже большая часть хочет заниматься .NET и снова .NET.
5136.34 5147.34 "Игорь Лабутин" Есть часть народа, которые хочет в Xamarin, в TensorFlow, в React Native, в Pandas, в NumPy, Flutter, Electron и Kafka.
5147.34 5149.34 "Игорь Лабутин" Ну, неплохо.
5149.34 5150.34 "Игорь Лабутин" Нормальный такой набор.
5150.34 5157.34 "Игорь Лабутин" А входящих соединений здесь только внезапно из NumPy и Pandas, из Xamarin еще.
5157.34 5161.34 "Игорь Лабутин" Мне вот нравится, что если я пишу на Xamarin, я хочу писать на .NET.
5161.34 5164.34 "Игорь Лабутин" Ну, кажется, ты уже это делаешь.
5164.34 5170.34 "Анатолий Кулаков" Ну, может, подразумевается, что если ты из мобильных приложенков, ты хочешь писать что-нибудь back-end-отношное.
5170.34 5172.34 "Игорь Лабутин" Ну, может быть, да.
5172.34 5176.34 "Игорь Лабутин" Так, Other Tools, ну, тут неинтересно.
5176.34 5180.34 "Игорь Лабутин" IDE, IDE, IDE, Visual Studio Code.
5180.34 5182.34 "Игорь Лабутин" Visual Studio Code соединена вообще со всеми.
5182.34 5184.34 "Игорь Лабутин" А где обычная Visual Studio?
5184.34 5185.34 "Игорь Лабутин" А вот она.
5185.34 5189.34 "Игорь Лабутин" Ну, Notepad++, Visual Studio Code и все.
5189.34 5192.34 "Игорь Лабутин" Больше те, кто занимается Visual Studio, не хотят ничего.
5192.34 5198.34 "Игорь Лабутин" Никаких тебе Eclipse, IntelliJ, Python, Vim, Android Studio, PyCharm не надо.
5198.34 5199.34 "Анатолий Кулаков" Да, ну, все это чушь, конечно.
5199.34 5201.34 "Анатолий Кулаков" Если у тебя есть нормальная Visual Studio, зачем тебе все это остальное?
5201.34 5202.34 "Анатолий Кулаков" Конечно.
5202.34 5207.34 "Игорь Лабутин" Asynchronous Tools, Zoom, Slack, Teams.
5207.34 5209.34 "Игорь Лабутин" Ну, короче, тут все со всеми.
5209.34 5213.34 "Игорь Лабутин" Так, про TopPaying Technologies, мне кажется, можно пропустить.
5213.34 5215.34 "Игорь Лабутин" То есть, здесь большой раздел про зарплаты.
5215.34 5218.34 "Игорь Лабутин" Ну, во-первых, скорее всего, основан непонятно на чем.
5218.34 5222.34 "Игорь Лабутин" Во-вторых, ну, короче, F# на третьем месте.
5222.34 5225.34 "Анатолий Кулаков" И средняя зарплата здесь довольно странная.
5225.34 5230.34 "Анатолий Кулаков" 95 тысяч у F# и на первом месте 106 тысяч у Closure.
5230.34 5232.34 "Анатолий Кулаков" То есть, зарплаты какие-то странные.
5232.34 5235.34 "Анатолий Кулаков" Я бы хотел посмотреть, по какой формуле их рассчитывали.
5235.34 5237.34 "Анатолий Кулаков" То есть, даже для средней это безумно низко.
5237.34 5239.34 "Игорь Лабутин" Ну, и опять же, безумно низко где?
5239.34 5244.34 "Игорь Лабутин" В Штатах, в определенном Штате, в среднем по миру, в Индии, в России.
5244.34 5247.34 "Анатолий Кулаков" Ну, насколько я помню, большинство проголосовавших, это именно Штаты.
5247.34 5249.34 "Игорь Лабутин" Ну, да.
5249.34 5251.34 "Игорь Лабутин" Да, поэтому, наверное.
5251.34 5252.34 "Игорь Лабутин" Я в этом году вопрос не заполнял.
5252.34 5254.34 "Игорь Лабутин" Вряд ли они считают зарплату.
5254.34 5257.34 "Игорь Лабутин" Хотя, фиг знает, может, они на основании этих ответов.
5257.34 5258.34 "Игорь Лабутин" Черт знает.
5258.34 5262.34 "Анатолий Кулаков" И по какому курсу, может, доллар по 200, как обещал старик.
5262.34 5264.34 "Игорь Лабутин" Ладно, пропускаем.
5264.34 5266.34 "Игорь Лабутин" Так, Change salaries пропускаем.
5266.34 5268.34 "Игорь Лабутин" Что у нас тут еще есть интересное?
5268.34 5269.34 "Игорь Лабутин" Где-то были...
5269.34 5270.34 "Игорь Лабутин" Во, version control.
5270.34 5272.34 "Игорь Лабутин" Ну, тут без сюрпризов.
5272.34 5273.34 "Игорь Лабутин" Вернее, как?
5273.34 5274.34 "Игорь Лабутин" Нет, с сюрпризами.
5274.34 5277.34 "Игорь Лабутин" Гид занимает 93%, почти 94%.
5277.34 5280.34 "Анатолий Кулаков" То есть, сюрприз, почему не 100 ты имеешь в виду?
5280.34 5281.34 "Игорь Лабутин" Нет.
5281.34 5282.34 "Игорь Лабутин" Дальше идет SVN.
5282.34 5286.34 "Игорь Лабутин" Ну, окей, тут опять же, суммарно 100% не будет, но тем не менее.
5286.34 5288.34 "Игорь Лабутин" Дальше идет SVN, 5%.
5288.34 5291.34 "Анатолий Кулаков" Ну, очень много, кстати, проектов появлялось, когда SVN был на пике популярности.
5291.34 5295.34 "Анатолий Кулаков" Поэтому, наверняка, это такие лего-свежегромные проекты, которые до сих пор и живут.
5295.34 5298.34 "Игорь Лабутин" Дальше идет I don't use one, 4%.
5298.34 5300.34 "Игорь Лабутин" Не использует ВЦС вообще.
5300.34 5305.34 "Игорь Лабутин" Но справедливости ради, если выбрать только professional developers, остается 1,3%.
5305.34 5307.34 "Игорь Лабутин" Но, тем не менее, они все равно есть.
5307.34 5312.34 "Игорь Лабутин" Есть 737 человек, которые не используют систему контроля версии в professional development.
5312.34 5313.34 "Анатолий Кулаков" Какой ужас.
5313.34 5316.34 "Анатолий Кулаков" Тут бы хотелось посмотреть, на чем они программируют.
5316.34 5319.34 "Игорь Лабутин" Да, и Меркурил еще живой.
5319.34 5325.34 "Анатолий Кулаков" Наверное, тоже какой-то страшный legacy, который непонятно, как переносить и куда переносить.
5325.34 5326.34 "Игорь Лабутин" Да.
5326.34 5329.34 "Игорь Лабутин" Внезапно, следующий тоже было интересно мне посмотреть.
5329.34 5333.34 "Игорь Лабутин" На удивление, сделан называется Interacting with Version Control Systems.
5333.34 5337.34 "Игорь Лабутин" Как вы общаетесь с системой контроля версии.
5337.34 5339.34 "Игорь Лабутин" И самая популярная версия - это Command Line.
5339.34 5341.34 "Игорь Лабутин" 83%.
5341.34 5345.34 "Анатолий Кулаков" Если большинство народу пользуется Git, то у него, безусловно, Command Line.
5345.34 5347.34 "Анатолий Кулаков" Это самый удобный и самый понятный интерфейс.
5347.34 5348.34 "Игорь Лабутин" Ну да.
5348.34 5352.34 "Игорь Лабутин" Хотя на тему "самый понятный" не знаю.
5352.34 5356.34 "Игорь Лабутин" Скорее, мне кажется, что многие ответили, что они пользуются Command Line.
5356.34 5361.34 "Игорь Лабутин" Потому что ты гуглишь, как сделать Git от отуда, тебе говорят, вот такую команду выполни, будет.
5361.34 5364.34 "Игорь Лабутин" Ты идешь в Command Line, выполняешь - вот, сделано.
5364.34 5370.34 "Игорь Лабутин" Я думаю, что часть из этих ответивших просто пользуется копипастом из интернета.
5370.34 5372.34 "Игорь Лабутин" Да, мы согласны.
5372.34 5374.34 "Игорь Лабутин" И гордо говорит, я использую Git Command Line.
5374.34 5376.34 "Игорь Лабутин" Вторая строчка - это Code Editor.
5376.34 5380.34 "Игорь Лабутин" Ну, то есть, напрямую, студия, идеи, райдеры и так далее.
5380.34 5381.34 "Игорь Лабутин" Web GUI.
5381.34 5383.34 "Игорь Лабутин" Внезапно 28%.
5383.34 5387.34 "Игорь Лабутин" И отдельное приложение, 26% - это довольно много, кстати.
5387.34 5390.34 "Игорь Лабутин" Отдельные клиенты для Git.
5390.34 5393.34 "Игорь Лабутин" Версия Control Platform, ну, там понятно, что GitHub.
5393.34 5397.34 "Игорь Лабутин" Причем Professional Use - 55%, а Personal - 87%.
5397.34 5398.34 "Игорь Лабутин" Много.
5398.34 5402.34 "Игорь Лабутин" В GitLab ровно наоборот, Personal поменьше, Professional побольше.
5402.34 5406.34 "Игорь Лабутин" Bitbucket, Azure, Custom, ну и так далее.
5406.34 5409.34 "Игорь Лабутин" Так, Web 3.0, блокчейн.
5409.34 5412.34 "Анатолий Кулаков" И при том, не написали, что это такое.
5412.34 5415.34 "Игорь Лабутин" Да, прям вообще не написали, точно.
5415.34 5419.34 "Анатолий Кулаков" Но зато понятно, что там есть блокчейн, ну куда же без блокчейна.
5419.34 5422.34 "Игорь Лабутин" Для ответливости ради, это единственный вопрос про блокчейн.
5422.34 5426.34 "Игорь Лабутин" И он вида, как вы относитесь к блокчейну.
5426.34 5432.34 "Игорь Лабутин" И тут типа от варианта ответа - very favorable, favorable, indifferent, unsure.
5432.34 5434.34 "Игорь Лабутин" И короче, indifferent больше всего.
5434.34 5437.34 "Игорь Лабутин" Четверть, короче, всех ответивших, им пофиг на блокчейн.
5437.34 5438.34 "Игорь Лабутин" Абсолютно.
5438.34 5440.34 "Анатолий Кулаков" А также это единственная секция в разделе Web 3.0.
5440.34 5443.34 "Анатолий Кулаков" То есть нет в Web 3.0 ничего, кроме блокчейна.
5443.34 5444.34 "Игорь Лабутин" Интересно, сгруппировали.
5444.34 5449.34 "Игорь Лабутин" Да, значит, раздел Work.
5449.34 5453.34 "Игорь Лабутин" Employment, ну тут не интересно, Full-time, не Full-time.
5453.34 5456.34 "Игорь Лабутин" Короче, это самое, география, чего?
5456.34 5458.34 "Игорь Лабутин" А, это по странам разбивка.
5458.34 5462.34 "Игорь Лабутин" Вот, вот здесь, короче, мне понравилось.
5462.34 5467.34 "Игорь Лабутин" Значит, Work Environment полностью remote, 43%.
5467.34 5470.34 "Анатолий Кулаков" Много, много, смотри, это прям хороший показатель.
5470.34 5472.34 "Анатолий Кулаков" Половина всех разработчиков.
5472.34 5477.34 "Игорь Лабутин" Гибридный, это, ну понятно, в какое-то время remote, какое-то время надо быть в офисе.
5477.34 5481.34 "Игорь Лабутин" Это тоже примерно столько же, примерно 42 с копеечками процента.
5481.34 5484.34 "Игорь Лабутин" И полностью в офисе 14,5%.
5484.34 5489.34 "Игорь Лабутин" Вот, то есть, ну, примерно получилось вот так вот.
5489.34 5491.34 "Анатолий Кулаков" Красота, мне нравится вообще, так это называется.
5491.34 5495.34 "Игорь Лабутин" Вот, по размеру компании понятно.
5495.34 5498.34 "Игорь Лабутин" Так, Celery тоже неинтересно.
5498.34 5502.34 "Игорь Лабутин" Celery, Celery, Celery, где-то тут была такая.
5502.34 5510.34 "Игорь Лабутин" Вот, вот тот же ответ, кликни на Buy Organizational Size в Work Environment.
5510.34 5519.34 "Игорь Лабутин" Мне понравилось, то есть, это все то же самое, соотношение Fully Remote, гибридных и Full-in-person в зависимости от размера компании.
5519.34 5521.34 "Игорь Лабутин" И мне нравится строчка Just Me.
5521.34 5522.34 "Анатолий Кулаков" Это что значит?
5522.34 5525.34 "Игорь Лабутин" Это значит, что это типа компания, которая состоит из одного меня.
5525.34 5536.34 "Игорь Лабутин" И в такой компании 70% таких компаний Fully Remote, 23% гибридных, и сколько там остается, 6-7% это in-person.
5536.34 5540.34 "Игорь Лабутин" То есть, типа я состою из одной компании, я обязательно хожу в офис.
5540.34 5543.34 "Игорь Лабутин" Или хожу иногда, или вообще не хожу в офис.
5543.34 5550.34 "Анатолий Кулаков" Ну, нормально, потому что некоторые люди ходят в coworking для того, чтобы уйти просто из дома.
5550.34 5553.34 "Игорь Лабутин" Наверное, именно это имели ввиду.
5553.34 5554.34 "Игорь Лабутин" Мне порадовало.
5554.34 5556.34 "Анатолий Кулаков" Ну, так смешно, да, согласен.
5556.34 5559.34 "Анатолий Кулаков" Я ухожу от себя для того, чтобы поработать с собой.
5559.34 5560.34 "Игорь Лабутин" Селлери пропускаем.
5560.34 5567.34 "Игорь Лабутин" А, вот, кстати, интересный момент, Coding Outside of Work, то есть, кодируете ли вы, когда вы закончили работать.
5567.34 5571.34 "Игорь Лабутин" Тут большим отрывом идет Hobby, это 73% практически.
5571.34 5575.34 "Игорь Лабутин" На втором месте Contribute to Open Source Projects, 26%.
5575.34 5578.34 "Игорь Лабутин" Дальше, Freelance Contract Work.
5578.34 5582.34 "Игорь Лабутин" Coding Outside of Work, Freelance Contract Work, 23%.
5582.34 5585.34 "Игорь Лабутин" Народу кодируют дополнение к работе.
5585.34 5592.34 "Игорь Лабутин" Есть еще School Academic Work, Bootstrapping Business, то есть, пытаются начать бизнес, пока работают на основной работе.
5592.34 5596.34 "Игорь Лабутин" И 12% I don't code outside of work.
5596.34 5598.34 "Игорь Лабутин" В общем, как-то так.
5598.34 5600.34 "Игорь Лабутин" Кто-то не кодирует.
5600.34 5603.34 "Игорь Лабутин" Stack Overflow Site Use.
5603.34 5609.34 "Игорь Лабутин" Ну, ладно, 98% тех, кто отвечал на опрос Stack Overflow, уходят на Stack Overflow.
5609.34 5611.34 "Анатолий Кулаков" Хотя бы.
5611.34 5616.34 "Игорь Лабутин" Так, Frequency, не важно, Have an Account.
5616.34 5619.34 "Игорь Лабутин" Ну, короче, Stack Overflow, это все неинтересно.
5619.34 5622.34 "Игорь Лабутин" Это все неинтересно.
5622.34 5626.34 "Игорь Лабутин" Daily Time Spent Searching for Answer Solutions.
5626.34 5630.34 "Игорь Лабутин" То есть, сколько вы проводите времени, пытаясь найти ответ на какие-то вопросы.
5630.34 5633.34 "Игорь Лабутин" Ну, и тут такое, средний код.
5633.34 5640.34 "Игорь Лабутин" Среднестатистический разработчик, ответивший на этот опрос, тратит примерно 30 до 60 минут в день в поисках ответов на свои вопросы.
5640.34 5644.34 "Игорь Лабутин" Остальное время не знаю, что он делает. Кофе пьет, код пишет.
5644.34 5649.34 "Игорь Лабутин" Так, хотя это может конкретно Stack Overflow, Ignite.
5649.34 5652.34 "Игорь Лабутин" Onboarding Developer Experience.
5652.34 5659.34 "Игорь Лабутин" Continuous Integration, 70% имеют в организации, так скажем.
5659.34 5661.34 "Игорь Лабутин" DevOps Function, 60%.
5661.34 5663.34 "Игорь Лабутин" Automated Testing, блин, 68%.
5663.34 5665.34 "Игорь Лабутин" Микросервисы, 49%.
5665.34 5668.34 "Игорь Лабутин" Observability Tools, 37%.
5668.34 5671.34 "Игорь Лабутин" Ничего из этого, 13%.
5671.34 5673.34 "Анатолий Кулаков" Не, ну нормальные цифры, хорошие.
5673.34 5675.34 "Игорь Лабутин" Не, ну большие на самом деле.
5675.34 5677.34 "Анатолий Кулаков" Да, да, это хорошие, большие цифры.
5677.34 5681.34 "Игорь Лабутин" Так, ну и все. Дальше пошел раздел Методология, если интересно, почитайте.
5681.34 5686.34 "Игорь Лабутин" Как так сказать? 20% считают этот опрос очень длинным.
5686.34 5692.34 "Анатолий Кулаков" Да, я думаю, слушатели нашего подкаста присоединятся, потому что мы тут практически час болтали про этот опрос.
5692.34 5695.34 "Игорь Лабутин" Ну прекрасно, куча цифр, да, вы правда все дополнили.
5695.34 5702.34 "Игорь Лабутин" Ну я надеюсь, что мы подсветили самые интересные моменты, самые, не знаю, забавные и хоть как-то относящиеся к Дотонету.
5702.34 5706.34 "Игорь Лабутин" Ну тогда на этом будем завершать на сегодня.
5706.34 5710.34 "Игорь Лабутин" Пока новостей нет, лето, отдыхаем, все дела.
5710.34 5719.34 "Игорь Лабутин" Ждем, когда будут более интересные новости, а коси не начнут появляться, потому что начнет более-менее превьюиться седьмой Дотонет.
5719.34 5722.34 "Игорь Лабутин" Отвечательно, релиз Кандидат там пойдут, это все.
5722.34 5729.34 "Анатолий Кулаков" Да, и там, как всегда, наверное, будем говорить сплошняком только о Дотонете, о новом фреймворке, о новых версиях, нововведениях.
5729.34 5735.34 "Анатолий Кулаков" А сейчас, да, на расслабончике смотрим статейки, методологии всякие и что-то по мелочи.
5735.34 5755.34 "Игорь Лабутин" Да, если, кстати, вам интересно, чтобы мы о чем-нибудь таком порассуждали, поговорили, обозрели что-нибудь, пока нет какого-то большого количества потока новостей, то кидайте в комменты, там, в ютубушке или куда-нибудь еще, темы, там, давайте, какой-нибудь импут, мы поищем, пороемся, обсудим в каком-нибудь формате.
5755.34 5763.34 "Анатолий Кулаков" Да, также у нас есть почта, radiosobakadotnet.ru, тоже ждем ваших писем, с любой информацией, рекомендациями, похвалами, руганием всем подряд.
5763.34 5766.34 "Анатолий Кулаков" Всегда будем рады обратной связи.
5766.34 5813.34 "Игорь Лабутин" Да, и так, сегодня мы тогда, давайте, подведем итоги, посмотрели Core WCF 1.1 релиз, посмотрели новый ISPnet Migration Tooling Preview 2, узнали, что .NET NANO Framework все еще жив после 5 лет и очень неплохо жив, разобрались, как нужно анализировать, с помощью каких инструментов анализировать, как исполняется ваша middleware в ISPnet Core Pipelines, как в это залезать и какие технологии для этого используются, узнали, как правильно обращаться с примитивами в вашем коде и как их типизировать так, чтобы вы не могли их перепутать друг с другом, ну и посмотрели, чем закончился Stack Overflow Developer Survey 2022, узнали много бесполезных фактов и, наверное, неплохо провели время.
5813.34 5815.34 "Игорь Лабутин" На этом, наверное, все.
5815.34 5826.34 "Анатолий Кулаков" Да, давай закругляться, большое спасибо, друзья, что нас слушали, обязательно пишите фидбэк, делитесь с друзьями, шары, репосты, лайки, все это нам сильно помогает держаться на плаву и до новых встреч, всем пока!
5826.34 5828.34 "Игорь Лабутин" Всем пока!
5828.34 5847.34 None [музыка]
